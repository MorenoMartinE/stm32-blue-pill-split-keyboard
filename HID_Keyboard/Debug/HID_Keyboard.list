
HID_Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bc8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08007cd4  08007cd4  00008cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d30  08007d30  00009158  2**0
                  CONTENTS
  4 .ARM          00000000  08007d30  08007d30  00009158  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d30  08007d30  00009158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d30  08007d30  00008d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d34  08007d34  00008d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  08007d38  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ec  20000158  08007e90  00009158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000944  08007e90  00009944  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1a1  00000000  00000000  00009181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002709  00000000  00000000  00014322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  00016a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000074e  00000000  00000000  00017438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e34  00000000  00000000  00017b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce9d  00000000  00000000  000309ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000844e4  00000000  00000000  0003d857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1d3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002674  00000000  00000000  000c1d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c43f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	08007cbc 	.word	0x08007cbc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	08007cbc 	.word	0x08007cbc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fecd 	bl	8000ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 fd71 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fdc9 	bl	8000cf0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015e:	f007 f9c7 	bl	80074f0 <MX_USB_DEVICE_Init>
      	uint8_t KEYCODE04;
      	uint8_t KEYCODE05;
      	uint8_t KEYCODE06;
      } keyboardReportsDes;

      keyboardReportsDes HIDKeyboard = {0,0,0,0,0,0,0};
 8000162:	463b      	mov	r3, r7
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
 8000168:	605a      	str	r2, [r3, #4]

      short control = 0;
 800016a:	2300      	movs	r3, #0
 800016c:	81fb      	strh	r3, [r7, #14]
      /* Infinite loop */
      /* USER CODE BEGIN WHILE */
      while (1)
      {
    	  uint8_t *ptr_key = &HIDKeyboard.KEYCODE01;
 800016e:	463b      	mov	r3, r7
 8000170:	3302      	adds	r3, #2
 8000172:	60bb      	str	r3, [r7, #8]
    	  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000174:	2201      	movs	r2, #1
 8000176:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800017a:	48a5      	ldr	r0, [pc, #660]	@ (8000410 <main+0x2c4>)
 800017c:	f001 f9e7 	bl	800154e <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000186:	48a2      	ldr	r0, [pc, #648]	@ (8000410 <main+0x2c4>)
 8000188:	f001 f9e1 	bl	800154e <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 800018c:	2201      	movs	r2, #1
 800018e:	2180      	movs	r1, #128	@ 0x80
 8000190:	489f      	ldr	r0, [pc, #636]	@ (8000410 <main+0x2c4>)
 8000192:	f001 f9dc 	bl	800154e <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2140      	movs	r1, #64	@ 0x40
 800019a:	489d      	ldr	r0, [pc, #628]	@ (8000410 <main+0x2c4>)
 800019c:	f001 f9d7 	bl	800154e <HAL_GPIO_WritePin>

    	    control = 0;
 80001a0:	2300      	movs	r3, #0
 80001a2:	81fb      	strh	r3, [r7, #14]
    	    HIDKeyboard.MODIFIER = 0X00;
 80001a4:	2300      	movs	r3, #0
 80001a6:	703b      	strb	r3, [r7, #0]
      		if (!(HAL_GPIO_ReadPin(C8_GPIO_Port, C8_Pin))){
 80001a8:	2102      	movs	r1, #2
 80001aa:	489a      	ldr	r0, [pc, #616]	@ (8000414 <main+0x2c8>)
 80001ac:	f001 f9b8 	bl	8001520 <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d101      	bne.n	80001ba <main+0x6e>
    			HIDKeyboard.MODIFIER = 0X02;
 80001b6:	2302      	movs	r3, #2
 80001b8:	703b      	strb	r3, [r7, #0]
      		}

      		if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 80001ba:	2102      	movs	r1, #2
 80001bc:	4894      	ldr	r0, [pc, #592]	@ (8000410 <main+0x2c4>)
 80001be:	f001 f9af 	bl	8001520 <HAL_GPIO_ReadPin>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d101      	bne.n	80001cc <main+0x80>
      			control = 1;
 80001c8:	2301      	movs	r3, #1
 80001ca:	81fb      	strh	r3, [r7, #14]
      		}

      		if (!(HAL_GPIO_ReadPin(C5_GPIO_Port, C5_Pin))){
 80001cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001d0:	4890      	ldr	r0, [pc, #576]	@ (8000414 <main+0x2c8>)
 80001d2:	f001 f9a5 	bl	8001520 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d103      	bne.n	80001e4 <main+0x98>
      			HIDKeyboard.MODIFIER = HIDKeyboard.MODIFIER + 0X01;
 80001dc:	783b      	ldrb	r3, [r7, #0]
 80001de:	3301      	adds	r3, #1
 80001e0:	b2db      	uxtb	r3, r3
 80001e2:	703b      	strb	r3, [r7, #0]
    		}

      		if (!(HAL_GPIO_ReadPin(C7_GPIO_Port, C7_Pin))){
 80001e4:	2104      	movs	r1, #4
 80001e6:	488a      	ldr	r0, [pc, #552]	@ (8000410 <main+0x2c4>)
 80001e8:	f001 f99a 	bl	8001520 <HAL_GPIO_ReadPin>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d103      	bne.n	80001fa <main+0xae>
      			HIDKeyboard.MODIFIER = HIDKeyboard.MODIFIER + 0X04;
 80001f2:	783b      	ldrb	r3, [r7, #0]
 80001f4:	3304      	adds	r3, #4
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	703b      	strb	r3, [r7, #0]
      		}

      		if (!(HAL_GPIO_ReadPin(C9_GPIO_Port, C9_Pin))){
 80001fa:	2101      	movs	r1, #1
 80001fc:	4885      	ldr	r0, [pc, #532]	@ (8000414 <main+0x2c8>)
 80001fe:	f001 f98f 	bl	8001520 <HAL_GPIO_ReadPin>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d108      	bne.n	800021a <main+0xce>
      			if(control == 1){
 8000208:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800020c:	2b01      	cmp	r3, #1
 800020e:	d102      	bne.n	8000216 <main+0xca>
      				control = 3;
 8000210:	2303      	movs	r3, #3
 8000212:	81fb      	strh	r3, [r7, #14]
 8000214:	e001      	b.n	800021a <main+0xce>
      			}else{
      				control = 4;
 8000216:	2304      	movs	r3, #4
 8000218:	81fb      	strh	r3, [r7, #14]
      			}
      		}

      		if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)) && !(HAL_GPIO_ReadPin(C7_GPIO_Port, C7_Pin))){
 800021a:	2102      	movs	r1, #2
 800021c:	487c      	ldr	r0, [pc, #496]	@ (8000410 <main+0x2c4>)
 800021e:	f001 f97f 	bl	8001520 <HAL_GPIO_ReadPin>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d108      	bne.n	800023a <main+0xee>
 8000228:	2104      	movs	r1, #4
 800022a:	4879      	ldr	r0, [pc, #484]	@ (8000410 <main+0x2c4>)
 800022c:	f001 f978 	bl	8001520 <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d101      	bne.n	800023a <main+0xee>
      			HIDKeyboard.MODIFIER = 0X08;
 8000236:	2308      	movs	r3, #8
 8000238:	703b      	strb	r3, [r7, #0]
			}

      		if ((!(HAL_GPIO_ReadPin(C8_GPIO_Port, C8_Pin))) && control == 3){
 800023a:	2102      	movs	r1, #2
 800023c:	4875      	ldr	r0, [pc, #468]	@ (8000414 <main+0x2c8>)
 800023e:	f001 f96f 	bl	8001520 <HAL_GPIO_ReadPin>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d112      	bne.n	800026e <main+0x122>
 8000248:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800024c:	2b03      	cmp	r3, #3
 800024e:	d10e      	bne.n	800026e <main+0x122>
      			*ptr_key = 0X39;
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	2239      	movs	r2, #57	@ 0x39
 8000254:	701a      	strb	r2, [r3, #0]
      			if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000256:	463b      	mov	r3, r7
 8000258:	3307      	adds	r3, #7
 800025a:	68ba      	ldr	r2, [r7, #8]
 800025c:	429a      	cmp	r2, r3
 800025e:	d003      	beq.n	8000268 <main+0x11c>
				{
					ptr_key++;
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	3301      	adds	r3, #1
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	e002      	b.n	800026e <main+0x122>
				}else{
					ptr_key = &HIDKeyboard.KEYCODE01;
 8000268:	463b      	mov	r3, r7
 800026a:	3302      	adds	r3, #2
 800026c:	60bb      	str	r3, [r7, #8]
				}
      		}

    	  	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000274:	4866      	ldr	r0, [pc, #408]	@ (8000410 <main+0x2c4>)
 8000276:	f001 f96a 	bl	800154e <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 800027a:	2201      	movs	r2, #1
 800027c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000280:	4863      	ldr	r0, [pc, #396]	@ (8000410 <main+0x2c4>)
 8000282:	f001 f964 	bl	800154e <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000286:	2201      	movs	r2, #1
 8000288:	2180      	movs	r1, #128	@ 0x80
 800028a:	4861      	ldr	r0, [pc, #388]	@ (8000410 <main+0x2c4>)
 800028c:	f001 f95f 	bl	800154e <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000290:	2201      	movs	r2, #1
 8000292:	2140      	movs	r1, #64	@ 0x40
 8000294:	485e      	ldr	r0, [pc, #376]	@ (8000410 <main+0x2c4>)
 8000296:	f001 f95a 	bl	800154e <HAL_GPIO_WritePin>

				if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 800029a:	2120      	movs	r1, #32
 800029c:	485c      	ldr	r0, [pc, #368]	@ (8000410 <main+0x2c4>)
 800029e:	f001 f93f 	bl	8001520 <HAL_GPIO_ReadPin>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d122      	bne.n	80002ee <main+0x1a2>
					switch(control){
 80002a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80002ac:	2b04      	cmp	r3, #4
 80002ae:	d00e      	beq.n	80002ce <main+0x182>
 80002b0:	2b04      	cmp	r3, #4
 80002b2:	dc10      	bgt.n	80002d6 <main+0x18a>
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d002      	beq.n	80002be <main+0x172>
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d004      	beq.n	80002c6 <main+0x17a>
 80002bc:	e00b      	b.n	80002d6 <main+0x18a>
					case 0:
						*ptr_key = 0X14;
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	2214      	movs	r2, #20
 80002c2:	701a      	strb	r2, [r3, #0]
						break;
 80002c4:	e007      	b.n	80002d6 <main+0x18a>
					case 1:
						*ptr_key = 0X1E;
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	221e      	movs	r2, #30
 80002ca:	701a      	strb	r2, [r3, #0]
						break;
 80002cc:	e003      	b.n	80002d6 <main+0x18a>
					case 4:
						*ptr_key = 0x3A;
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	223a      	movs	r2, #58	@ 0x3a
 80002d2:	701a      	strb	r2, [r3, #0]
						break;
 80002d4:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80002d6:	463b      	mov	r3, r7
 80002d8:	3307      	adds	r3, #7
 80002da:	68ba      	ldr	r2, [r7, #8]
 80002dc:	429a      	cmp	r2, r3
 80002de:	d003      	beq.n	80002e8 <main+0x19c>
					{
						ptr_key++;
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	3301      	adds	r3, #1
 80002e4:	60bb      	str	r3, [r7, #8]
 80002e6:	e002      	b.n	80002ee <main+0x1a2>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 80002e8:	463b      	mov	r3, r7
 80002ea:	3302      	adds	r3, #2
 80002ec:	60bb      	str	r3, [r7, #8]
					}
				}

				if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 80002ee:	2110      	movs	r1, #16
 80002f0:	4847      	ldr	r0, [pc, #284]	@ (8000410 <main+0x2c4>)
 80002f2:	f001 f915 	bl	8001520 <HAL_GPIO_ReadPin>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d122      	bne.n	8000342 <main+0x1f6>
					switch(control){
 80002fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000300:	2b04      	cmp	r3, #4
 8000302:	d00e      	beq.n	8000322 <main+0x1d6>
 8000304:	2b04      	cmp	r3, #4
 8000306:	dc10      	bgt.n	800032a <main+0x1de>
 8000308:	2b00      	cmp	r3, #0
 800030a:	d002      	beq.n	8000312 <main+0x1c6>
 800030c:	2b01      	cmp	r3, #1
 800030e:	d004      	beq.n	800031a <main+0x1ce>
 8000310:	e00b      	b.n	800032a <main+0x1de>
						case 0:
							*ptr_key = 0x1A;
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	221a      	movs	r2, #26
 8000316:	701a      	strb	r2, [r3, #0]
							break;
 8000318:	e007      	b.n	800032a <main+0x1de>
						case 1:
							*ptr_key = 0X1F;
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	221f      	movs	r2, #31
 800031e:	701a      	strb	r2, [r3, #0]
							break;
 8000320:	e003      	b.n	800032a <main+0x1de>
						case 4:
							*ptr_key = 0x3B;
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	223b      	movs	r2, #59	@ 0x3b
 8000326:	701a      	strb	r2, [r3, #0]
							break;
 8000328:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 800032a:	463b      	mov	r3, r7
 800032c:	3307      	adds	r3, #7
 800032e:	68ba      	ldr	r2, [r7, #8]
 8000330:	429a      	cmp	r2, r3
 8000332:	d003      	beq.n	800033c <main+0x1f0>
					{
						ptr_key++;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	3301      	adds	r3, #1
 8000338:	60bb      	str	r3, [r7, #8]
 800033a:	e002      	b.n	8000342 <main+0x1f6>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 800033c:	463b      	mov	r3, r7
 800033e:	3302      	adds	r3, #2
 8000340:	60bb      	str	r3, [r7, #8]
					}
				}

				if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8000342:	2102      	movs	r1, #2
 8000344:	4832      	ldr	r0, [pc, #200]	@ (8000410 <main+0x2c4>)
 8000346:	f001 f8eb 	bl	8001520 <HAL_GPIO_ReadPin>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d122      	bne.n	8000396 <main+0x24a>
					switch(control){
 8000350:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000354:	2b04      	cmp	r3, #4
 8000356:	d00e      	beq.n	8000376 <main+0x22a>
 8000358:	2b04      	cmp	r3, #4
 800035a:	dc10      	bgt.n	800037e <main+0x232>
 800035c:	2b00      	cmp	r3, #0
 800035e:	d002      	beq.n	8000366 <main+0x21a>
 8000360:	2b01      	cmp	r3, #1
 8000362:	d004      	beq.n	800036e <main+0x222>
 8000364:	e00b      	b.n	800037e <main+0x232>
						case 0:
							*ptr_key = 0X08;
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	2208      	movs	r2, #8
 800036a:	701a      	strb	r2, [r3, #0]
							break;
 800036c:	e007      	b.n	800037e <main+0x232>
						case 1:
							*ptr_key = 0X20;
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	2220      	movs	r2, #32
 8000372:	701a      	strb	r2, [r3, #0]
							break;
 8000374:	e003      	b.n	800037e <main+0x232>
						case 4:
							*ptr_key = 0x3C;
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	223c      	movs	r2, #60	@ 0x3c
 800037a:	701a      	strb	r2, [r3, #0]
							break;
 800037c:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 800037e:	463b      	mov	r3, r7
 8000380:	3307      	adds	r3, #7
 8000382:	68ba      	ldr	r2, [r7, #8]
 8000384:	429a      	cmp	r2, r3
 8000386:	d003      	beq.n	8000390 <main+0x244>
					{
						ptr_key++;
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	3301      	adds	r3, #1
 800038c:	60bb      	str	r3, [r7, #8]
 800038e:	e002      	b.n	8000396 <main+0x24a>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000390:	463b      	mov	r3, r7
 8000392:	3302      	adds	r3, #2
 8000394:	60bb      	str	r3, [r7, #8]
					}
				}


				if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000396:	2101      	movs	r1, #1
 8000398:	481d      	ldr	r0, [pc, #116]	@ (8000410 <main+0x2c4>)
 800039a:	f001 f8c1 	bl	8001520 <HAL_GPIO_ReadPin>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d122      	bne.n	80003ea <main+0x29e>
					switch(control){
 80003a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003a8:	2b04      	cmp	r3, #4
 80003aa:	d00e      	beq.n	80003ca <main+0x27e>
 80003ac:	2b04      	cmp	r3, #4
 80003ae:	dc10      	bgt.n	80003d2 <main+0x286>
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d002      	beq.n	80003ba <main+0x26e>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d004      	beq.n	80003c2 <main+0x276>
 80003b8:	e00b      	b.n	80003d2 <main+0x286>
						case 0:
							*ptr_key = 0X15;
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	2215      	movs	r2, #21
 80003be:	701a      	strb	r2, [r3, #0]
							break;
 80003c0:	e007      	b.n	80003d2 <main+0x286>
						case 1:
							*ptr_key = 0X21;
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	2221      	movs	r2, #33	@ 0x21
 80003c6:	701a      	strb	r2, [r3, #0]
							break;
 80003c8:	e003      	b.n	80003d2 <main+0x286>
						case 4:
							*ptr_key = 0x3D;
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	223d      	movs	r2, #61	@ 0x3d
 80003ce:	701a      	strb	r2, [r3, #0]
							break;
 80003d0:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80003d2:	463b      	mov	r3, r7
 80003d4:	3307      	adds	r3, #7
 80003d6:	68ba      	ldr	r2, [r7, #8]
 80003d8:	429a      	cmp	r2, r3
 80003da:	d003      	beq.n	80003e4 <main+0x298>
					{
						ptr_key++;
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	3301      	adds	r3, #1
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	e002      	b.n	80003ea <main+0x29e>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 80003e4:	463b      	mov	r3, r7
 80003e6:	3302      	adds	r3, #2
 80003e8:	60bb      	str	r3, [r7, #8]
					}
				}

			   if (!(HAL_GPIO_ReadPin(C5_GPIO_Port, C5_Pin))){
 80003ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003ee:	4809      	ldr	r0, [pc, #36]	@ (8000414 <main+0x2c8>)
 80003f0:	f001 f896 	bl	8001520 <HAL_GPIO_ReadPin>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d11e      	bne.n	8000438 <main+0x2ec>
					switch(control){
 80003fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d002      	beq.n	8000408 <main+0x2bc>
 8000402:	2b01      	cmp	r3, #1
 8000404:	d008      	beq.n	8000418 <main+0x2cc>
 8000406:	e00b      	b.n	8000420 <main+0x2d4>

						case 0:
							*ptr_key = 0X17;
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	2217      	movs	r2, #23
 800040c:	701a      	strb	r2, [r3, #0]
							break;
 800040e:	e007      	b.n	8000420 <main+0x2d4>
 8000410:	40010800 	.word	0x40010800
 8000414:	40010c00 	.word	0x40010c00
						case 1:
							*ptr_key = 0X22;
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	2222      	movs	r2, #34	@ 0x22
 800041c:	701a      	strb	r2, [r3, #0]
							break;
 800041e:	bf00      	nop
					 }
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000420:	463b      	mov	r3, r7
 8000422:	3307      	adds	r3, #7
 8000424:	68ba      	ldr	r2, [r7, #8]
 8000426:	429a      	cmp	r2, r3
 8000428:	d003      	beq.n	8000432 <main+0x2e6>
					{
						ptr_key++;
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	3301      	adds	r3, #1
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	e002      	b.n	8000438 <main+0x2ec>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000432:	463b      	mov	r3, r7
 8000434:	3302      	adds	r3, #2
 8000436:	60bb      	str	r3, [r7, #8]
					}
			   }

			   if (!(HAL_GPIO_ReadPin(C6_GPIO_Port, C6_Pin))){
 8000438:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800043c:	48a5      	ldr	r0, [pc, #660]	@ (80006d4 <main+0x588>)
 800043e:	f001 f86f 	bl	8001520 <HAL_GPIO_ReadPin>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d11a      	bne.n	800047e <main+0x332>
					switch(control){
 8000448:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d002      	beq.n	8000456 <main+0x30a>
 8000450:	2b01      	cmp	r3, #1
 8000452:	d004      	beq.n	800045e <main+0x312>
 8000454:	e007      	b.n	8000466 <main+0x31a>
						case 0:
							*ptr_key = 0X1C;
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	221c      	movs	r2, #28
 800045a:	701a      	strb	r2, [r3, #0]
							break;
 800045c:	e003      	b.n	8000466 <main+0x31a>
						case 1:
							*ptr_key = 0X23;
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	2223      	movs	r2, #35	@ 0x23
 8000462:	701a      	strb	r2, [r3, #0]
							break;
 8000464:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000466:	463b      	mov	r3, r7
 8000468:	3307      	adds	r3, #7
 800046a:	68ba      	ldr	r2, [r7, #8]
 800046c:	429a      	cmp	r2, r3
 800046e:	d003      	beq.n	8000478 <main+0x32c>
					{
						ptr_key++;
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	3301      	adds	r3, #1
 8000474:	60bb      	str	r3, [r7, #8]
 8000476:	e002      	b.n	800047e <main+0x332>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000478:	463b      	mov	r3, r7
 800047a:	3302      	adds	r3, #2
 800047c:	60bb      	str	r3, [r7, #8]
					}
				}

			   if (!(HAL_GPIO_ReadPin(C7_GPIO_Port, C7_Pin))){
 800047e:	2104      	movs	r1, #4
 8000480:	4895      	ldr	r0, [pc, #596]	@ (80006d8 <main+0x58c>)
 8000482:	f001 f84d 	bl	8001520 <HAL_GPIO_ReadPin>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d11a      	bne.n	80004c2 <main+0x376>
					switch(control){
 800048c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d002      	beq.n	800049a <main+0x34e>
 8000494:	2b01      	cmp	r3, #1
 8000496:	d004      	beq.n	80004a2 <main+0x356>
 8000498:	e007      	b.n	80004aa <main+0x35e>
						case 0:
							*ptr_key = 0X18;
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	2218      	movs	r2, #24
 800049e:	701a      	strb	r2, [r3, #0]
							break;
 80004a0:	e003      	b.n	80004aa <main+0x35e>
						case 1:
							*ptr_key = 0X24;
 80004a2:	68bb      	ldr	r3, [r7, #8]
 80004a4:	2224      	movs	r2, #36	@ 0x24
 80004a6:	701a      	strb	r2, [r3, #0]
							break;
 80004a8:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80004aa:	463b      	mov	r3, r7
 80004ac:	3307      	adds	r3, #7
 80004ae:	68ba      	ldr	r2, [r7, #8]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d003      	beq.n	80004bc <main+0x370>
					{
						ptr_key++;
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	3301      	adds	r3, #1
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	e002      	b.n	80004c2 <main+0x376>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 80004bc:	463b      	mov	r3, r7
 80004be:	3302      	adds	r3, #2
 80004c0:	60bb      	str	r3, [r7, #8]
					}
				}

			   if (!(HAL_GPIO_ReadPin(C8_GPIO_Port, C8_Pin))){
 80004c2:	2102      	movs	r1, #2
 80004c4:	4883      	ldr	r0, [pc, #524]	@ (80006d4 <main+0x588>)
 80004c6:	f001 f82b 	bl	8001520 <HAL_GPIO_ReadPin>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d11a      	bne.n	8000506 <main+0x3ba>
					switch(control){
 80004d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d002      	beq.n	80004de <main+0x392>
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d004      	beq.n	80004e6 <main+0x39a>
 80004dc:	e007      	b.n	80004ee <main+0x3a2>
						case 0:
							*ptr_key = 0X0C;
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	220c      	movs	r2, #12
 80004e2:	701a      	strb	r2, [r3, #0]
							break;
 80004e4:	e003      	b.n	80004ee <main+0x3a2>
						case 1:
							*ptr_key = 0X25;
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	2225      	movs	r2, #37	@ 0x25
 80004ea:	701a      	strb	r2, [r3, #0]
							break;
 80004ec:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80004ee:	463b      	mov	r3, r7
 80004f0:	3307      	adds	r3, #7
 80004f2:	68ba      	ldr	r2, [r7, #8]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d003      	beq.n	8000500 <main+0x3b4>
					{
						ptr_key++;
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	3301      	adds	r3, #1
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	e002      	b.n	8000506 <main+0x3ba>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000500:	463b      	mov	r3, r7
 8000502:	3302      	adds	r3, #2
 8000504:	60bb      	str	r3, [r7, #8]
					}
				}

			   if (!(HAL_GPIO_ReadPin(C9_GPIO_Port, C9_Pin))){
 8000506:	2101      	movs	r1, #1
 8000508:	4872      	ldr	r0, [pc, #456]	@ (80006d4 <main+0x588>)
 800050a:	f001 f809 	bl	8001520 <HAL_GPIO_ReadPin>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d11a      	bne.n	800054a <main+0x3fe>
					switch(control){
 8000514:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d002      	beq.n	8000522 <main+0x3d6>
 800051c:	2b01      	cmp	r3, #1
 800051e:	d004      	beq.n	800052a <main+0x3de>
 8000520:	e007      	b.n	8000532 <main+0x3e6>
						case 0:
							*ptr_key = 0X12;
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	2212      	movs	r2, #18
 8000526:	701a      	strb	r2, [r3, #0]
							break;
 8000528:	e003      	b.n	8000532 <main+0x3e6>
						case 1:
							*ptr_key = 0X26;
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	2226      	movs	r2, #38	@ 0x26
 800052e:	701a      	strb	r2, [r3, #0]
							break;
 8000530:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000532:	463b      	mov	r3, r7
 8000534:	3307      	adds	r3, #7
 8000536:	68ba      	ldr	r2, [r7, #8]
 8000538:	429a      	cmp	r2, r3
 800053a:	d003      	beq.n	8000544 <main+0x3f8>
					{
						ptr_key++;
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	3301      	adds	r3, #1
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	e002      	b.n	800054a <main+0x3fe>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000544:	463b      	mov	r3, r7
 8000546:	3302      	adds	r3, #2
 8000548:	60bb      	str	r3, [r7, #8]
					}
				}

			   if (!(HAL_GPIO_ReadPin(C10_GPIO_Port, C10_Pin))){
 800054a:	2108      	movs	r1, #8
 800054c:	4862      	ldr	r0, [pc, #392]	@ (80006d8 <main+0x58c>)
 800054e:	f000 ffe7 	bl	8001520 <HAL_GPIO_ReadPin>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d11a      	bne.n	800058e <main+0x442>
					switch(control){
 8000558:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d002      	beq.n	8000566 <main+0x41a>
 8000560:	2b01      	cmp	r3, #1
 8000562:	d004      	beq.n	800056e <main+0x422>
 8000564:	e007      	b.n	8000576 <main+0x42a>
						case 0:
							*ptr_key = 0X13;
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	2213      	movs	r2, #19
 800056a:	701a      	strb	r2, [r3, #0]
							break;
 800056c:	e003      	b.n	8000576 <main+0x42a>
						case 1:
							*ptr_key = 0X27;
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	2227      	movs	r2, #39	@ 0x27
 8000572:	701a      	strb	r2, [r3, #0]
							break;
 8000574:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000576:	463b      	mov	r3, r7
 8000578:	3307      	adds	r3, #7
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	429a      	cmp	r2, r3
 800057e:	d003      	beq.n	8000588 <main+0x43c>
					{
						ptr_key++;
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	3301      	adds	r3, #1
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	e002      	b.n	800058e <main+0x442>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000588:	463b      	mov	r3, r7
 800058a:	3302      	adds	r3, #2
 800058c:	60bb      	str	r3, [r7, #8]
					}
			   }

    	  	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000594:	4850      	ldr	r0, [pc, #320]	@ (80006d8 <main+0x58c>)
 8000596:	f000 ffda 	bl	800154e <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005a0:	484d      	ldr	r0, [pc, #308]	@ (80006d8 <main+0x58c>)
 80005a2:	f000 ffd4 	bl	800154e <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2180      	movs	r1, #128	@ 0x80
 80005aa:	484b      	ldr	r0, [pc, #300]	@ (80006d8 <main+0x58c>)
 80005ac:	f000 ffcf 	bl	800154e <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2140      	movs	r1, #64	@ 0x40
 80005b4:	4848      	ldr	r0, [pc, #288]	@ (80006d8 <main+0x58c>)
 80005b6:	f000 ffca 	bl	800154e <HAL_GPIO_WritePin>

				if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 80005ba:	2120      	movs	r1, #32
 80005bc:	4846      	ldr	r0, [pc, #280]	@ (80006d8 <main+0x58c>)
 80005be:	f000 ffaf 	bl	8001520 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d122      	bne.n	800060e <main+0x4c2>
					switch(control){
 80005c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005cc:	2b04      	cmp	r3, #4
 80005ce:	d00e      	beq.n	80005ee <main+0x4a2>
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	dc10      	bgt.n	80005f6 <main+0x4aa>
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d002      	beq.n	80005de <main+0x492>
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d004      	beq.n	80005e6 <main+0x49a>
 80005dc:	e00b      	b.n	80005f6 <main+0x4aa>
						case 0:
							*ptr_key = 0X04;
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	2204      	movs	r2, #4
 80005e2:	701a      	strb	r2, [r3, #0]
							break;
 80005e4:	e007      	b.n	80005f6 <main+0x4aa>
						case 1:
							*ptr_key = 0X29;
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	2229      	movs	r2, #41	@ 0x29
 80005ea:	701a      	strb	r2, [r3, #0]
							break;
 80005ec:	e003      	b.n	80005f6 <main+0x4aa>
						case 4:
							*ptr_key = 0x3E;
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	223e      	movs	r2, #62	@ 0x3e
 80005f2:	701a      	strb	r2, [r3, #0]
							break;
 80005f4:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80005f6:	463b      	mov	r3, r7
 80005f8:	3307      	adds	r3, #7
 80005fa:	68ba      	ldr	r2, [r7, #8]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d003      	beq.n	8000608 <main+0x4bc>
					{
						ptr_key++;
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	3301      	adds	r3, #1
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	e002      	b.n	800060e <main+0x4c2>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000608:	463b      	mov	r3, r7
 800060a:	3302      	adds	r3, #2
 800060c:	60bb      	str	r3, [r7, #8]
					}
				}
				if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 800060e:	2110      	movs	r1, #16
 8000610:	4831      	ldr	r0, [pc, #196]	@ (80006d8 <main+0x58c>)
 8000612:	f000 ff85 	bl	8001520 <HAL_GPIO_ReadPin>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d11a      	bne.n	8000652 <main+0x506>
					switch(control){
 800061c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d002      	beq.n	800062a <main+0x4de>
 8000624:	2b04      	cmp	r3, #4
 8000626:	d004      	beq.n	8000632 <main+0x4e6>
 8000628:	e007      	b.n	800063a <main+0x4ee>
					case 0:
						*ptr_key = 0X16;
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2216      	movs	r2, #22
 800062e:	701a      	strb	r2, [r3, #0]
						break;
 8000630:	e003      	b.n	800063a <main+0x4ee>
					case 4:
						*ptr_key = 0x3F;
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	223f      	movs	r2, #63	@ 0x3f
 8000636:	701a      	strb	r2, [r3, #0]
						break;
 8000638:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 800063a:	463b      	mov	r3, r7
 800063c:	3307      	adds	r3, #7
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	429a      	cmp	r2, r3
 8000642:	d003      	beq.n	800064c <main+0x500>
					{
						ptr_key++;
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	3301      	adds	r3, #1
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	e002      	b.n	8000652 <main+0x506>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 800064c:	463b      	mov	r3, r7
 800064e:	3302      	adds	r3, #2
 8000650:	60bb      	str	r3, [r7, #8]
					}
				}
				if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8000652:	2102      	movs	r1, #2
 8000654:	4820      	ldr	r0, [pc, #128]	@ (80006d8 <main+0x58c>)
 8000656:	f000 ff63 	bl	8001520 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d11a      	bne.n	8000696 <main+0x54a>
					switch(control){
 8000660:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d002      	beq.n	800066e <main+0x522>
 8000668:	2b04      	cmp	r3, #4
 800066a:	d004      	beq.n	8000676 <main+0x52a>
 800066c:	e007      	b.n	800067e <main+0x532>
					case 0:
						*ptr_key = 0X07;
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	2207      	movs	r2, #7
 8000672:	701a      	strb	r2, [r3, #0]
						break;
 8000674:	e003      	b.n	800067e <main+0x532>
					case 4:
						*ptr_key = 0x40;
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	2240      	movs	r2, #64	@ 0x40
 800067a:	701a      	strb	r2, [r3, #0]
						break;
 800067c:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 800067e:	463b      	mov	r3, r7
 8000680:	3307      	adds	r3, #7
 8000682:	68ba      	ldr	r2, [r7, #8]
 8000684:	429a      	cmp	r2, r3
 8000686:	d003      	beq.n	8000690 <main+0x544>
					{
						ptr_key++;
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	3301      	adds	r3, #1
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	e002      	b.n	8000696 <main+0x54a>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000690:	463b      	mov	r3, r7
 8000692:	3302      	adds	r3, #2
 8000694:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000696:	2101      	movs	r1, #1
 8000698:	480f      	ldr	r0, [pc, #60]	@ (80006d8 <main+0x58c>)
 800069a:	f000 ff41 	bl	8001520 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d11e      	bne.n	80006e2 <main+0x596>
					switch(control){
 80006a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <main+0x566>
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	d004      	beq.n	80006ba <main+0x56e>
 80006b0:	e007      	b.n	80006c2 <main+0x576>
					case 0:
						*ptr_key = 0X09;
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	2209      	movs	r2, #9
 80006b6:	701a      	strb	r2, [r3, #0]
						break;
 80006b8:	e003      	b.n	80006c2 <main+0x576>
					case 4:
						*ptr_key = 0x41;
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	2241      	movs	r2, #65	@ 0x41
 80006be:	701a      	strb	r2, [r3, #0]
						break;
 80006c0:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80006c2:	463b      	mov	r3, r7
 80006c4:	3307      	adds	r3, #7
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d007      	beq.n	80006dc <main+0x590>
					{
						ptr_key++;
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	3301      	adds	r3, #1
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	e006      	b.n	80006e2 <main+0x596>
 80006d4:	40010c00 	.word	0x40010c00
 80006d8:	40010800 	.word	0x40010800
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 80006dc:	463b      	mov	r3, r7
 80006de:	3302      	adds	r3, #2
 80006e0:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C5_GPIO_Port, C5_Pin))){
 80006e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006e6:	48a1      	ldr	r0, [pc, #644]	@ (800096c <main+0x820>)
 80006e8:	f000 ff1a 	bl	8001520 <HAL_GPIO_ReadPin>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d11a      	bne.n	8000728 <main+0x5dc>
					switch(control){
 80006f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <main+0x5b4>
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	d004      	beq.n	8000708 <main+0x5bc>
 80006fe:	e007      	b.n	8000710 <main+0x5c4>
					case 0:
						*ptr_key = 0X0A;
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	220a      	movs	r2, #10
 8000704:	701a      	strb	r2, [r3, #0]
						break;
 8000706:	e003      	b.n	8000710 <main+0x5c4>
					case 4:
						*ptr_key = 0x42;
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	2242      	movs	r2, #66	@ 0x42
 800070c:	701a      	strb	r2, [r3, #0]
						break;
 800070e:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000710:	463b      	mov	r3, r7
 8000712:	3307      	adds	r3, #7
 8000714:	68ba      	ldr	r2, [r7, #8]
 8000716:	429a      	cmp	r2, r3
 8000718:	d003      	beq.n	8000722 <main+0x5d6>
					{
						ptr_key++;
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	3301      	adds	r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	e002      	b.n	8000728 <main+0x5dc>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000722:	463b      	mov	r3, r7
 8000724:	3302      	adds	r3, #2
 8000726:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C6_GPIO_Port, C6_Pin))){
 8000728:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800072c:	488f      	ldr	r0, [pc, #572]	@ (800096c <main+0x820>)
 800072e:	f000 fef7 	bl	8001520 <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d122      	bne.n	800077e <main+0x632>
					switch(control){
 8000738:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800073c:	2b04      	cmp	r3, #4
 800073e:	d00e      	beq.n	800075e <main+0x612>
 8000740:	2b04      	cmp	r3, #4
 8000742:	dc10      	bgt.n	8000766 <main+0x61a>
 8000744:	2b00      	cmp	r3, #0
 8000746:	d002      	beq.n	800074e <main+0x602>
 8000748:	2b01      	cmp	r3, #1
 800074a:	d004      	beq.n	8000756 <main+0x60a>
 800074c:	e00b      	b.n	8000766 <main+0x61a>
						case 0:
							*ptr_key = 0X0B;
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	220b      	movs	r2, #11
 8000752:	701a      	strb	r2, [r3, #0]
							break;
 8000754:	e007      	b.n	8000766 <main+0x61a>
						case 1:
							*ptr_key = 0X2F;
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	222f      	movs	r2, #47	@ 0x2f
 800075a:	701a      	strb	r2, [r3, #0]
							break;
 800075c:	e003      	b.n	8000766 <main+0x61a>
						case 4:
							*ptr_key = 0X50;
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	2250      	movs	r2, #80	@ 0x50
 8000762:	701a      	strb	r2, [r3, #0]
							break;
 8000764:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000766:	463b      	mov	r3, r7
 8000768:	3307      	adds	r3, #7
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	429a      	cmp	r2, r3
 800076e:	d003      	beq.n	8000778 <main+0x62c>
					{
						ptr_key++;
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	3301      	adds	r3, #1
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	e002      	b.n	800077e <main+0x632>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000778:	463b      	mov	r3, r7
 800077a:	3302      	adds	r3, #2
 800077c:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C7_GPIO_Port, C7_Pin))){
 800077e:	2104      	movs	r1, #4
 8000780:	487b      	ldr	r0, [pc, #492]	@ (8000970 <main+0x824>)
 8000782:	f000 fecd 	bl	8001520 <HAL_GPIO_ReadPin>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d122      	bne.n	80007d2 <main+0x686>
					switch(control){
 800078c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000790:	2b04      	cmp	r3, #4
 8000792:	d00e      	beq.n	80007b2 <main+0x666>
 8000794:	2b04      	cmp	r3, #4
 8000796:	dc10      	bgt.n	80007ba <main+0x66e>
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <main+0x656>
 800079c:	2b01      	cmp	r3, #1
 800079e:	d004      	beq.n	80007aa <main+0x65e>
 80007a0:	e00b      	b.n	80007ba <main+0x66e>
						case 0:
							*ptr_key = 0X0D;
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	220d      	movs	r2, #13
 80007a6:	701a      	strb	r2, [r3, #0]
							break;
 80007a8:	e007      	b.n	80007ba <main+0x66e>
						case 1:
							*ptr_key = 0X30;
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	2230      	movs	r2, #48	@ 0x30
 80007ae:	701a      	strb	r2, [r3, #0]
							break;
 80007b0:	e003      	b.n	80007ba <main+0x66e>
						case 4:
							*ptr_key = 0X51;
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	2251      	movs	r2, #81	@ 0x51
 80007b6:	701a      	strb	r2, [r3, #0]
							break;
 80007b8:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80007ba:	463b      	mov	r3, r7
 80007bc:	3307      	adds	r3, #7
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d003      	beq.n	80007cc <main+0x680>
					{
						ptr_key++;
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	3301      	adds	r3, #1
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	e002      	b.n	80007d2 <main+0x686>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 80007cc:	463b      	mov	r3, r7
 80007ce:	3302      	adds	r3, #2
 80007d0:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C8_GPIO_Port, C8_Pin))){
 80007d2:	2102      	movs	r1, #2
 80007d4:	4865      	ldr	r0, [pc, #404]	@ (800096c <main+0x820>)
 80007d6:	f000 fea3 	bl	8001520 <HAL_GPIO_ReadPin>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d122      	bne.n	8000826 <main+0x6da>
					switch(control){
 80007e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d00e      	beq.n	8000806 <main+0x6ba>
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	dc10      	bgt.n	800080e <main+0x6c2>
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <main+0x6aa>
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d004      	beq.n	80007fe <main+0x6b2>
 80007f4:	e00b      	b.n	800080e <main+0x6c2>
						case 0:
							*ptr_key = 0X0E;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	220e      	movs	r2, #14
 80007fa:	701a      	strb	r2, [r3, #0]
							break;
 80007fc:	e007      	b.n	800080e <main+0x6c2>
						case 1:
							*ptr_key = 0X31;
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	2231      	movs	r2, #49	@ 0x31
 8000802:	701a      	strb	r2, [r3, #0]
							break;
 8000804:	e003      	b.n	800080e <main+0x6c2>
						case 4:
							*ptr_key = 0X52;
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	2252      	movs	r2, #82	@ 0x52
 800080a:	701a      	strb	r2, [r3, #0]
							break;
 800080c:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 800080e:	463b      	mov	r3, r7
 8000810:	3307      	adds	r3, #7
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	429a      	cmp	r2, r3
 8000816:	d003      	beq.n	8000820 <main+0x6d4>
					{
						ptr_key++;
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	3301      	adds	r3, #1
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	e002      	b.n	8000826 <main+0x6da>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000820:	463b      	mov	r3, r7
 8000822:	3302      	adds	r3, #2
 8000824:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C9_GPIO_Port, C9_Pin))){
 8000826:	2101      	movs	r1, #1
 8000828:	4850      	ldr	r0, [pc, #320]	@ (800096c <main+0x820>)
 800082a:	f000 fe79 	bl	8001520 <HAL_GPIO_ReadPin>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d122      	bne.n	800087a <main+0x72e>
					switch(control){
 8000834:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000838:	2b04      	cmp	r3, #4
 800083a:	d00e      	beq.n	800085a <main+0x70e>
 800083c:	2b04      	cmp	r3, #4
 800083e:	dc10      	bgt.n	8000862 <main+0x716>
 8000840:	2b00      	cmp	r3, #0
 8000842:	d002      	beq.n	800084a <main+0x6fe>
 8000844:	2b01      	cmp	r3, #1
 8000846:	d004      	beq.n	8000852 <main+0x706>
 8000848:	e00b      	b.n	8000862 <main+0x716>
						case 0:
							*ptr_key = 0X0F;
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	220f      	movs	r2, #15
 800084e:	701a      	strb	r2, [r3, #0]
							break;
 8000850:	e007      	b.n	8000862 <main+0x716>
						case 1:
							*ptr_key = 0X2D;
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	222d      	movs	r2, #45	@ 0x2d
 8000856:	701a      	strb	r2, [r3, #0]
							break;
 8000858:	e003      	b.n	8000862 <main+0x716>
						case 4:
							*ptr_key = 0X4F;
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	224f      	movs	r2, #79	@ 0x4f
 800085e:	701a      	strb	r2, [r3, #0]
							break;
 8000860:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000862:	463b      	mov	r3, r7
 8000864:	3307      	adds	r3, #7
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	429a      	cmp	r2, r3
 800086a:	d003      	beq.n	8000874 <main+0x728>
					{
						ptr_key++;
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	3301      	adds	r3, #1
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	e002      	b.n	800087a <main+0x72e>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000874:	463b      	mov	r3, r7
 8000876:	3302      	adds	r3, #2
 8000878:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C10_GPIO_Port, C10_Pin))){
 800087a:	2108      	movs	r1, #8
 800087c:	483c      	ldr	r0, [pc, #240]	@ (8000970 <main+0x824>)
 800087e:	f000 fe4f 	bl	8001520 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d11a      	bne.n	80008be <main+0x772>
					switch(control){
 8000888:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d002      	beq.n	8000896 <main+0x74a>
 8000890:	2b01      	cmp	r3, #1
 8000892:	d004      	beq.n	800089e <main+0x752>
 8000894:	e007      	b.n	80008a6 <main+0x75a>
						case 0:
							*ptr_key = 0X33;
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	2233      	movs	r2, #51	@ 0x33
 800089a:	701a      	strb	r2, [r3, #0]
							break;
 800089c:	e003      	b.n	80008a6 <main+0x75a>
						case 1:
							*ptr_key = 0X2E;
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	222e      	movs	r2, #46	@ 0x2e
 80008a2:	701a      	strb	r2, [r3, #0]
							break;
 80008a4:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80008a6:	463b      	mov	r3, r7
 80008a8:	3307      	adds	r3, #7
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d003      	beq.n	80008b8 <main+0x76c>
					{
						ptr_key++;
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	3301      	adds	r3, #1
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	e002      	b.n	80008be <main+0x772>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 80008b8:	463b      	mov	r3, r7
 80008ba:	3302      	adds	r3, #2
 80008bc:	60bb      	str	r3, [r7, #8]
					}
				}

    	  	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008c4:	482a      	ldr	r0, [pc, #168]	@ (8000970 <main+0x824>)
 80008c6:	f000 fe42 	bl	800154e <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008d0:	4827      	ldr	r0, [pc, #156]	@ (8000970 <main+0x824>)
 80008d2:	f000 fe3c 	bl	800154e <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2180      	movs	r1, #128	@ 0x80
 80008da:	4825      	ldr	r0, [pc, #148]	@ (8000970 <main+0x824>)
 80008dc:	f000 fe37 	bl	800154e <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	2140      	movs	r1, #64	@ 0x40
 80008e4:	4822      	ldr	r0, [pc, #136]	@ (8000970 <main+0x824>)
 80008e6:	f000 fe32 	bl	800154e <HAL_GPIO_WritePin>

			    if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 80008ea:	2120      	movs	r1, #32
 80008ec:	4820      	ldr	r0, [pc, #128]	@ (8000970 <main+0x824>)
 80008ee:	f000 fe17 	bl	8001520 <HAL_GPIO_ReadPin>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d11a      	bne.n	800092e <main+0x7e2>
					switch(control){
 80008f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d002      	beq.n	8000906 <main+0x7ba>
 8000900:	2b04      	cmp	r3, #4
 8000902:	d004      	beq.n	800090e <main+0x7c2>
 8000904:	e007      	b.n	8000916 <main+0x7ca>
					case 0:
						*ptr_key = 0X1D;
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	221d      	movs	r2, #29
 800090a:	701a      	strb	r2, [r3, #0]
						break;
 800090c:	e003      	b.n	8000916 <main+0x7ca>
					case 4:
						*ptr_key = 0x43;
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2243      	movs	r2, #67	@ 0x43
 8000912:	701a      	strb	r2, [r3, #0]
						break;
 8000914:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000916:	463b      	mov	r3, r7
 8000918:	3307      	adds	r3, #7
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	429a      	cmp	r2, r3
 800091e:	d003      	beq.n	8000928 <main+0x7dc>
					{
						ptr_key++;
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	3301      	adds	r3, #1
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	e002      	b.n	800092e <main+0x7e2>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000928:	463b      	mov	r3, r7
 800092a:	3302      	adds	r3, #2
 800092c:	60bb      	str	r3, [r7, #8]
					}
				}
				if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 800092e:	2110      	movs	r1, #16
 8000930:	480f      	ldr	r0, [pc, #60]	@ (8000970 <main+0x824>)
 8000932:	f000 fdf5 	bl	8001520 <HAL_GPIO_ReadPin>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d11e      	bne.n	800097a <main+0x82e>
					switch(control){
 800093c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <main+0x7fe>
 8000944:	2b04      	cmp	r3, #4
 8000946:	d004      	beq.n	8000952 <main+0x806>
 8000948:	e007      	b.n	800095a <main+0x80e>
					case 0:
						*ptr_key = 0X1B;
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	221b      	movs	r2, #27
 800094e:	701a      	strb	r2, [r3, #0]
						break;
 8000950:	e003      	b.n	800095a <main+0x80e>
					case 4:
						*ptr_key = 0x44;
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	2244      	movs	r2, #68	@ 0x44
 8000956:	701a      	strb	r2, [r3, #0]
						break;
 8000958:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 800095a:	463b      	mov	r3, r7
 800095c:	3307      	adds	r3, #7
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	429a      	cmp	r2, r3
 8000962:	d007      	beq.n	8000974 <main+0x828>
					{
						ptr_key++;
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	3301      	adds	r3, #1
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	e006      	b.n	800097a <main+0x82e>
 800096c:	40010c00 	.word	0x40010c00
 8000970:	40010800 	.word	0x40010800
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000974:	463b      	mov	r3, r7
 8000976:	3302      	adds	r3, #2
 8000978:	60bb      	str	r3, [r7, #8]
					}
				}
				if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 800097a:	2102      	movs	r1, #2
 800097c:	489f      	ldr	r0, [pc, #636]	@ (8000bfc <main+0xab0>)
 800097e:	f000 fdcf 	bl	8001520 <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d11a      	bne.n	80009be <main+0x872>
					switch(control){
 8000988:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d002      	beq.n	8000996 <main+0x84a>
 8000990:	2b04      	cmp	r3, #4
 8000992:	d004      	beq.n	800099e <main+0x852>
 8000994:	e007      	b.n	80009a6 <main+0x85a>
					case 0:
						*ptr_key = 0X06;
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	2206      	movs	r2, #6
 800099a:	701a      	strb	r2, [r3, #0]
						break;
 800099c:	e003      	b.n	80009a6 <main+0x85a>
					case 4:
						*ptr_key = 0x45;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	2245      	movs	r2, #69	@ 0x45
 80009a2:	701a      	strb	r2, [r3, #0]
						break;
 80009a4:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80009a6:	463b      	mov	r3, r7
 80009a8:	3307      	adds	r3, #7
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d003      	beq.n	80009b8 <main+0x86c>
					{
						ptr_key++;
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	3301      	adds	r3, #1
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	e002      	b.n	80009be <main+0x872>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 80009b8:	463b      	mov	r3, r7
 80009ba:	3302      	adds	r3, #2
 80009bc:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 80009be:	2101      	movs	r1, #1
 80009c0:	488e      	ldr	r0, [pc, #568]	@ (8000bfc <main+0xab0>)
 80009c2:	f000 fdad 	bl	8001520 <HAL_GPIO_ReadPin>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d10e      	bne.n	80009ea <main+0x89e>
					*ptr_key = 0X19;
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	2219      	movs	r2, #25
 80009d0:	701a      	strb	r2, [r3, #0]
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80009d2:	463b      	mov	r3, r7
 80009d4:	3307      	adds	r3, #7
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d003      	beq.n	80009e4 <main+0x898>
					{
						ptr_key++;
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	3301      	adds	r3, #1
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	e002      	b.n	80009ea <main+0x89e>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 80009e4:	463b      	mov	r3, r7
 80009e6:	3302      	adds	r3, #2
 80009e8:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C5_GPIO_Port, C5_Pin))){
 80009ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009ee:	4884      	ldr	r0, [pc, #528]	@ (8000c00 <main+0xab4>)
 80009f0:	f000 fd96 	bl	8001520 <HAL_GPIO_ReadPin>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d10e      	bne.n	8000a18 <main+0x8cc>
					*ptr_key = 0X05;
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	2205      	movs	r2, #5
 80009fe:	701a      	strb	r2, [r3, #0]
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000a00:	463b      	mov	r3, r7
 8000a02:	3307      	adds	r3, #7
 8000a04:	68ba      	ldr	r2, [r7, #8]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d003      	beq.n	8000a12 <main+0x8c6>
					{
						ptr_key++;
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	e002      	b.n	8000a18 <main+0x8cc>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000a12:	463b      	mov	r3, r7
 8000a14:	3302      	adds	r3, #2
 8000a16:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C6_GPIO_Port, C6_Pin))){
 8000a18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a1c:	4878      	ldr	r0, [pc, #480]	@ (8000c00 <main+0xab4>)
 8000a1e:	f000 fd7f 	bl	8001520 <HAL_GPIO_ReadPin>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d10e      	bne.n	8000a46 <main+0x8fa>
					*ptr_key = 0X28;
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	2228      	movs	r2, #40	@ 0x28
 8000a2c:	701a      	strb	r2, [r3, #0]
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000a2e:	463b      	mov	r3, r7
 8000a30:	3307      	adds	r3, #7
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d003      	beq.n	8000a40 <main+0x8f4>
					{
						ptr_key++;
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	e002      	b.n	8000a46 <main+0x8fa>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000a40:	463b      	mov	r3, r7
 8000a42:	3302      	adds	r3, #2
 8000a44:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C7_GPIO_Port, C7_Pin))){
 8000a46:	2104      	movs	r1, #4
 8000a48:	486c      	ldr	r0, [pc, #432]	@ (8000bfc <main+0xab0>)
 8000a4a:	f000 fd69 	bl	8001520 <HAL_GPIO_ReadPin>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d11a      	bne.n	8000a8a <main+0x93e>
					switch(control){
 8000a54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d002      	beq.n	8000a62 <main+0x916>
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d004      	beq.n	8000a6a <main+0x91e>
 8000a60:	e007      	b.n	8000a72 <main+0x926>
						case 0:
							*ptr_key = 0x11;
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	2211      	movs	r2, #17
 8000a66:	701a      	strb	r2, [r3, #0]
							break;
 8000a68:	e003      	b.n	8000a72 <main+0x926>
						case 1:
							*ptr_key = 0x65;
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	2265      	movs	r2, #101	@ 0x65
 8000a6e:	701a      	strb	r2, [r3, #0]
							break;
 8000a70:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000a72:	463b      	mov	r3, r7
 8000a74:	3307      	adds	r3, #7
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d003      	beq.n	8000a84 <main+0x938>
					{
						ptr_key++;
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	e002      	b.n	8000a8a <main+0x93e>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000a84:	463b      	mov	r3, r7
 8000a86:	3302      	adds	r3, #2
 8000a88:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C8_GPIO_Port, C8_Pin))){
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	485c      	ldr	r0, [pc, #368]	@ (8000c00 <main+0xab4>)
 8000a8e:	f000 fd47 	bl	8001520 <HAL_GPIO_ReadPin>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d11a      	bne.n	8000ace <main+0x982>
					switch(control){
 8000a98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d002      	beq.n	8000aa6 <main+0x95a>
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d004      	beq.n	8000aae <main+0x962>
 8000aa4:	e007      	b.n	8000ab6 <main+0x96a>
						case 0:
							*ptr_key = 0X10;
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	2210      	movs	r2, #16
 8000aaa:	701a      	strb	r2, [r3, #0]
							break;
 8000aac:	e003      	b.n	8000ab6 <main+0x96a>
						case 1:
							*ptr_key = 0X35;
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	2235      	movs	r2, #53	@ 0x35
 8000ab2:	701a      	strb	r2, [r3, #0]
							break;
 8000ab4:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	3307      	adds	r3, #7
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d003      	beq.n	8000ac8 <main+0x97c>
					{
						ptr_key++;
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	e002      	b.n	8000ace <main+0x982>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000ac8:	463b      	mov	r3, r7
 8000aca:	3302      	adds	r3, #2
 8000acc:	60bb      	str	r3, [r7, #8]
					}
				}

				if (!(HAL_GPIO_ReadPin(C9_GPIO_Port, C9_Pin))){
 8000ace:	2101      	movs	r1, #1
 8000ad0:	484b      	ldr	r0, [pc, #300]	@ (8000c00 <main+0xab4>)
 8000ad2:	f000 fd25 	bl	8001520 <HAL_GPIO_ReadPin>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d11a      	bne.n	8000b12 <main+0x9c6>
					switch(control){
 8000adc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <main+0x99e>
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d004      	beq.n	8000af2 <main+0x9a6>
 8000ae8:	e007      	b.n	8000afa <main+0x9ae>
						case 0:
							*ptr_key = 0X36;
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	2236      	movs	r2, #54	@ 0x36
 8000aee:	701a      	strb	r2, [r3, #0]
							break;
 8000af0:	e003      	b.n	8000afa <main+0x9ae>
						case 1:
							*ptr_key = 0X34;
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	2234      	movs	r2, #52	@ 0x34
 8000af6:	701a      	strb	r2, [r3, #0]
							break;
 8000af8:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000afa:	463b      	mov	r3, r7
 8000afc:	3307      	adds	r3, #7
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d003      	beq.n	8000b0c <main+0x9c0>
					{
						ptr_key++;
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	3301      	adds	r3, #1
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	e002      	b.n	8000b12 <main+0x9c6>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	3302      	adds	r3, #2
 8000b10:	60bb      	str	r3, [r7, #8]
					}
				}

				if (!(HAL_GPIO_ReadPin(C10_GPIO_Port, C10_Pin))){
 8000b12:	2108      	movs	r1, #8
 8000b14:	4839      	ldr	r0, [pc, #228]	@ (8000bfc <main+0xab0>)
 8000b16:	f000 fd03 	bl	8001520 <HAL_GPIO_ReadPin>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d11a      	bne.n	8000b56 <main+0xa0a>
					switch(control){
 8000b20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d002      	beq.n	8000b2e <main+0x9e2>
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d004      	beq.n	8000b36 <main+0x9ea>
 8000b2c:	e007      	b.n	8000b3e <main+0x9f2>
						case 0:
							*ptr_key = 0X37;
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	2237      	movs	r2, #55	@ 0x37
 8000b32:	701a      	strb	r2, [r3, #0]
							break;
 8000b34:	e003      	b.n	8000b3e <main+0x9f2>
						case 1:
							*ptr_key = 0X2B;
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	222b      	movs	r2, #43	@ 0x2b
 8000b3a:	701a      	strb	r2, [r3, #0]
							break;
 8000b3c:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000b3e:	463b      	mov	r3, r7
 8000b40:	3307      	adds	r3, #7
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d003      	beq.n	8000b50 <main+0xa04>
					{
						ptr_key++;
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	e002      	b.n	8000b56 <main+0xa0a>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000b50:	463b      	mov	r3, r7
 8000b52:	3302      	adds	r3, #2
 8000b54:	60bb      	str	r3, [r7, #8]
					}
				}

    	  	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b5c:	4827      	ldr	r0, [pc, #156]	@ (8000bfc <main+0xab0>)
 8000b5e:	f000 fcf6 	bl	800154e <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b68:	4824      	ldr	r0, [pc, #144]	@ (8000bfc <main+0xab0>)
 8000b6a:	f000 fcf0 	bl	800154e <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2180      	movs	r1, #128	@ 0x80
 8000b72:	4822      	ldr	r0, [pc, #136]	@ (8000bfc <main+0xab0>)
 8000b74:	f000 fceb 	bl	800154e <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2140      	movs	r1, #64	@ 0x40
 8000b7c:	481f      	ldr	r0, [pc, #124]	@ (8000bfc <main+0xab0>)
 8000b7e:	f000 fce6 	bl	800154e <HAL_GPIO_WritePin>


				if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000b82:	2101      	movs	r1, #1
 8000b84:	481d      	ldr	r0, [pc, #116]	@ (8000bfc <main+0xab0>)
 8000b86:	f000 fccb 	bl	8001520 <HAL_GPIO_ReadPin>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d10e      	bne.n	8000bae <main+0xa62>
					*ptr_key = 0X2C;
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	222c      	movs	r2, #44	@ 0x2c
 8000b94:	701a      	strb	r2, [r3, #0]
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000b96:	463b      	mov	r3, r7
 8000b98:	3307      	adds	r3, #7
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d003      	beq.n	8000ba8 <main+0xa5c>
					{
						ptr_key++;
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	e002      	b.n	8000bae <main+0xa62>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000ba8:	463b      	mov	r3, r7
 8000baa:	3302      	adds	r3, #2
 8000bac:	60bb      	str	r3, [r7, #8]
					}
				}

				if (!(HAL_GPIO_ReadPin(C10_GPIO_Port, C10_Pin))){
 8000bae:	2108      	movs	r1, #8
 8000bb0:	4812      	ldr	r0, [pc, #72]	@ (8000bfc <main+0xab0>)
 8000bb2:	f000 fcb5 	bl	8001520 <HAL_GPIO_ReadPin>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d126      	bne.n	8000c0a <main+0xabe>
					switch(control){
 8000bbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d00e      	beq.n	8000be2 <main+0xa96>
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	dc10      	bgt.n	8000bea <main+0xa9e>
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <main+0xa86>
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d004      	beq.n	8000bda <main+0xa8e>
 8000bd0:	e00b      	b.n	8000bea <main+0xa9e>
						case 0:
							*ptr_key = 0X38;
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	2238      	movs	r2, #56	@ 0x38
 8000bd6:	701a      	strb	r2, [r3, #0]
							break;
 8000bd8:	e007      	b.n	8000bea <main+0xa9e>
						case 1:
							*ptr_key = 0X2A;
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	222a      	movs	r2, #42	@ 0x2a
 8000bde:	701a      	strb	r2, [r3, #0]
							break;
 8000be0:	e003      	b.n	8000bea <main+0xa9e>
						case 4:
							*ptr_key = 0x4c;
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	224c      	movs	r2, #76	@ 0x4c
 8000be6:	701a      	strb	r2, [r3, #0]
							break;
 8000be8:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000bea:	463b      	mov	r3, r7
 8000bec:	3307      	adds	r3, #7
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d007      	beq.n	8000c04 <main+0xab8>
					{
						ptr_key++;
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	e006      	b.n	8000c0a <main+0xabe>
 8000bfc:	40010800 	.word	0x40010800
 8000c00:	40010c00 	.word	0x40010c00
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000c04:	463b      	mov	r3, r7
 8000c06:	3302      	adds	r3, #2
 8000c08:	60bb      	str	r3, [r7, #8]
					}
				}

		USBD_HID_SendReport(&hUsbDeviceFS,&HIDKeyboard,sizeof(HIDKeyboard));
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	2208      	movs	r2, #8
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <main+0xaec>)
 8000c12:	f005 fb81 	bl	8006318 <USBD_HID_SendReport>
		HAL_Delay(25);
 8000c16:	2019      	movs	r0, #25
 8000c18:	f000 f9cc 	bl	8000fb4 <HAL_Delay>
		HIDKeyboard.KEYCODE01 = 0x00;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	70bb      	strb	r3, [r7, #2]
		HIDKeyboard.KEYCODE02 = 0x00;
 8000c20:	2300      	movs	r3, #0
 8000c22:	70fb      	strb	r3, [r7, #3]
		HIDKeyboard.KEYCODE03 = 0x00;
 8000c24:	2300      	movs	r3, #0
 8000c26:	713b      	strb	r3, [r7, #4]
		HIDKeyboard.KEYCODE04 = 0x00;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	717b      	strb	r3, [r7, #5]
		HIDKeyboard.KEYCODE05 = 0x00;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	71bb      	strb	r3, [r7, #6]
		HIDKeyboard.KEYCODE06 = 0x00;
 8000c30:	2300      	movs	r3, #0
 8000c32:	71fb      	strb	r3, [r7, #7]
      {
 8000c34:	f7ff ba9b 	b.w	800016e <main+0x22>
 8000c38:	2000017c 	.word	0x2000017c

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b094      	sub	sp, #80	@ 0x50
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c46:	2228      	movs	r2, #40	@ 0x28
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f007 f80a 	bl	8007c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c88:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 f9ca 	bl	800302c <HAL_RCC_OscConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c9e:	f000 f88d 	bl	8000dbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cb2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f002 fc36 	bl	8003530 <HAL_RCC_ClockConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cca:	f000 f877 	bl	8000dbc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000cce:	2310      	movs	r3, #16
 8000cd0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f002 fd85 	bl	80037e8 <HAL_RCCEx_PeriphCLKConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000ce4:	f000 f86a 	bl	8000dbc <Error_Handler>
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3750      	adds	r7, #80	@ 0x50
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d04:	4b2a      	ldr	r3, [pc, #168]	@ (8000db0 <MX_GPIO_Init+0xc0>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a29      	ldr	r2, [pc, #164]	@ (8000db0 <MX_GPIO_Init+0xc0>)
 8000d0a:	f043 0320 	orr.w	r3, r3, #32
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b27      	ldr	r3, [pc, #156]	@ (8000db0 <MX_GPIO_Init+0xc0>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0320 	and.w	r3, r3, #32
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1c:	4b24      	ldr	r3, [pc, #144]	@ (8000db0 <MX_GPIO_Init+0xc0>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a23      	ldr	r2, [pc, #140]	@ (8000db0 <MX_GPIO_Init+0xc0>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b21      	ldr	r3, [pc, #132]	@ (8000db0 <MX_GPIO_Init+0xc0>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d34:	4b1e      	ldr	r3, [pc, #120]	@ (8000db0 <MX_GPIO_Init+0xc0>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a1d      	ldr	r2, [pc, #116]	@ (8000db0 <MX_GPIO_Init+0xc0>)
 8000d3a:	f043 0308 	orr.w	r3, r3, #8
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <MX_GPIO_Init+0xc0>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0308 	and.w	r3, r3, #8
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R4_Pin|R3_Pin|R2_Pin|R1_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000d52:	4818      	ldr	r0, [pc, #96]	@ (8000db4 <MX_GPIO_Init+0xc4>)
 8000d54:	f000 fbfb 	bl	800154e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C4_Pin C3_Pin C7_Pin C10_Pin
                           C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin|C7_Pin|C10_Pin
 8000d58:	233f      	movs	r3, #63	@ 0x3f
 8000d5a:	613b      	str	r3, [r7, #16]
                          |C2_Pin|C1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4812      	ldr	r0, [pc, #72]	@ (8000db4 <MX_GPIO_Init+0xc4>)
 8000d6c:	f000 fa54 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_Pin R3_Pin R2_Pin R1_Pin */
  GPIO_InitStruct.Pin = R4_Pin|R3_Pin|R2_Pin|R1_Pin;
 8000d70:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	4619      	mov	r1, r3
 8000d88:	480a      	ldr	r0, [pc, #40]	@ (8000db4 <MX_GPIO_Init+0xc4>)
 8000d8a:	f000 fa45 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : C9_Pin C8_Pin C6_Pin C5_Pin */
  GPIO_InitStruct.Pin = C9_Pin|C8_Pin|C6_Pin|C5_Pin;
 8000d8e:	f640 4303 	movw	r3, #3075	@ 0xc03
 8000d92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4619      	mov	r1, r3
 8000da2:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <MX_GPIO_Init+0xc8>)
 8000da4:	f000 fa38 	bl	8001218 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da8:	bf00      	nop
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010800 	.word	0x40010800
 8000db8:	40010c00 	.word	0x40010c00

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <Error_Handler+0x8>

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <HAL_MspInit+0x5c>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	4a14      	ldr	r2, [pc, #80]	@ (8000e24 <HAL_MspInit+0x5c>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6193      	str	r3, [r2, #24]
 8000dda:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <HAL_MspInit+0x5c>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <HAL_MspInit+0x5c>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	4a0e      	ldr	r2, [pc, #56]	@ (8000e24 <HAL_MspInit+0x5c>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df0:	61d3      	str	r3, [r2, #28]
 8000df2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <HAL_MspInit+0x5c>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000e28 <HAL_MspInit+0x60>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <HAL_MspInit+0x60>)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010000 	.word	0x40010000

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <NMI_Handler+0x4>

08000e34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <MemManage_Handler+0x4>

08000e44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7c:	f000 f87e 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000e8a:	f000 fc9d 	bl	80017c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000640 	.word	0x20000640

08000e98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ea4:	f7ff fff8 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea8:	480b      	ldr	r0, [pc, #44]	@ (8000ed8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eaa:	490c      	ldr	r1, [pc, #48]	@ (8000edc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000eac:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ebe:	4a09      	ldr	r2, [pc, #36]	@ (8000ee4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ec0:	4c09      	ldr	r4, [pc, #36]	@ (8000ee8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ece:	f006 fed1 	bl	8007c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ed2:	f7ff f93b 	bl	800014c <main>
  bx lr
 8000ed6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000ee0:	08007d38 	.word	0x08007d38
  ldr r2, =_sbss
 8000ee4:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000ee8:	20000944 	.word	0x20000944

08000eec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC1_2_IRQHandler>
	...

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <HAL_Init+0x28>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	@ (8000f18 <HAL_Init+0x28>)
 8000efa:	f043 0310 	orr.w	r3, r3, #16
 8000efe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f00:	2003      	movs	r0, #3
 8000f02:	f000 f947 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f06:	200f      	movs	r0, #15
 8000f08:	f000 f808 	bl	8000f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f0c:	f7ff ff5c 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40022000 	.word	0x40022000

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <HAL_InitTick+0x54>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <HAL_InitTick+0x58>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f95f 	bl	80011fe <HAL_SYSTICK_Config>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00e      	b.n	8000f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d80a      	bhi.n	8000f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f58:	f000 f927 	bl	80011aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f5c:	4a06      	ldr	r2, [pc, #24]	@ (8000f78 <HAL_InitTick+0x5c>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e000      	b.n	8000f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000004 	.word	0x20000004

08000f7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <HAL_IncTick+0x1c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <HAL_IncTick+0x20>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a03      	ldr	r2, [pc, #12]	@ (8000f9c <HAL_IncTick+0x20>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000174 	.word	0x20000174

08000fa0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b02      	ldr	r3, [pc, #8]	@ (8000fb0 <HAL_GetTick+0x10>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	20000174 	.word	0x20000174

08000fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fbc:	f7ff fff0 	bl	8000fa0 <HAL_GetTick>
 8000fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fcc:	d005      	beq.n	8000fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <HAL_Delay+0x44>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fda:	bf00      	nop
 8000fdc:	f7ff ffe0 	bl	8000fa0 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8f7      	bhi.n	8000fdc <HAL_Delay+0x28>
  {
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000008 	.word	0x20000008

08000ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800100c:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001018:	4013      	ands	r3, r2
 800101a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001024:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800102c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102e:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	60d3      	str	r3, [r2, #12]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001048:	4b04      	ldr	r3, [pc, #16]	@ (800105c <__NVIC_GetPriorityGrouping+0x18>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	f003 0307 	and.w	r3, r3, #7
}
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	2b00      	cmp	r3, #0
 8001070:	db0b      	blt.n	800108a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f003 021f 	and.w	r2, r3, #31
 8001078:	4906      	ldr	r1, [pc, #24]	@ (8001094 <__NVIC_EnableIRQ+0x34>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	095b      	lsrs	r3, r3, #5
 8001080:	2001      	movs	r0, #1
 8001082:	fa00 f202 	lsl.w	r2, r0, r2
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100

08001098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db0a      	blt.n	80010c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	490c      	ldr	r1, [pc, #48]	@ (80010e4 <__NVIC_SetPriority+0x4c>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	440b      	add	r3, r1
 80010bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c0:	e00a      	b.n	80010d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4908      	ldr	r1, [pc, #32]	@ (80010e8 <__NVIC_SetPriority+0x50>)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	3b04      	subs	r3, #4
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	761a      	strb	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	@ 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f1c3 0307 	rsb	r3, r3, #7
 8001106:	2b04      	cmp	r3, #4
 8001108:	bf28      	it	cs
 800110a:	2304      	movcs	r3, #4
 800110c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3304      	adds	r3, #4
 8001112:	2b06      	cmp	r3, #6
 8001114:	d902      	bls.n	800111c <NVIC_EncodePriority+0x30>
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3b03      	subs	r3, #3
 800111a:	e000      	b.n	800111e <NVIC_EncodePriority+0x32>
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001134:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	43d9      	mvns	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	4313      	orrs	r3, r2
         );
}
 8001146:	4618      	mov	r0, r3
 8001148:	3724      	adds	r7, #36	@ 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001160:	d301      	bcc.n	8001166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <SysTick_Config+0x40>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116e:	210f      	movs	r1, #15
 8001170:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001174:	f7ff ff90 	bl	8001098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <SysTick_Config+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <SysTick_Config+0x40>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff2d 	bl	8000ffc <__NVIC_SetPriorityGrouping>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011bc:	f7ff ff42 	bl	8001044 <__NVIC_GetPriorityGrouping>
 80011c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	6978      	ldr	r0, [r7, #20]
 80011c8:	f7ff ff90 	bl	80010ec <NVIC_EncodePriority>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff5f 	bl	8001098 <__NVIC_SetPriority>
}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff35 	bl	8001060 <__NVIC_EnableIRQ>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffa2 	bl	8001150 <SysTick_Config>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b08b      	sub	sp, #44	@ 0x2c
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	e169      	b.n	8001500 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800122c:	2201      	movs	r2, #1
 800122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	429a      	cmp	r2, r3
 8001246:	f040 8158 	bne.w	80014fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4a9a      	ldr	r2, [pc, #616]	@ (80014b8 <HAL_GPIO_Init+0x2a0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d05e      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001254:	4a98      	ldr	r2, [pc, #608]	@ (80014b8 <HAL_GPIO_Init+0x2a0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d875      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800125a:	4a98      	ldr	r2, [pc, #608]	@ (80014bc <HAL_GPIO_Init+0x2a4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d058      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001260:	4a96      	ldr	r2, [pc, #600]	@ (80014bc <HAL_GPIO_Init+0x2a4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d86f      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001266:	4a96      	ldr	r2, [pc, #600]	@ (80014c0 <HAL_GPIO_Init+0x2a8>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d052      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 800126c:	4a94      	ldr	r2, [pc, #592]	@ (80014c0 <HAL_GPIO_Init+0x2a8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d869      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001272:	4a94      	ldr	r2, [pc, #592]	@ (80014c4 <HAL_GPIO_Init+0x2ac>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d04c      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001278:	4a92      	ldr	r2, [pc, #584]	@ (80014c4 <HAL_GPIO_Init+0x2ac>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d863      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800127e:	4a92      	ldr	r2, [pc, #584]	@ (80014c8 <HAL_GPIO_Init+0x2b0>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d046      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001284:	4a90      	ldr	r2, [pc, #576]	@ (80014c8 <HAL_GPIO_Init+0x2b0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d85d      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800128a:	2b12      	cmp	r3, #18
 800128c:	d82a      	bhi.n	80012e4 <HAL_GPIO_Init+0xcc>
 800128e:	2b12      	cmp	r3, #18
 8001290:	d859      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001292:	a201      	add	r2, pc, #4	@ (adr r2, 8001298 <HAL_GPIO_Init+0x80>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	08001313 	.word	0x08001313
 800129c:	080012ed 	.word	0x080012ed
 80012a0:	080012ff 	.word	0x080012ff
 80012a4:	08001341 	.word	0x08001341
 80012a8:	08001347 	.word	0x08001347
 80012ac:	08001347 	.word	0x08001347
 80012b0:	08001347 	.word	0x08001347
 80012b4:	08001347 	.word	0x08001347
 80012b8:	08001347 	.word	0x08001347
 80012bc:	08001347 	.word	0x08001347
 80012c0:	08001347 	.word	0x08001347
 80012c4:	08001347 	.word	0x08001347
 80012c8:	08001347 	.word	0x08001347
 80012cc:	08001347 	.word	0x08001347
 80012d0:	08001347 	.word	0x08001347
 80012d4:	08001347 	.word	0x08001347
 80012d8:	08001347 	.word	0x08001347
 80012dc:	080012f5 	.word	0x080012f5
 80012e0:	08001309 	.word	0x08001309
 80012e4:	4a79      	ldr	r2, [pc, #484]	@ (80014cc <HAL_GPIO_Init+0x2b4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ea:	e02c      	b.n	8001346 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	623b      	str	r3, [r7, #32]
          break;
 80012f2:	e029      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	3304      	adds	r3, #4
 80012fa:	623b      	str	r3, [r7, #32]
          break;
 80012fc:	e024      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	3308      	adds	r3, #8
 8001304:	623b      	str	r3, [r7, #32]
          break;
 8001306:	e01f      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	330c      	adds	r3, #12
 800130e:	623b      	str	r3, [r7, #32]
          break;
 8001310:	e01a      	b.n	8001348 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800131a:	2304      	movs	r3, #4
 800131c:	623b      	str	r3, [r7, #32]
          break;
 800131e:	e013      	b.n	8001348 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d105      	bne.n	8001334 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001328:	2308      	movs	r3, #8
 800132a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	611a      	str	r2, [r3, #16]
          break;
 8001332:	e009      	b.n	8001348 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001334:	2308      	movs	r3, #8
 8001336:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	615a      	str	r2, [r3, #20]
          break;
 800133e:	e003      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
          break;
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x130>
          break;
 8001346:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2bff      	cmp	r3, #255	@ 0xff
 800134c:	d801      	bhi.n	8001352 <HAL_GPIO_Init+0x13a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	e001      	b.n	8001356 <HAL_GPIO_Init+0x13e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3304      	adds	r3, #4
 8001356:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2bff      	cmp	r3, #255	@ 0xff
 800135c:	d802      	bhi.n	8001364 <HAL_GPIO_Init+0x14c>
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	e002      	b.n	800136a <HAL_GPIO_Init+0x152>
 8001364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001366:	3b08      	subs	r3, #8
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	210f      	movs	r1, #15
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	401a      	ands	r2, r3
 800137c:	6a39      	ldr	r1, [r7, #32]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	431a      	orrs	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 80b1 	beq.w	80014fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001398:	4b4d      	ldr	r3, [pc, #308]	@ (80014d0 <HAL_GPIO_Init+0x2b8>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a4c      	ldr	r2, [pc, #304]	@ (80014d0 <HAL_GPIO_Init+0x2b8>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b4a      	ldr	r3, [pc, #296]	@ (80014d0 <HAL_GPIO_Init+0x2b8>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b0:	4a48      	ldr	r2, [pc, #288]	@ (80014d4 <HAL_GPIO_Init+0x2bc>)
 80013b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	220f      	movs	r2, #15
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a40      	ldr	r2, [pc, #256]	@ (80014d8 <HAL_GPIO_Init+0x2c0>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d013      	beq.n	8001404 <HAL_GPIO_Init+0x1ec>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a3f      	ldr	r2, [pc, #252]	@ (80014dc <HAL_GPIO_Init+0x2c4>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d00d      	beq.n	8001400 <HAL_GPIO_Init+0x1e8>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a3e      	ldr	r2, [pc, #248]	@ (80014e0 <HAL_GPIO_Init+0x2c8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d007      	beq.n	80013fc <HAL_GPIO_Init+0x1e4>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a3d      	ldr	r2, [pc, #244]	@ (80014e4 <HAL_GPIO_Init+0x2cc>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d101      	bne.n	80013f8 <HAL_GPIO_Init+0x1e0>
 80013f4:	2303      	movs	r3, #3
 80013f6:	e006      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 80013f8:	2304      	movs	r3, #4
 80013fa:	e004      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e002      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 8001404:	2300      	movs	r3, #0
 8001406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001408:	f002 0203 	and.w	r2, r2, #3
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	4093      	lsls	r3, r2
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001416:	492f      	ldr	r1, [pc, #188]	@ (80014d4 <HAL_GPIO_Init+0x2bc>)
 8001418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3302      	adds	r3, #2
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d006      	beq.n	800143e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001430:	4b2d      	ldr	r3, [pc, #180]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	492c      	ldr	r1, [pc, #176]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	608b      	str	r3, [r1, #8]
 800143c:	e006      	b.n	800144c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800143e:	4b2a      	ldr	r3, [pc, #168]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	43db      	mvns	r3, r3
 8001446:	4928      	ldr	r1, [pc, #160]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001448:	4013      	ands	r3, r2
 800144a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d006      	beq.n	8001466 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001458:	4b23      	ldr	r3, [pc, #140]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	4922      	ldr	r1, [pc, #136]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	60cb      	str	r3, [r1, #12]
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001466:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	43db      	mvns	r3, r3
 800146e:	491e      	ldr	r1, [pc, #120]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001470:	4013      	ands	r3, r2
 8001472:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d006      	beq.n	800148e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001480:	4b19      	ldr	r3, [pc, #100]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4918      	ldr	r1, [pc, #96]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]
 800148c:	e006      	b.n	800149c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800148e:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	43db      	mvns	r3, r3
 8001496:	4914      	ldr	r1, [pc, #80]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001498:	4013      	ands	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d021      	beq.n	80014ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014a8:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	490e      	ldr	r1, [pc, #56]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
 80014b4:	e021      	b.n	80014fa <HAL_GPIO_Init+0x2e2>
 80014b6:	bf00      	nop
 80014b8:	10320000 	.word	0x10320000
 80014bc:	10310000 	.word	0x10310000
 80014c0:	10220000 	.word	0x10220000
 80014c4:	10210000 	.word	0x10210000
 80014c8:	10120000 	.word	0x10120000
 80014cc:	10110000 	.word	0x10110000
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010000 	.word	0x40010000
 80014d8:	40010800 	.word	0x40010800
 80014dc:	40010c00 	.word	0x40010c00
 80014e0:	40011000 	.word	0x40011000
 80014e4:	40011400 	.word	0x40011400
 80014e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014ec:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <HAL_GPIO_Init+0x304>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	4909      	ldr	r1, [pc, #36]	@ (800151c <HAL_GPIO_Init+0x304>)
 80014f6:	4013      	ands	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fc:	3301      	adds	r3, #1
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	fa22 f303 	lsr.w	r3, r2, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	f47f ae8e 	bne.w	800122c <HAL_GPIO_Init+0x14>
  }
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	372c      	adds	r7, #44	@ 0x2c
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	40010400 	.word	0x40010400

08001520 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	e001      	b.n	8001542 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	460b      	mov	r3, r1
 8001558:	807b      	strh	r3, [r7, #2]
 800155a:	4613      	mov	r3, r2
 800155c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800155e:	787b      	ldrb	r3, [r7, #1]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001564:	887a      	ldrh	r2, [r7, #2]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800156a:	e003      	b.n	8001574 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800156c:	887b      	ldrh	r3, [r7, #2]
 800156e:	041a      	lsls	r2, r3, #16
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	611a      	str	r2, [r3, #16]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800157e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001580:	b08b      	sub	sp, #44	@ 0x2c
 8001582:	af06      	add	r7, sp, #24
 8001584:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0f1      	b.n	8001774 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d106      	bne.n	80015aa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f006 f8d7 	bl	8007758 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2203      	movs	r2, #3
 80015ae:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 f9f2 	bl	80039a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	687e      	ldr	r6, [r7, #4]
 80015c4:	466d      	mov	r5, sp
 80015c6:	f106 0410 	add.w	r4, r6, #16
 80015ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ce:	6823      	ldr	r3, [r4, #0]
 80015d0:	602b      	str	r3, [r5, #0]
 80015d2:	1d33      	adds	r3, r6, #4
 80015d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d6:	6838      	ldr	r0, [r7, #0]
 80015d8:	f002 f9bc 	bl	8003954 <USB_CoreInit>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d005      	beq.n	80015ee <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2202      	movs	r2, #2
 80015e6:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e0c2      	b.n	8001774 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f002 f9ed 	bl	80039d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	e040      	b.n	8001682 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	1c5a      	adds	r2, r3, #1
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	440b      	add	r3, r1
 8001610:	3301      	adds	r3, #1
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	440b      	add	r3, r1
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	440b      	add	r3, r1
 800163a:	3303      	adds	r3, #3
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001640:	7bfa      	ldrb	r2, [r7, #15]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	440b      	add	r3, r1
 800164e:	3338      	adds	r3, #56	@ 0x38
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	440b      	add	r3, r1
 8001662:	333c      	adds	r3, #60	@ 0x3c
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	440b      	add	r3, r1
 8001676:	3340      	adds	r3, #64	@ 0x40
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	3301      	adds	r3, #1
 8001680:	73fb      	strb	r3, [r7, #15]
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	429a      	cmp	r2, r3
 800168a:	d3b9      	bcc.n	8001600 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	e044      	b.n	800171c <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001692:	7bfa      	ldrb	r2, [r7, #15]
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	440b      	add	r3, r1
 80016a0:	f203 1369 	addw	r3, r3, #361	@ 0x169
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	440b      	add	r3, r1
 80016b6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	440b      	add	r3, r1
 80016cc:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016d4:	7bfa      	ldrb	r2, [r7, #15]
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	440b      	add	r3, r1
 80016e2:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016ea:	7bfa      	ldrb	r2, [r7, #15]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	440b      	add	r3, r1
 80016f8:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001700:	7bfa      	ldrb	r2, [r7, #15]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	440b      	add	r3, r1
 800170e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	3301      	adds	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	7bfa      	ldrb	r2, [r7, #15]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	429a      	cmp	r2, r3
 8001724:	d3b5      	bcc.n	8001692 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	687e      	ldr	r6, [r7, #4]
 800172e:	466d      	mov	r5, sp
 8001730:	f106 0410 	add.w	r4, r6, #16
 8001734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	602b      	str	r3, [r5, #0]
 800173c:	1d33      	adds	r3, r6, #4
 800173e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001740:	6838      	ldr	r0, [r7, #0]
 8001742:	f002 f953 	bl	80039ec <USB_DevInit>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2202      	movs	r2, #2
 8001750:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e00d      	b.n	8001774 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f004 fbd4 	bl	8005f1a <USB_DevDisconnect>

  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800177c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800178a:	2b01      	cmp	r3, #1
 800178c:	d101      	bne.n	8001792 <HAL_PCD_Start+0x16>
 800178e:	2302      	movs	r3, #2
 8001790:	e016      	b.n	80017c0 <HAL_PCD_Start+0x44>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f002 f8e8 	bl	8003974 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80017a4:	2101      	movs	r1, #1
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f006 fa25 	bl	8007bf6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f004 fba8 	bl	8005f06 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f004 fbaa 	bl	8005f2e <USB_ReadInterrupts>
 80017da:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 fb04 	bl	8001df4 <PCD_EP_ISR_Handler>

    return;
 80017ec:	e119      	b.n	8001a22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d013      	beq.n	8001820 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001800:	b29a      	uxth	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800180a:	b292      	uxth	r2, r2
 800180c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f006 f81c 	bl	800784e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001816:	2100      	movs	r1, #0
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f905 	bl	8001a28 <HAL_PCD_SetAddress>

    return;
 800181e:	e100      	b.n	8001a22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00c      	beq.n	8001844 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001832:	b29a      	uxth	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800183c:	b292      	uxth	r2, r2
 800183e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001842:	e0ee      	b.n	8001a22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00c      	beq.n	8001868 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001856:	b29a      	uxth	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001860:	b292      	uxth	r2, r2
 8001862:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001866:	e0dc      	b.n	8001a22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d027      	beq.n	80018c2 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800187a:	b29a      	uxth	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0204 	bic.w	r2, r2, #4
 8001884:	b292      	uxth	r2, r2
 8001886:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001892:	b29a      	uxth	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0208 	bic.w	r2, r2, #8
 800189c:	b292      	uxth	r2, r2
 800189e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f006 f80c 	bl	80078c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80018ba:	b292      	uxth	r2, r2
 80018bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80018c0:	e0af      	b.n	8001a22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 8083 	beq.w	80019d4 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	77fb      	strb	r3, [r7, #31]
 80018d2:	e010      	b.n	80018f6 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	7ffb      	ldrb	r3, [r7, #31]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	441a      	add	r2, r3
 80018e0:	7ffb      	ldrb	r3, [r7, #31]
 80018e2:	8812      	ldrh	r2, [r2, #0]
 80018e4:	b292      	uxth	r2, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	3320      	adds	r3, #32
 80018ea:	443b      	add	r3, r7
 80018ec:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80018f0:	7ffb      	ldrb	r3, [r7, #31]
 80018f2:	3301      	adds	r3, #1
 80018f4:	77fb      	strb	r3, [r7, #31]
 80018f6:	7ffb      	ldrb	r3, [r7, #31]
 80018f8:	2b07      	cmp	r3, #7
 80018fa:	d9eb      	bls.n	80018d4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001904:	b29a      	uxth	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	b292      	uxth	r2, r2
 8001910:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800191c:	b29a      	uxth	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	b292      	uxth	r2, r2
 8001928:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800192c:	bf00      	nop
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001936:	b29b      	uxth	r3, r3
 8001938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f6      	beq.n	800192e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001948:	b29a      	uxth	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001952:	b292      	uxth	r2, r2
 8001954:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001958:	2300      	movs	r3, #0
 800195a:	77fb      	strb	r3, [r7, #31]
 800195c:	e00f      	b.n	800197e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800195e:	7ffb      	ldrb	r3, [r7, #31]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	4611      	mov	r1, r2
 8001966:	7ffa      	ldrb	r2, [r7, #31]
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	440a      	add	r2, r1
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	3320      	adds	r3, #32
 8001970:	443b      	add	r3, r7
 8001972:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001976:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001978:	7ffb      	ldrb	r3, [r7, #31]
 800197a:	3301      	adds	r3, #1
 800197c:	77fb      	strb	r3, [r7, #31]
 800197e:	7ffb      	ldrb	r3, [r7, #31]
 8001980:	2b07      	cmp	r3, #7
 8001982:	d9ec      	bls.n	800195e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800198c:	b29a      	uxth	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0208 	orr.w	r2, r2, #8
 8001996:	b292      	uxth	r2, r2
 8001998:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019ae:	b292      	uxth	r2, r2
 80019b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019bc:	b29a      	uxth	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0204 	orr.w	r2, r2, #4
 80019c6:	b292      	uxth	r2, r2
 80019c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f005 ff5d 	bl	800788c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80019d2:	e026      	b.n	8001a22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00f      	beq.n	80019fe <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019f0:	b292      	uxth	r2, r2
 80019f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f005 ff1b 	bl	8007832 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80019fc:	e011      	b.n	8001a22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00c      	beq.n	8001a22 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a1a:	b292      	uxth	r2, r2
 8001a1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a20:	bf00      	nop
  }
}
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_PCD_SetAddress+0x1a>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e013      	b.n	8001a6a <HAL_PCD_SetAddress+0x42>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	78fa      	ldrb	r2, [r7, #3]
 8001a4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	78fa      	ldrb	r2, [r7, #3]
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f004 fa40 	bl	8005ee0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b084      	sub	sp, #16
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	4608      	mov	r0, r1
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4603      	mov	r3, r0
 8001a82:	70fb      	strb	r3, [r7, #3]
 8001a84:	460b      	mov	r3, r1
 8001a86:	803b      	strh	r3, [r7, #0]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	da0e      	bge.n	8001ab6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	705a      	strb	r2, [r3, #1]
 8001ab4:	e00e      	b.n	8001ad4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	f003 0207 	and.w	r2, r3, #7
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ae0:	883a      	ldrh	r2, [r7, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	78ba      	ldrb	r2, [r7, #2]
 8001aea:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001aec:	78bb      	ldrb	r3, [r7, #2]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d102      	bne.n	8001af8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_PCD_EP_Open+0x94>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e00e      	b.n	8001b24 <HAL_PCD_EP_Open+0xb2>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68f9      	ldr	r1, [r7, #12]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f001 ff89 	bl	8003a2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8001b22:	7afb      	ldrb	r3, [r7, #11]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	da0e      	bge.n	8001b5e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	705a      	strb	r2, [r3, #1]
 8001b5c:	e00e      	b.n	8001b7c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b5e:	78fb      	ldrb	r3, [r7, #3]
 8001b60:	f003 0207 	and.w	r2, r3, #7
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	4413      	add	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_PCD_EP_Close+0x6a>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e00e      	b.n	8001bb4 <HAL_PCD_EP_Close+0x88>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68f9      	ldr	r1, [r7, #12]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f002 fb01 	bl	80041ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bcc:	7afb      	ldrb	r3, [r7, #11]
 8001bce:	f003 0207 	and.w	r2, r3, #7
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	4413      	add	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bfc:	7afb      	ldrb	r3, [r7, #11]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6979      	ldr	r1, [r7, #20]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f002 fcb8 	bl	8004584 <USB_EPStartXfer>

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c2e:	7afb      	ldrb	r3, [r7, #11]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	1c5a      	adds	r2, r3, #1
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4413      	add	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2200      	movs	r2, #0
 8001c62:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2201      	movs	r2, #1
 8001c68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c6a:	7afb      	ldrb	r3, [r7, #11]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6979      	ldr	r1, [r7, #20]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f002 fc81 	bl	8004584 <USB_EPStartXfer>

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	f003 0207 	and.w	r2, r3, #7
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d901      	bls.n	8001caa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e04c      	b.n	8001d44 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001caa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	da0e      	bge.n	8001cd0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	705a      	strb	r2, [r3, #1]
 8001cce:	e00c      	b.n	8001cea <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cd0:	78fa      	ldrb	r2, [r7, #3]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2201      	movs	r2, #1
 8001cee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_PCD_EP_SetStall+0x7e>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e01c      	b.n	8001d44 <HAL_PCD_EP_SetStall+0xb8>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68f9      	ldr	r1, [r7, #12]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 ffe4 	bl	8005ce6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d108      	bne.n	8001d3a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8001d32:	4619      	mov	r1, r3
 8001d34:	4610      	mov	r0, r2
 8001d36:	f004 f909 	bl	8005f4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	f003 020f 	and.w	r2, r3, #15
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d901      	bls.n	8001d6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e040      	b.n	8001dec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	da0e      	bge.n	8001d90 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	705a      	strb	r2, [r3, #1]
 8001d8e:	e00e      	b.n	8001dae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	f003 0207 	and.w	r2, r3, #7
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_PCD_EP_ClrStall+0x82>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e00e      	b.n	8001dec <HAL_PCD_EP_ClrStall+0xa0>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68f9      	ldr	r1, [r7, #12]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 ffd2 	bl	8005d86 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b096      	sub	sp, #88	@ 0x58
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001dfc:	e3be      	b.n	800257c <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e06:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001e18:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f040 8178 	bne.w	8002112 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d151      	bne.n	8001ed2 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e3e:	81fb      	strh	r3, [r7, #14]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	89fb      	ldrh	r3, [r7, #14]
 8001e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3328      	adds	r3, #40	@ 0x28
 8001e56:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e82:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	441a      	add	r2, r3
 8001e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e90:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e92:	2100      	movs	r1, #0
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f005 fcb2 	bl	80077fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 836a 	beq.w	800257c <PCD_EP_ISR_Handler+0x788>
 8001ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f040 8365 	bne.w	800257c <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001ed0:	e354      	b.n	800257c <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001ed8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ee4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d034      	beq.n	8001f5a <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4413      	add	r3, r2
 8001f04:	3306      	adds	r3, #6
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f1a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8001f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f28:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f2c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	f004 f85c 	bl	8005fec <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001f40:	4013      	ands	r3, r2
 8001f42:	823b      	strh	r3, [r7, #16]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	8a3a      	ldrh	r2, [r7, #16]
 8001f4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f4e:	b292      	uxth	r2, r2
 8001f50:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f005 fc26 	bl	80077a4 <HAL_PCD_SetupStageCallback>
 8001f58:	e310      	b.n	800257c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f5a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f280 830c 	bge.w	800257c <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001f70:	4013      	ands	r3, r2
 8001f72:	83fb      	strh	r3, [r7, #30]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	8bfa      	ldrh	r2, [r7, #30]
 8001f7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f7e:	b292      	uxth	r2, r2
 8001f80:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4413      	add	r3, r2
 8001f96:	3306      	adds	r3, #6
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fac:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d019      	beq.n	8001fea <PCD_EP_ISR_Handler+0x1f6>
 8001fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d015      	beq.n	8001fea <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fc4:	6959      	ldr	r1, [r3, #20]
 8001fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fc8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fcc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	f004 f80c 	bl	8005fec <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	441a      	add	r2, r3
 8001fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f005 fbef 	bl	80077c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001ff4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ff8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f040 82bd 	bne.w	800257c <PCD_EP_ISR_Handler+0x788>
 8002002:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002006:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800200a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800200e:	f000 82b5 	beq.w	800257c <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	61bb      	str	r3, [r7, #24]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002020:	b29b      	uxth	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	4413      	add	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800203c:	b29a      	uxth	r2, r3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	801a      	strh	r2, [r3, #0]
 8002042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b3e      	cmp	r3, #62	@ 0x3e
 8002048:	d91d      	bls.n	8002086 <PCD_EP_ISR_Handler+0x292>
 800204a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	647b      	str	r3, [r7, #68]	@ 0x44
 8002052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	2b00      	cmp	r3, #0
 800205c:	d102      	bne.n	8002064 <PCD_EP_ISR_Handler+0x270>
 800205e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002060:	3b01      	subs	r3, #1
 8002062:	647b      	str	r3, [r7, #68]	@ 0x44
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	b29a      	uxth	r2, r3
 800206a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800206c:	b29b      	uxth	r3, r3
 800206e:	029b      	lsls	r3, r3, #10
 8002070:	b29b      	uxth	r3, r3
 8002072:	4313      	orrs	r3, r2
 8002074:	b29b      	uxth	r3, r3
 8002076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800207a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800207e:	b29a      	uxth	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	801a      	strh	r2, [r3, #0]
 8002084:	e026      	b.n	80020d4 <PCD_EP_ISR_Handler+0x2e0>
 8002086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10a      	bne.n	80020a4 <PCD_EP_ISR_Handler+0x2b0>
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800209c:	b29a      	uxth	r2, r3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	801a      	strh	r2, [r3, #0]
 80020a2:	e017      	b.n	80020d4 <PCD_EP_ISR_Handler+0x2e0>
 80020a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	085b      	lsrs	r3, r3, #1
 80020aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80020ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <PCD_EP_ISR_Handler+0x2ca>
 80020b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ba:	3301      	adds	r3, #1
 80020bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	029b      	lsls	r3, r3, #10
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	4313      	orrs	r3, r2
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020e4:	827b      	strh	r3, [r7, #18]
 80020e6:	8a7b      	ldrh	r3, [r7, #18]
 80020e8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80020ec:	827b      	strh	r3, [r7, #18]
 80020ee:	8a7b      	ldrh	r3, [r7, #18]
 80020f0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80020f4:	827b      	strh	r3, [r7, #18]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	8a7b      	ldrh	r3, [r7, #18]
 80020fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002100:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002104:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800210c:	b29b      	uxth	r3, r3
 800210e:	8013      	strh	r3, [r2, #0]
 8002110:	e234      	b.n	800257c <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002126:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800212a:	2b00      	cmp	r3, #0
 800212c:	f280 80fc 	bge.w	8002328 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	b29a      	uxth	r2, r3
 8002142:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002146:	4013      	ands	r3, r2
 8002148:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800215e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002162:	b292      	uxth	r2, r2
 8002164:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002166:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800217c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217e:	7b1b      	ldrb	r3, [r3, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d125      	bne.n	80021d0 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800218c:	b29b      	uxth	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	3306      	adds	r3, #6
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ac:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80021b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8092 	beq.w	80022de <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c0:	6959      	ldr	r1, [r3, #20]
 80021c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c4:	88da      	ldrh	r2, [r3, #6]
 80021c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80021ca:	f003 ff0f 	bl	8005fec <USB_ReadPMA>
 80021ce:	e086      	b.n	80022de <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80021d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d2:	78db      	ldrb	r3, [r3, #3]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d10a      	bne.n	80021ee <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80021d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80021dc:	461a      	mov	r2, r3
 80021de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f9d9 	bl	8002598 <HAL_PCD_EP_DB_Receive>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80021ec:	e077      	b.n	80022de <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002204:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002208:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	441a      	add	r2, r3
 800221a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800221e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002222:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800222a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800222e:	b29b      	uxth	r3, r3
 8002230:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	b29b      	uxth	r3, r3
 8002244:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d024      	beq.n	8002296 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002254:	b29b      	uxth	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	3302      	adds	r3, #2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	4413      	add	r3, r2
 800226a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002274:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002278:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800227c:	2b00      	cmp	r3, #0
 800227e:	d02e      	beq.n	80022de <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002286:	6959      	ldr	r1, [r3, #20]
 8002288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800228a:	891a      	ldrh	r2, [r3, #8]
 800228c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002290:	f003 feac 	bl	8005fec <USB_ReadPMA>
 8002294:	e023      	b.n	80022de <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800229e:	b29b      	uxth	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	3306      	adds	r3, #6
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022be:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80022c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d009      	beq.n	80022de <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d0:	6959      	ldr	r1, [r3, #20]
 80022d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d4:	895a      	ldrh	r2, [r3, #10]
 80022d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80022da:	f003 fe87 	bl	8005fec <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80022de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80022e6:	441a      	add	r2, r3
 80022e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80022ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80022f4:	441a      	add	r2, r3
 80022f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80022fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <PCD_EP_ISR_Handler+0x51a>
 8002302:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	429a      	cmp	r2, r3
 800230c:	d206      	bcs.n	800231c <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800230e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	4619      	mov	r1, r3
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f005 fa57 	bl	80077c8 <HAL_PCD_DataOutStageCallback>
 800231a:	e005      	b.n	8002328 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002322:	4618      	mov	r0, r3
 8002324:	f002 f92e 	bl	8004584 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002328:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800232c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 8123 	beq.w	800257c <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8002336:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002364:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	441a      	add	r2, r3
 8002376:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800237a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800237e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002382:	b29b      	uxth	r3, r3
 8002384:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002388:	78db      	ldrb	r3, [r3, #3]
 800238a:	2b01      	cmp	r3, #1
 800238c:	f040 80a2 	bne.w	80024d4 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8002390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002392:	2200      	movs	r2, #0
 8002394:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002398:	7b1b      	ldrb	r3, [r3, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 8093 	beq.w	80024c6 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80023a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d046      	beq.n	800243a <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ae:	785b      	ldrb	r3, [r3, #1]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d126      	bne.n	8002402 <PCD_EP_ISR_Handler+0x60e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	4413      	add	r3, r2
 80023ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80023cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	011a      	lsls	r2, r3, #4
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	4413      	add	r3, r2
 80023d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80023da:	623b      	str	r3, [r7, #32]
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	801a      	strh	r2, [r3, #0]
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	801a      	strh	r2, [r3, #0]
 8002400:	e061      	b.n	80024c6 <PCD_EP_ISR_Handler+0x6d2>
 8002402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002404:	785b      	ldrb	r3, [r3, #1]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d15d      	bne.n	80024c6 <PCD_EP_ISR_Handler+0x6d2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002418:	b29b      	uxth	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800241e:	4413      	add	r3, r2
 8002420:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	011a      	lsls	r2, r3, #4
 8002428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800242a:	4413      	add	r3, r2
 800242c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002430:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002434:	2200      	movs	r2, #0
 8002436:	801a      	strh	r2, [r3, #0]
 8002438:	e045      	b.n	80024c6 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002442:	785b      	ldrb	r3, [r3, #1]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d126      	bne.n	8002496 <PCD_EP_ISR_Handler+0x6a2>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	637b      	str	r3, [r7, #52]	@ 0x34
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002456:	b29b      	uxth	r3, r3
 8002458:	461a      	mov	r2, r3
 800245a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800245c:	4413      	add	r3, r2
 800245e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	011a      	lsls	r2, r3, #4
 8002466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002468:	4413      	add	r3, r2
 800246a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800246e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	b29b      	uxth	r3, r3
 8002476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800247a:	b29a      	uxth	r2, r3
 800247c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247e:	801a      	strh	r2, [r3, #0]
 8002480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800248a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800248e:	b29a      	uxth	r2, r3
 8002490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002492:	801a      	strh	r2, [r3, #0]
 8002494:	e017      	b.n	80024c6 <PCD_EP_ISR_Handler+0x6d2>
 8002496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002498:	785b      	ldrb	r3, [r3, #1]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d113      	bne.n	80024c6 <PCD_EP_ISR_Handler+0x6d2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024ac:	4413      	add	r3, r2
 80024ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	011a      	lsls	r2, r3, #4
 80024b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024b8:	4413      	add	r3, r2
 80024ba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80024be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c2:	2200      	movs	r2, #0
 80024c4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	4619      	mov	r1, r3
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f005 f996 	bl	80077fe <HAL_PCD_DataInStageCallback>
 80024d2:	e053      	b.n	800257c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80024d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d146      	bne.n	800256e <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	3302      	adds	r3, #2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002508:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800250c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800250e:	699a      	ldr	r2, [r3, #24]
 8002510:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002514:	429a      	cmp	r2, r3
 8002516:	d907      	bls.n	8002528 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8002518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800251a:	699a      	ldr	r2, [r3, #24]
 800251c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002520:	1ad2      	subs	r2, r2, r3
 8002522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002524:	619a      	str	r2, [r3, #24]
 8002526:	e002      	b.n	800252e <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800252a:	2200      	movs	r2, #0
 800252c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800252e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	4619      	mov	r1, r3
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f005 f95e 	bl	80077fe <HAL_PCD_DataInStageCallback>
 8002542:	e01b      	b.n	800257c <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800254c:	441a      	add	r2, r3
 800254e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002550:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002554:	69da      	ldr	r2, [r3, #28]
 8002556:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800255a:	441a      	add	r2, r3
 800255c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800255e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002566:	4618      	mov	r0, r3
 8002568:	f002 f80c 	bl	8004584 <USB_EPStartXfer>
 800256c:	e006      	b.n	800257c <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800256e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002572:	461a      	mov	r2, r3
 8002574:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f91b 	bl	80027b2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002584:	b29b      	uxth	r3, r3
 8002586:	b21b      	sxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	f6ff ac38 	blt.w	8001dfe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3758      	adds	r7, #88	@ 0x58
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	4613      	mov	r3, r2
 80025a4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d07e      	beq.n	80026ae <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4413      	add	r3, r2
 80025c4:	3302      	adds	r3, #2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	8b7b      	ldrh	r3, [r7, #26]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d306      	bcc.n	80025f2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	699a      	ldr	r2, [r3, #24]
 80025e8:	8b7b      	ldrh	r3, [r7, #26]
 80025ea:	1ad2      	subs	r2, r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	619a      	str	r2, [r3, #24]
 80025f0:	e002      	b.n	80025f8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d123      	bne.n	8002648 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	b29b      	uxth	r3, r3
 8002612:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800261a:	833b      	strh	r3, [r7, #24]
 800261c:	8b3b      	ldrh	r3, [r7, #24]
 800261e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002622:	833b      	strh	r3, [r7, #24]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	441a      	add	r2, r3
 8002632:	8b3b      	ldrh	r3, [r7, #24]
 8002634:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002638:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800263c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002644:	b29b      	uxth	r3, r3
 8002646:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002648:	88fb      	ldrh	r3, [r7, #6]
 800264a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d01f      	beq.n	8002692 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800266c:	82fb      	strh	r3, [r7, #22]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	441a      	add	r2, r3
 800267c:	8afb      	ldrh	r3, [r7, #22]
 800267e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800268a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800268e:	b29b      	uxth	r3, r3
 8002690:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002692:	8b7b      	ldrh	r3, [r7, #26]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 8087 	beq.w	80027a8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	6959      	ldr	r1, [r3, #20]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	891a      	ldrh	r2, [r3, #8]
 80026a6:	8b7b      	ldrh	r3, [r7, #26]
 80026a8:	f003 fca0 	bl	8005fec <USB_ReadPMA>
 80026ac:	e07c      	b.n	80027a8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	3306      	adds	r3, #6
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	699a      	ldr	r2, [r3, #24]
 80026dc:	8b7b      	ldrh	r3, [r7, #26]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d306      	bcc.n	80026f0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	8b7b      	ldrh	r3, [r7, #26]
 80026e8:	1ad2      	subs	r2, r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	619a      	str	r2, [r3, #24]
 80026ee:	e002      	b.n	80026f6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2200      	movs	r2, #0
 80026f4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d123      	bne.n	8002746 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002718:	83fb      	strh	r3, [r7, #30]
 800271a:	8bfb      	ldrh	r3, [r7, #30]
 800271c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002720:	83fb      	strh	r3, [r7, #30]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	441a      	add	r2, r3
 8002730:	8bfb      	ldrh	r3, [r7, #30]
 8002732:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002736:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800273a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800273e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002742:	b29b      	uxth	r3, r3
 8002744:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274c:	2b00      	cmp	r3, #0
 800274e:	d11f      	bne.n	8002790 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	b29b      	uxth	r3, r3
 8002762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800276a:	83bb      	strh	r3, [r7, #28]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	441a      	add	r2, r3
 800277a:	8bbb      	ldrh	r3, [r7, #28]
 800277c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002780:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002788:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800278c:	b29b      	uxth	r3, r3
 800278e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002790:	8b7b      	ldrh	r3, [r7, #26]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	6959      	ldr	r1, [r3, #20]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	895a      	ldrh	r2, [r3, #10]
 80027a2:	8b7b      	ldrh	r3, [r7, #26]
 80027a4:	f003 fc22 	bl	8005fec <USB_ReadPMA>
    }
  }

  return count;
 80027a8:	8b7b      	ldrh	r3, [r7, #26]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3720      	adds	r7, #32
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b0a4      	sub	sp, #144	@ 0x90
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	4613      	mov	r3, r2
 80027be:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 81dd 	beq.w	8002b86 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	3302      	adds	r3, #2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027f4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	699a      	ldr	r2, [r3, #24]
 80027fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002800:	429a      	cmp	r2, r3
 8002802:	d907      	bls.n	8002814 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	699a      	ldr	r2, [r3, #24]
 8002808:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800280c:	1ad2      	subs	r2, r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	619a      	str	r2, [r3, #24]
 8002812:	e002      	b.n	800281a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2200      	movs	r2, #0
 8002818:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f040 80b9 	bne.w	8002996 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	785b      	ldrb	r3, [r3, #1]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d126      	bne.n	800287a <HAL_PCD_EP_DB_Transmit+0xc8>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800283a:	b29b      	uxth	r3, r3
 800283c:	461a      	mov	r2, r3
 800283e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002840:	4413      	add	r3, r2
 8002842:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	011a      	lsls	r2, r3, #4
 800284a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800284c:	4413      	add	r3, r2
 800284e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002852:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	b29b      	uxth	r3, r3
 800285a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800285e:	b29a      	uxth	r2, r3
 8002860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002862:	801a      	strh	r2, [r3, #0]
 8002864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800286e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002872:	b29a      	uxth	r2, r3
 8002874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002876:	801a      	strh	r2, [r3, #0]
 8002878:	e01a      	b.n	80028b0 <HAL_PCD_EP_DB_Transmit+0xfe>
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	785b      	ldrb	r3, [r3, #1]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d116      	bne.n	80028b0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	637b      	str	r3, [r7, #52]	@ 0x34
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002890:	b29b      	uxth	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002896:	4413      	add	r3, r2
 8002898:	637b      	str	r3, [r7, #52]	@ 0x34
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	011a      	lsls	r2, r3, #4
 80028a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028a2:	4413      	add	r3, r2
 80028a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80028a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80028aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ac:	2200      	movs	r2, #0
 80028ae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	785b      	ldrb	r3, [r3, #1]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d126      	bne.n	800290c <HAL_PCD_EP_DB_Transmit+0x15a>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	61fb      	str	r3, [r7, #28]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	4413      	add	r3, r2
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	011a      	lsls	r2, r3, #4
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80028e4:	61bb      	str	r3, [r7, #24]
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	801a      	strh	r2, [r3, #0]
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002904:	b29a      	uxth	r2, r3
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	801a      	strh	r2, [r3, #0]
 800290a:	e017      	b.n	800293c <HAL_PCD_EP_DB_Transmit+0x18a>
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	785b      	ldrb	r3, [r3, #1]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d113      	bne.n	800293c <HAL_PCD_EP_DB_Transmit+0x18a>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800291c:	b29b      	uxth	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	4413      	add	r3, r2
 8002924:	627b      	str	r3, [r7, #36]	@ 0x24
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	011a      	lsls	r2, r3, #4
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	4413      	add	r3, r2
 8002930:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002934:	623b      	str	r3, [r7, #32]
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	2200      	movs	r2, #0
 800293a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	4619      	mov	r1, r3
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f004 ff5b 	bl	80077fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 82fc 	beq.w	8002f4c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	b29b      	uxth	r3, r3
 8002966:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800296a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800296e:	82fb      	strh	r3, [r7, #22]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	441a      	add	r2, r3
 800297e:	8afb      	ldrh	r3, [r7, #22]
 8002980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002988:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800298c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002990:	b29b      	uxth	r3, r3
 8002992:	8013      	strh	r3, [r2, #0]
 8002994:	e2da      	b.n	8002f4c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d021      	beq.n	80029e4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ba:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	441a      	add	r2, r3
 80029cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80029d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	f040 82ae 	bne.w	8002f4c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029f8:	441a      	add	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	69da      	ldr	r2, [r3, #28]
 8002a02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a06:	441a      	add	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	6a1a      	ldr	r2, [r3, #32]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d30b      	bcc.n	8002a30 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	6a1a      	ldr	r2, [r3, #32]
 8002a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a28:	1ad2      	subs	r2, r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	621a      	str	r2, [r3, #32]
 8002a2e:	e017      	b.n	8002a60 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d108      	bne.n	8002a4a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002a38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002a48:	e00a      	b.n	8002a60 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	785b      	ldrb	r3, [r3, #1]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d165      	bne.n	8002b34 <HAL_PCD_EP_DB_Transmit+0x382>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	461a      	mov	r2, r3
 8002a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a7c:	4413      	add	r3, r2
 8002a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	011a      	lsls	r2, r3, #4
 8002a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a88:	4413      	add	r3, r2
 8002a8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a9e:	801a      	strh	r2, [r3, #0]
 8002aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aa4:	2b3e      	cmp	r3, #62	@ 0x3e
 8002aa6:	d91d      	bls.n	8002ae4 <HAL_PCD_EP_DB_Transmit+0x332>
 8002aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <HAL_PCD_EP_DB_Transmit+0x310>
 8002abc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	029b      	lsls	r3, r3, #10
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae0:	801a      	strh	r2, [r3, #0]
 8002ae2:	e044      	b.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002ae4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10a      	bne.n	8002b02 <HAL_PCD_EP_DB_Transmit+0x350>
 8002aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002afe:	801a      	strh	r2, [r3, #0]
 8002b00:	e035      	b.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b06:	085b      	lsrs	r3, r3, #1
 8002b08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_PCD_EP_DB_Transmit+0x36a>
 8002b16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b18:	3301      	adds	r3, #1
 8002b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	029b      	lsls	r3, r3, #10
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b30:	801a      	strh	r2, [r3, #0]
 8002b32:	e01c      	b.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	785b      	ldrb	r3, [r3, #1]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d118      	bne.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b50:	4413      	add	r3, r2
 8002b52:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	011a      	lsls	r2, r3, #4
 8002b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b62:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b6c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	6959      	ldr	r1, [r3, #20]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	891a      	ldrh	r2, [r3, #8]
 8002b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f003 f9ef 	bl	8005f62 <USB_WritePMA>
 8002b84:	e1e2      	b.n	8002f4c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	461a      	mov	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4413      	add	r3, r2
 8002b9a:	3306      	adds	r3, #6
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bae:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d307      	bcc.n	8002bce <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bc6:	1ad2      	subs	r2, r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	619a      	str	r2, [r3, #24]
 8002bcc:	e002      	b.n	8002bd4 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f040 80c0 	bne.w	8002d5e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	785b      	ldrb	r3, [r3, #1]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d126      	bne.n	8002c34 <HAL_PCD_EP_DB_Transmit+0x482>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002bfa:	4413      	add	r3, r2
 8002bfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	011a      	lsls	r2, r3, #4
 8002c04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c06:	4413      	add	r3, r2
 8002c08:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c1c:	801a      	strh	r2, [r3, #0]
 8002c1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c30:	801a      	strh	r2, [r3, #0]
 8002c32:	e01a      	b.n	8002c6a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	785b      	ldrb	r3, [r3, #1]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d116      	bne.n	8002c6a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c50:	4413      	add	r3, r2
 8002c52:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	011a      	lsls	r2, r3, #4
 8002c5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c62:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c66:	2200      	movs	r2, #0
 8002c68:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	785b      	ldrb	r3, [r3, #1]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d12b      	bne.n	8002cd0 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c8c:	4413      	add	r3, r2
 8002c8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	011a      	lsls	r2, r3, #4
 8002c96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c98:	4413      	add	r3, r2
 8002c9a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ca2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cb4:	801a      	strh	r2, [r3, #0]
 8002cb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ccc:	801a      	strh	r2, [r3, #0]
 8002cce:	e017      	b.n	8002d00 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	785b      	ldrb	r3, [r3, #1]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d113      	bne.n	8002d00 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ce6:	4413      	add	r3, r2
 8002ce8:	677b      	str	r3, [r7, #116]	@ 0x74
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	011a      	lsls	r2, r3, #4
 8002cf0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002cf8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	4619      	mov	r1, r3
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f004 fd79 	bl	80077fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f040 811a 	bne.w	8002f4c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d32:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	441a      	add	r2, r3
 8002d44:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002d48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	8013      	strh	r3, [r2, #0]
 8002d5c:	e0f6      	b.n	8002f4c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d121      	bne.n	8002dac <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d82:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	441a      	add	r2, r3
 8002d94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002d98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002da0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	f040 80ca 	bne.w	8002f4c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	695a      	ldr	r2, [r3, #20]
 8002dbc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002dc0:	441a      	add	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002dce:	441a      	add	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	6a1a      	ldr	r2, [r3, #32]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d30b      	bcc.n	8002df8 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	6a1a      	ldr	r2, [r3, #32]
 8002dec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002df0:	1ad2      	subs	r2, r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	621a      	str	r2, [r3, #32]
 8002df6:	e017      	b.n	8002e28 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d108      	bne.n	8002e12 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002e00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002e10:	e00a      	b.n	8002e28 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	785b      	ldrb	r3, [r3, #1]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d165      	bne.n	8002f02 <HAL_PCD_EP_DB_Transmit+0x750>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e4a:	4413      	add	r3, r2
 8002e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	011a      	lsls	r2, r3, #4
 8002e54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e56:	4413      	add	r3, r2
 8002e58:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e6c:	801a      	strh	r2, [r3, #0]
 8002e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e72:	2b3e      	cmp	r3, #62	@ 0x3e
 8002e74:	d91d      	bls.n	8002eb2 <HAL_PCD_EP_DB_Transmit+0x700>
 8002e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d102      	bne.n	8002e90 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002e8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	029b      	lsls	r3, r3, #10
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eae:	801a      	strh	r2, [r3, #0]
 8002eb0:	e041      	b.n	8002f36 <HAL_PCD_EP_DB_Transmit+0x784>
 8002eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10a      	bne.n	8002ed0 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002eba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ecc:	801a      	strh	r2, [r3, #0]
 8002ece:	e032      	b.n	8002f36 <HAL_PCD_EP_DB_Transmit+0x784>
 8002ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ed4:	085b      	lsrs	r3, r3, #1
 8002ed6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <HAL_PCD_EP_DB_Transmit+0x738>
 8002ee4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002eea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	029b      	lsls	r3, r3, #10
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002efe:	801a      	strh	r2, [r3, #0]
 8002f00:	e019      	b.n	8002f36 <HAL_PCD_EP_DB_Transmit+0x784>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	785b      	ldrb	r3, [r3, #1]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d115      	bne.n	8002f36 <HAL_PCD_EP_DB_Transmit+0x784>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	461a      	mov	r2, r3
 8002f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f18:	4413      	add	r3, r2
 8002f1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	011a      	lsls	r2, r3, #4
 8002f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f24:	4413      	add	r3, r2
 8002f26:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f34:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	6959      	ldr	r1, [r3, #20]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	895a      	ldrh	r2, [r3, #10]
 8002f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	f003 f80b 	bl	8005f62 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f66:	82bb      	strh	r3, [r7, #20]
 8002f68:	8abb      	ldrh	r3, [r7, #20]
 8002f6a:	f083 0310 	eor.w	r3, r3, #16
 8002f6e:	82bb      	strh	r3, [r7, #20]
 8002f70:	8abb      	ldrh	r3, [r7, #20]
 8002f72:	f083 0320 	eor.w	r3, r3, #32
 8002f76:	82bb      	strh	r3, [r7, #20]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	441a      	add	r2, r3
 8002f86:	8abb      	ldrh	r3, [r7, #20]
 8002f88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3790      	adds	r7, #144	@ 0x90
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b087      	sub	sp, #28
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	817b      	strh	r3, [r7, #10]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002fb8:	897b      	ldrh	r3, [r7, #10]
 8002fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00b      	beq.n	8002fdc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc4:	897b      	ldrh	r3, [r7, #10]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e009      	b.n	8002ff0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fdc:	897a      	ldrh	r2, [r7, #10]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4413      	add	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ff0:	893b      	ldrh	r3, [r7, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d107      	bne.n	8003006 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	80da      	strh	r2, [r3, #6]
 8003004:	e00b      	b.n	800301e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2201      	movs	r2, #1
 800300a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	b29a      	uxth	r2, r3
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	0c1b      	lsrs	r3, r3, #16
 8003018:	b29a      	uxth	r2, r3
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	371c      	adds	r7, #28
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
	...

0800302c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e272      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8087 	beq.w	800315a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800304c:	4b92      	ldr	r3, [pc, #584]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 030c 	and.w	r3, r3, #12
 8003054:	2b04      	cmp	r3, #4
 8003056:	d00c      	beq.n	8003072 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003058:	4b8f      	ldr	r3, [pc, #572]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 030c 	and.w	r3, r3, #12
 8003060:	2b08      	cmp	r3, #8
 8003062:	d112      	bne.n	800308a <HAL_RCC_OscConfig+0x5e>
 8003064:	4b8c      	ldr	r3, [pc, #560]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003070:	d10b      	bne.n	800308a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003072:	4b89      	ldr	r3, [pc, #548]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d06c      	beq.n	8003158 <HAL_RCC_OscConfig+0x12c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d168      	bne.n	8003158 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e24c      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003092:	d106      	bne.n	80030a2 <HAL_RCC_OscConfig+0x76>
 8003094:	4b80      	ldr	r3, [pc, #512]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a7f      	ldr	r2, [pc, #508]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 800309a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	e02e      	b.n	8003100 <HAL_RCC_OscConfig+0xd4>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10c      	bne.n	80030c4 <HAL_RCC_OscConfig+0x98>
 80030aa:	4b7b      	ldr	r3, [pc, #492]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a7a      	ldr	r2, [pc, #488]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	4b78      	ldr	r3, [pc, #480]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a77      	ldr	r2, [pc, #476]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e01d      	b.n	8003100 <HAL_RCC_OscConfig+0xd4>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0xbc>
 80030ce:	4b72      	ldr	r3, [pc, #456]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a71      	ldr	r2, [pc, #452]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b6f      	ldr	r3, [pc, #444]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6e      	ldr	r2, [pc, #440]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	e00b      	b.n	8003100 <HAL_RCC_OscConfig+0xd4>
 80030e8:	4b6b      	ldr	r3, [pc, #428]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a6a      	ldr	r2, [pc, #424]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b68      	ldr	r3, [pc, #416]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a67      	ldr	r2, [pc, #412]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fd ff4a 	bl	8000fa0 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003110:	f7fd ff46 	bl	8000fa0 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	@ 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e200      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b5d      	ldr	r3, [pc, #372]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0xe4>
 800312e:	e014      	b.n	800315a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fd ff36 	bl	8000fa0 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003138:	f7fd ff32 	bl	8000fa0 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	@ 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e1ec      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	4b53      	ldr	r3, [pc, #332]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x10c>
 8003156:	e000      	b.n	800315a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d063      	beq.n	800322e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003166:	4b4c      	ldr	r3, [pc, #304]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003172:	4b49      	ldr	r3, [pc, #292]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b08      	cmp	r3, #8
 800317c:	d11c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x18c>
 800317e:	4b46      	ldr	r3, [pc, #280]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d116      	bne.n	80031b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	4b43      	ldr	r3, [pc, #268]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_RCC_OscConfig+0x176>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d001      	beq.n	80031a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e1c0      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4939      	ldr	r1, [pc, #228]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b6:	e03a      	b.n	800322e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c0:	4b36      	ldr	r3, [pc, #216]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fd feeb 	bl	8000fa0 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ce:	f7fd fee7 	bl	8000fa0 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e1a1      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4927      	ldr	r1, [pc, #156]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
 8003200:	e015      	b.n	800322e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003202:	4b26      	ldr	r3, [pc, #152]	@ (800329c <HAL_RCC_OscConfig+0x270>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7fd feca 	bl	8000fa0 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003210:	f7fd fec6 	bl	8000fa0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e180      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	4b1d      	ldr	r3, [pc, #116]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d03a      	beq.n	80032b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d019      	beq.n	8003276 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003242:	4b17      	ldr	r3, [pc, #92]	@ (80032a0 <HAL_RCC_OscConfig+0x274>)
 8003244:	2201      	movs	r2, #1
 8003246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003248:	f7fd feaa 	bl	8000fa0 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003250:	f7fd fea6 	bl	8000fa0 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e160      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	4b0d      	ldr	r3, [pc, #52]	@ (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800326e:	2001      	movs	r0, #1
 8003270:	f000 fa9c 	bl	80037ac <RCC_Delay>
 8003274:	e01c      	b.n	80032b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003276:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <HAL_RCC_OscConfig+0x274>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327c:	f7fd fe90 	bl	8000fa0 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003282:	e00f      	b.n	80032a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003284:	f7fd fe8c 	bl	8000fa0 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d908      	bls.n	80032a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e146      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000
 800329c:	42420000 	.word	0x42420000
 80032a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a4:	4b92      	ldr	r3, [pc, #584]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1e9      	bne.n	8003284 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80a6 	beq.w	800340a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032be:	2300      	movs	r3, #0
 80032c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c2:	4b8b      	ldr	r3, [pc, #556]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10d      	bne.n	80032ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ce:	4b88      	ldr	r3, [pc, #544]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	4a87      	ldr	r2, [pc, #540]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	61d3      	str	r3, [r2, #28]
 80032da:	4b85      	ldr	r3, [pc, #532]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e6:	2301      	movs	r3, #1
 80032e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ea:	4b82      	ldr	r3, [pc, #520]	@ (80034f4 <HAL_RCC_OscConfig+0x4c8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d118      	bne.n	8003328 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f6:	4b7f      	ldr	r3, [pc, #508]	@ (80034f4 <HAL_RCC_OscConfig+0x4c8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a7e      	ldr	r2, [pc, #504]	@ (80034f4 <HAL_RCC_OscConfig+0x4c8>)
 80032fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003302:	f7fd fe4d 	bl	8000fa0 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330a:	f7fd fe49 	bl	8000fa0 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b64      	cmp	r3, #100	@ 0x64
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e103      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331c:	4b75      	ldr	r3, [pc, #468]	@ (80034f4 <HAL_RCC_OscConfig+0x4c8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d106      	bne.n	800333e <HAL_RCC_OscConfig+0x312>
 8003330:	4b6f      	ldr	r3, [pc, #444]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	4a6e      	ldr	r2, [pc, #440]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	6213      	str	r3, [r2, #32]
 800333c:	e02d      	b.n	800339a <HAL_RCC_OscConfig+0x36e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10c      	bne.n	8003360 <HAL_RCC_OscConfig+0x334>
 8003346:	4b6a      	ldr	r3, [pc, #424]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	4a69      	ldr	r2, [pc, #420]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	6213      	str	r3, [r2, #32]
 8003352:	4b67      	ldr	r3, [pc, #412]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	4a66      	ldr	r2, [pc, #408]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	f023 0304 	bic.w	r3, r3, #4
 800335c:	6213      	str	r3, [r2, #32]
 800335e:	e01c      	b.n	800339a <HAL_RCC_OscConfig+0x36e>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b05      	cmp	r3, #5
 8003366:	d10c      	bne.n	8003382 <HAL_RCC_OscConfig+0x356>
 8003368:	4b61      	ldr	r3, [pc, #388]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	4a60      	ldr	r2, [pc, #384]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 800336e:	f043 0304 	orr.w	r3, r3, #4
 8003372:	6213      	str	r3, [r2, #32]
 8003374:	4b5e      	ldr	r3, [pc, #376]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	4a5d      	ldr	r2, [pc, #372]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6213      	str	r3, [r2, #32]
 8003380:	e00b      	b.n	800339a <HAL_RCC_OscConfig+0x36e>
 8003382:	4b5b      	ldr	r3, [pc, #364]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	4a5a      	ldr	r2, [pc, #360]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003388:	f023 0301 	bic.w	r3, r3, #1
 800338c:	6213      	str	r3, [r2, #32]
 800338e:	4b58      	ldr	r3, [pc, #352]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	4a57      	ldr	r2, [pc, #348]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003394:	f023 0304 	bic.w	r3, r3, #4
 8003398:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d015      	beq.n	80033ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a2:	f7fd fdfd 	bl	8000fa0 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a8:	e00a      	b.n	80033c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033aa:	f7fd fdf9 	bl	8000fa0 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e0b1      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c0:	4b4b      	ldr	r3, [pc, #300]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0ee      	beq.n	80033aa <HAL_RCC_OscConfig+0x37e>
 80033cc:	e014      	b.n	80033f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ce:	f7fd fde7 	bl	8000fa0 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d4:	e00a      	b.n	80033ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d6:	f7fd fde3 	bl	8000fa0 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e09b      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ec:	4b40      	ldr	r3, [pc, #256]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1ee      	bne.n	80033d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033f8:	7dfb      	ldrb	r3, [r7, #23]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d105      	bne.n	800340a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033fe:	4b3c      	ldr	r3, [pc, #240]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	4a3b      	ldr	r2, [pc, #236]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003408:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 8087 	beq.w	8003522 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003414:	4b36      	ldr	r3, [pc, #216]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 030c 	and.w	r3, r3, #12
 800341c:	2b08      	cmp	r3, #8
 800341e:	d061      	beq.n	80034e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d146      	bne.n	80034b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003428:	4b33      	ldr	r3, [pc, #204]	@ (80034f8 <HAL_RCC_OscConfig+0x4cc>)
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342e:	f7fd fdb7 	bl	8000fa0 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003436:	f7fd fdb3 	bl	8000fa0 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e06d      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003448:	4b29      	ldr	r3, [pc, #164]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f0      	bne.n	8003436 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800345c:	d108      	bne.n	8003470 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800345e:	4b24      	ldr	r3, [pc, #144]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	4921      	ldr	r1, [pc, #132]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003470:	4b1f      	ldr	r3, [pc, #124]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a19      	ldr	r1, [r3, #32]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	430b      	orrs	r3, r1
 8003482:	491b      	ldr	r1, [pc, #108]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003488:	4b1b      	ldr	r3, [pc, #108]	@ (80034f8 <HAL_RCC_OscConfig+0x4cc>)
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348e:	f7fd fd87 	bl	8000fa0 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003496:	f7fd fd83 	bl	8000fa0 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e03d      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034a8:	4b11      	ldr	r3, [pc, #68]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x46a>
 80034b4:	e035      	b.n	8003522 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b6:	4b10      	ldr	r3, [pc, #64]	@ (80034f8 <HAL_RCC_OscConfig+0x4cc>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fd fd70 	bl	8000fa0 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c4:	f7fd fd6c 	bl	8000fa0 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e026      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d6:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x498>
 80034e2:	e01e      	b.n	8003522 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d107      	bne.n	80034fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e019      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40007000 	.word	0x40007000
 80034f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034fc:	4b0b      	ldr	r3, [pc, #44]	@ (800352c <HAL_RCC_OscConfig+0x500>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	429a      	cmp	r2, r3
 800350e:	d106      	bne.n	800351e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351a:	429a      	cmp	r2, r3
 800351c:	d001      	beq.n	8003522 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000

08003530 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0d0      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003544:	4b6a      	ldr	r3, [pc, #424]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d910      	bls.n	8003574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b67      	ldr	r3, [pc, #412]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 0207 	bic.w	r2, r3, #7
 800355a:	4965      	ldr	r1, [pc, #404]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b63      	ldr	r3, [pc, #396]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0b8      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d020      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800358c:	4b59      	ldr	r3, [pc, #356]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4a58      	ldr	r2, [pc, #352]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003596:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035a4:	4b53      	ldr	r3, [pc, #332]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4a52      	ldr	r2, [pc, #328]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80035ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b0:	4b50      	ldr	r3, [pc, #320]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	494d      	ldr	r1, [pc, #308]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d040      	beq.n	8003650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	4b47      	ldr	r3, [pc, #284]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d115      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e07f      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ee:	4b41      	ldr	r3, [pc, #260]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e073      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fe:	4b3d      	ldr	r3, [pc, #244]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e06b      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360e:	4b39      	ldr	r3, [pc, #228]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f023 0203 	bic.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4936      	ldr	r1, [pc, #216]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003620:	f7fd fcbe 	bl	8000fa0 <HAL_GetTick>
 8003624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	e00a      	b.n	800363e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003628:	f7fd fcba 	bl	8000fa0 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e053      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	4b2d      	ldr	r3, [pc, #180]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 020c 	and.w	r2, r3, #12
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	429a      	cmp	r2, r3
 800364e:	d1eb      	bne.n	8003628 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003650:	4b27      	ldr	r3, [pc, #156]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d210      	bcs.n	8003680 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365e:	4b24      	ldr	r3, [pc, #144]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 0207 	bic.w	r2, r3, #7
 8003666:	4922      	ldr	r1, [pc, #136]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	4b20      	ldr	r3, [pc, #128]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e032      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800368c:	4b19      	ldr	r3, [pc, #100]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4916      	ldr	r1, [pc, #88]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 800369a:	4313      	orrs	r3, r2
 800369c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d009      	beq.n	80036be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036aa:	4b12      	ldr	r3, [pc, #72]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	490e      	ldr	r1, [pc, #56]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036be:	f000 f821 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 80036c2:	4602      	mov	r2, r0
 80036c4:	4b0b      	ldr	r3, [pc, #44]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	490a      	ldr	r1, [pc, #40]	@ (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036d0:	5ccb      	ldrb	r3, [r1, r3]
 80036d2:	fa22 f303 	lsr.w	r3, r2, r3
 80036d6:	4a09      	ldr	r2, [pc, #36]	@ (80036fc <HAL_RCC_ClockConfig+0x1cc>)
 80036d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036da:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <HAL_RCC_ClockConfig+0x1d0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fd fc1c 	bl	8000f1c <HAL_InitTick>

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40022000 	.word	0x40022000
 80036f4:	40021000 	.word	0x40021000
 80036f8:	08007d0c 	.word	0x08007d0c
 80036fc:	20000000 	.word	0x20000000
 8003700:	20000004 	.word	0x20000004

08003704 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	2300      	movs	r3, #0
 8003718:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800371e:	4b1e      	ldr	r3, [pc, #120]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x94>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b04      	cmp	r3, #4
 800372c:	d002      	beq.n	8003734 <HAL_RCC_GetSysClockFreq+0x30>
 800372e:	2b08      	cmp	r3, #8
 8003730:	d003      	beq.n	800373a <HAL_RCC_GetSysClockFreq+0x36>
 8003732:	e027      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003734:	4b19      	ldr	r3, [pc, #100]	@ (800379c <HAL_RCC_GetSysClockFreq+0x98>)
 8003736:	613b      	str	r3, [r7, #16]
      break;
 8003738:	e027      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	0c9b      	lsrs	r3, r3, #18
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	4a17      	ldr	r2, [pc, #92]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003744:	5cd3      	ldrb	r3, [r2, r3]
 8003746:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d010      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003752:	4b11      	ldr	r3, [pc, #68]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x94>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	0c5b      	lsrs	r3, r3, #17
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	4a11      	ldr	r2, [pc, #68]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800375e:	5cd3      	ldrb	r3, [r2, r3]
 8003760:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a0d      	ldr	r2, [pc, #52]	@ (800379c <HAL_RCC_GetSysClockFreq+0x98>)
 8003766:	fb03 f202 	mul.w	r2, r3, r2
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	e004      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a0c      	ldr	r2, [pc, #48]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003778:	fb02 f303 	mul.w	r3, r2, r3
 800377c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	613b      	str	r3, [r7, #16]
      break;
 8003782:	e002      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003784:	4b05      	ldr	r3, [pc, #20]	@ (800379c <HAL_RCC_GetSysClockFreq+0x98>)
 8003786:	613b      	str	r3, [r7, #16]
      break;
 8003788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800378a:	693b      	ldr	r3, [r7, #16]
}
 800378c:	4618      	mov	r0, r3
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40021000 	.word	0x40021000
 800379c:	007a1200 	.word	0x007a1200
 80037a0:	08007d1c 	.word	0x08007d1c
 80037a4:	08007d2c 	.word	0x08007d2c
 80037a8:	003d0900 	.word	0x003d0900

080037ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037b4:	4b0a      	ldr	r3, [pc, #40]	@ (80037e0 <RCC_Delay+0x34>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0a      	ldr	r2, [pc, #40]	@ (80037e4 <RCC_Delay+0x38>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	0a5b      	lsrs	r3, r3, #9
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037c8:	bf00      	nop
  }
  while (Delay --);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1e5a      	subs	r2, r3, #1
 80037ce:	60fa      	str	r2, [r7, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1f9      	bne.n	80037c8 <RCC_Delay+0x1c>
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr
 80037e0:	20000000 	.word	0x20000000
 80037e4:	10624dd3 	.word	0x10624dd3

080037e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d07d      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003804:	2300      	movs	r3, #0
 8003806:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003808:	4b4f      	ldr	r3, [pc, #316]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10d      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003814:	4b4c      	ldr	r3, [pc, #304]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	4a4b      	ldr	r2, [pc, #300]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800381e:	61d3      	str	r3, [r2, #28]
 8003820:	4b49      	ldr	r3, [pc, #292]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800382c:	2301      	movs	r3, #1
 800382e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003830:	4b46      	ldr	r3, [pc, #280]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003838:	2b00      	cmp	r3, #0
 800383a:	d118      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800383c:	4b43      	ldr	r3, [pc, #268]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a42      	ldr	r2, [pc, #264]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003846:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003848:	f7fd fbaa 	bl	8000fa0 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384e:	e008      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003850:	f7fd fba6 	bl	8000fa0 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	@ 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e06d      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003862:	4b3a      	ldr	r3, [pc, #232]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800386e:	4b36      	ldr	r3, [pc, #216]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003876:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d02e      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	429a      	cmp	r2, r3
 800388a:	d027      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800388c:	4b2e      	ldr	r3, [pc, #184]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003894:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003896:	4b2e      	ldr	r3, [pc, #184]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003898:	2201      	movs	r2, #1
 800389a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800389c:	4b2c      	ldr	r3, [pc, #176]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038a2:	4a29      	ldr	r2, [pc, #164]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d014      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b2:	f7fd fb75 	bl	8000fa0 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b8:	e00a      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ba:	f7fd fb71 	bl	8000fa0 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e036      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0ee      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	4917      	ldr	r1, [pc, #92]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d105      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f4:	4b14      	ldr	r3, [pc, #80]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	4a13      	ldr	r2, [pc, #76]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800390c:	4b0e      	ldr	r3, [pc, #56]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	490b      	ldr	r1, [pc, #44]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800392a:	4b07      	ldr	r3, [pc, #28]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	4904      	ldr	r1, [pc, #16]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003938:	4313      	orrs	r3, r2
 800393a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	40007000 	.word	0x40007000
 8003950:	42420440 	.word	0x42420440

08003954 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003954:	b084      	sub	sp, #16
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	f107 0014 	add.w	r0, r7, #20
 8003962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	b004      	add	sp, #16
 8003972:	4770      	bx	lr

08003974 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003984:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003988:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	b29a      	uxth	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80039a8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80039ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	b29b      	uxth	r3, r3
 80039be:	4013      	ands	r3, r2
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr

080039d4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr

080039ec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80039ec:	b084      	sub	sp, #16
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	f107 0014 	add.w	r0, r7, #20
 80039fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	b004      	add	sp, #16
 8003a2a:	4770      	bx	lr

08003a2c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b09d      	sub	sp, #116	@ 0x74
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a52:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	78db      	ldrb	r3, [r3, #3]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d81f      	bhi.n	8003a9e <USB_ActivateEndpoint+0x72>
 8003a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a64 <USB_ActivateEndpoint+0x38>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003a75 	.word	0x08003a75
 8003a68:	08003a91 	.word	0x08003a91
 8003a6c:	08003aa7 	.word	0x08003aa7
 8003a70:	08003a83 	.word	0x08003a83
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003a74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003a78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a7c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003a80:	e012      	b.n	8003aa8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003a82:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003a86:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003a8a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003a8e:	e00b      	b.n	8003aa8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003a90:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003a94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a98:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003a9c:	e004      	b.n	8003aa8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8003aa4:	e000      	b.n	8003aa8 <USB_ActivateEndpoint+0x7c>
      break;
 8003aa6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	441a      	add	r2, r3
 8003ab2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003ab6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003aba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003adc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	7812      	ldrb	r2, [r2, #0]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	441a      	add	r2, r3
 8003af6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003afa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003afe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	7b1b      	ldrb	r3, [r3, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f040 8178 	bne.w	8003e08 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	785b      	ldrb	r3, [r3, #1]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 8084 	beq.w	8003c2a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	461a      	mov	r2, r3
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	4413      	add	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	011a      	lsls	r2, r3, #4
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	88db      	ldrh	r3, [r3, #6]
 8003b4a:	085b      	lsrs	r3, r3, #1
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	827b      	strh	r3, [r7, #18]
 8003b64:	8a7b      	ldrh	r3, [r7, #18]
 8003b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01b      	beq.n	8003ba6 <USB_ActivateEndpoint+0x17a>
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b84:	823b      	strh	r3, [r7, #16]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	441a      	add	r2, r3
 8003b90:	8a3b      	ldrh	r3, [r7, #16]
 8003b92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	78db      	ldrb	r3, [r3, #3]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d020      	beq.n	8003bf0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bc4:	81bb      	strh	r3, [r7, #12]
 8003bc6:	89bb      	ldrh	r3, [r7, #12]
 8003bc8:	f083 0320 	eor.w	r3, r3, #32
 8003bcc:	81bb      	strh	r3, [r7, #12]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	441a      	add	r2, r3
 8003bd8:	89bb      	ldrh	r3, [r7, #12]
 8003bda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003be2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	8013      	strh	r3, [r2, #0]
 8003bee:	e2d5      	b.n	800419c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c06:	81fb      	strh	r3, [r7, #14]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	441a      	add	r2, r3
 8003c12:	89fb      	ldrh	r3, [r7, #14]
 8003c14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	8013      	strh	r3, [r2, #0]
 8003c28:	e2b8      	b.n	800419c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3a:	4413      	add	r3, r2
 8003c3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	011a      	lsls	r2, r3, #4
 8003c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	88db      	ldrh	r3, [r3, #6]
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c6e:	4413      	add	r3, r2
 8003c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	011a      	lsls	r2, r3, #4
 8003c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c90:	801a      	strh	r2, [r3, #0]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c98:	d91d      	bls.n	8003cd6 <USB_ActivateEndpoint+0x2aa>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 031f 	and.w	r3, r3, #31
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d102      	bne.n	8003cb4 <USB_ActivateEndpoint+0x288>
 8003cae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	029b      	lsls	r3, r3, #10
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	801a      	strh	r2, [r3, #0]
 8003cd4:	e026      	b.n	8003d24 <USB_ActivateEndpoint+0x2f8>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10a      	bne.n	8003cf4 <USB_ActivateEndpoint+0x2c8>
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	801a      	strh	r2, [r3, #0]
 8003cf2:	e017      	b.n	8003d24 <USB_ActivateEndpoint+0x2f8>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	085b      	lsrs	r3, r3, #1
 8003cfa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <USB_ActivateEndpoint+0x2e2>
 8003d08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	029b      	lsls	r3, r3, #10
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003d32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003d34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01b      	beq.n	8003d74 <USB_ActivateEndpoint+0x348>
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d52:	843b      	strh	r3, [r7, #32]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	441a      	add	r2, r3
 8003d5e:	8c3b      	ldrh	r3, [r7, #32]
 8003d60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d124      	bne.n	8003dc6 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d92:	83bb      	strh	r3, [r7, #28]
 8003d94:	8bbb      	ldrh	r3, [r7, #28]
 8003d96:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003d9a:	83bb      	strh	r3, [r7, #28]
 8003d9c:	8bbb      	ldrh	r3, [r7, #28]
 8003d9e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003da2:	83bb      	strh	r3, [r7, #28]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	441a      	add	r2, r3
 8003dae:	8bbb      	ldrh	r3, [r7, #28]
 8003db0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003db4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003db8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	8013      	strh	r3, [r2, #0]
 8003dc4:	e1ea      	b.n	800419c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ddc:	83fb      	strh	r3, [r7, #30]
 8003dde:	8bfb      	ldrh	r3, [r7, #30]
 8003de0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003de4:	83fb      	strh	r3, [r7, #30]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	441a      	add	r2, r3
 8003df0:	8bfb      	ldrh	r3, [r7, #30]
 8003df2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003df6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	8013      	strh	r3, [r2, #0]
 8003e06:	e1c9      	b.n	800419c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	78db      	ldrb	r3, [r3, #3]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d11e      	bne.n	8003e4e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e26:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	441a      	add	r2, r3
 8003e34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003e38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e40:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003e44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	8013      	strh	r3, [r2, #0]
 8003e4c:	e01d      	b.n	8003e8a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8003e60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e64:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	441a      	add	r2, r3
 8003e72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003e76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e9a:	4413      	add	r3, r2
 8003e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	011a      	lsls	r2, r3, #4
 8003ea4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003eac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	891b      	ldrh	r3, [r3, #8]
 8003eb2:	085b      	lsrs	r3, r3, #1
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ebc:	801a      	strh	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ece:	4413      	add	r3, r2
 8003ed0:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	011a      	lsls	r2, r3, #4
 8003ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003ee0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	895b      	ldrh	r3, [r3, #10]
 8003ee6:	085b      	lsrs	r3, r3, #1
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ef0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	785b      	ldrb	r3, [r3, #1]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f040 8093 	bne.w	8004022 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8003f0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003f10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01b      	beq.n	8003f50 <USB_ActivateEndpoint+0x524>
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f2e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	441a      	add	r2, r3
 8003f3a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003f3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003f5e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01b      	beq.n	8003fa0 <USB_ActivateEndpoint+0x574>
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f7e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	441a      	add	r2, r3
 8003f8a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003f8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fb6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003fb8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003fba:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003fbe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003fc0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003fc2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003fc6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	441a      	add	r2, r3
 8003fd2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003fd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ffa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ffe:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	441a      	add	r2, r3
 800400a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800400c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800401c:	b29b      	uxth	r3, r3
 800401e:	8013      	strh	r3, [r2, #0]
 8004020:	e0bc      	b.n	800419c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004032:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d01d      	beq.n	800407a <USB_ActivateEndpoint+0x64e>
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	b29b      	uxth	r3, r3
 800404c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004054:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	441a      	add	r2, r3
 8004062:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004066:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800406a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800406e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004076:	b29b      	uxth	r3, r3
 8004078:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800408a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800408e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d01d      	beq.n	80040d2 <USB_ActivateEndpoint+0x6a6>
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ac:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	441a      	add	r2, r3
 80040ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80040be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	78db      	ldrb	r3, [r3, #3]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d024      	beq.n	8004124 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040f0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80040f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80040f8:	f083 0320 	eor.w	r3, r3, #32
 80040fc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	441a      	add	r2, r3
 800410a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800410e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004112:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004116:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800411a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800411e:	b29b      	uxth	r3, r3
 8004120:	8013      	strh	r3, [r2, #0]
 8004122:	e01d      	b.n	8004160 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	b29b      	uxth	r3, r3
 8004132:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004136:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800413a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	441a      	add	r2, r3
 8004148:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800414c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004150:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004154:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800415c:	b29b      	uxth	r3, r3
 800415e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	b29b      	uxth	r3, r3
 800416e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004176:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	441a      	add	r2, r3
 8004184:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004188:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800418c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004190:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004198:	b29b      	uxth	r3, r3
 800419a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800419c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3774      	adds	r7, #116	@ 0x74
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop

080041ac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b08d      	sub	sp, #52	@ 0x34
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	7b1b      	ldrb	r3, [r3, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f040 808e 	bne.w	80042dc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	785b      	ldrb	r3, [r3, #1]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d044      	beq.n	8004252 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	81bb      	strh	r3, [r7, #12]
 80041d6:	89bb      	ldrh	r3, [r7, #12]
 80041d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01b      	beq.n	8004218 <USB_DeactivateEndpoint+0x6c>
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f6:	817b      	strh	r3, [r7, #10]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	441a      	add	r2, r3
 8004202:	897b      	ldrh	r3, [r7, #10]
 8004204:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004208:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800420c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004210:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004214:	b29b      	uxth	r3, r3
 8004216:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	b29b      	uxth	r3, r3
 8004226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800422a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800422e:	813b      	strh	r3, [r7, #8]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	441a      	add	r2, r3
 800423a:	893b      	ldrh	r3, [r7, #8]
 800423c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004240:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004244:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800424c:	b29b      	uxth	r3, r3
 800424e:	8013      	strh	r3, [r2, #0]
 8004250:	e192      	b.n	8004578 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	827b      	strh	r3, [r7, #18]
 8004260:	8a7b      	ldrh	r3, [r7, #18]
 8004262:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d01b      	beq.n	80042a2 <USB_DeactivateEndpoint+0xf6>
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	b29b      	uxth	r3, r3
 8004278:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800427c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004280:	823b      	strh	r3, [r7, #16]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	441a      	add	r2, r3
 800428c:	8a3b      	ldrh	r3, [r7, #16]
 800428e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004292:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004296:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800429a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800429e:	b29b      	uxth	r3, r3
 80042a0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042b8:	81fb      	strh	r3, [r7, #14]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	441a      	add	r2, r3
 80042c4:	89fb      	ldrh	r3, [r7, #14]
 80042c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	8013      	strh	r3, [r2, #0]
 80042da:	e14d      	b.n	8004578 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	785b      	ldrb	r3, [r3, #1]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f040 80a5 	bne.w	8004430 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	843b      	strh	r3, [r7, #32]
 80042f4:	8c3b      	ldrh	r3, [r7, #32]
 80042f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01b      	beq.n	8004336 <USB_DeactivateEndpoint+0x18a>
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	b29b      	uxth	r3, r3
 800430c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004310:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004314:	83fb      	strh	r3, [r7, #30]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	441a      	add	r2, r3
 8004320:	8bfb      	ldrh	r3, [r7, #30]
 8004322:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004326:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800432a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800432e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004332:	b29b      	uxth	r3, r3
 8004334:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	83bb      	strh	r3, [r7, #28]
 8004344:	8bbb      	ldrh	r3, [r7, #28]
 8004346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800434a:	2b00      	cmp	r3, #0
 800434c:	d01b      	beq.n	8004386 <USB_DeactivateEndpoint+0x1da>
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	b29b      	uxth	r3, r3
 800435c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004364:	837b      	strh	r3, [r7, #26]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	441a      	add	r2, r3
 8004370:	8b7b      	ldrh	r3, [r7, #26]
 8004372:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004376:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800437a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800437e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004382:	b29b      	uxth	r3, r3
 8004384:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	b29b      	uxth	r3, r3
 8004394:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004398:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800439c:	833b      	strh	r3, [r7, #24]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	441a      	add	r2, r3
 80043a8:	8b3b      	ldrh	r3, [r7, #24]
 80043aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043d4:	82fb      	strh	r3, [r7, #22]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	441a      	add	r2, r3
 80043e0:	8afb      	ldrh	r3, [r7, #22]
 80043e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004408:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800440c:	82bb      	strh	r3, [r7, #20]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	441a      	add	r2, r3
 8004418:	8abb      	ldrh	r3, [r7, #20]
 800441a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800441e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004422:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800442a:	b29b      	uxth	r3, r3
 800442c:	8013      	strh	r3, [r2, #0]
 800442e:	e0a3      	b.n	8004578 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800443e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004440:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01b      	beq.n	8004480 <USB_DeactivateEndpoint+0x2d4>
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	b29b      	uxth	r3, r3
 8004456:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800445a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800445e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	441a      	add	r2, r3
 800446a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800446c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004470:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004474:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800447c:	b29b      	uxth	r3, r3
 800447e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800448e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01b      	beq.n	80044d0 <USB_DeactivateEndpoint+0x324>
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	441a      	add	r2, r3
 80044ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80044bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	b29b      	uxth	r3, r3
 80044de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	441a      	add	r2, r3
 80044f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80044f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004504:	b29b      	uxth	r3, r3
 8004506:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	b29b      	uxth	r3, r3
 8004516:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800451a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800451e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	441a      	add	r2, r3
 800452a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800452c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004530:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004534:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800453c:	b29b      	uxth	r3, r3
 800453e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004556:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	441a      	add	r2, r3
 8004562:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004564:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004568:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800456c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004574:	b29b      	uxth	r3, r3
 8004576:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3734      	adds	r7, #52	@ 0x34
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr

08004584 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b0c2      	sub	sp, #264	@ 0x108
 8004588:	af00      	add	r7, sp, #0
 800458a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800458e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004592:	6018      	str	r0, [r3, #0]
 8004594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800459c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800459e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	785b      	ldrb	r3, [r3, #1]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	f040 86b7 	bne.w	800531e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80045b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699a      	ldr	r2, [r3, #24]
 80045bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d908      	bls.n	80045de <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80045cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80045dc:	e007      	b.n	80045ee <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80045de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80045ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	7b1b      	ldrb	r3, [r3, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d13a      	bne.n	8004674 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80045fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6959      	ldr	r1, [r3, #20]
 800460a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800460e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	88da      	ldrh	r2, [r3, #6]
 8004616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800461a:	b29b      	uxth	r3, r3
 800461c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004620:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004624:	6800      	ldr	r0, [r0, #0]
 8004626:	f001 fc9c 	bl	8005f62 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800462a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800462e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800463a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004644:	b29b      	uxth	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	4413      	add	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004652:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	011a      	lsls	r2, r3, #4
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4413      	add	r3, r2
 8004660:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	801a      	strh	r2, [r3, #0]
 8004670:	f000 be1f 	b.w	80052b2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	78db      	ldrb	r3, [r3, #3]
 8004680:	2b02      	cmp	r3, #2
 8004682:	f040 8462 	bne.w	8004f4a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800468a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6a1a      	ldr	r2, [r3, #32]
 8004692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	429a      	cmp	r2, r3
 80046a0:	f240 83df 	bls.w	8004e62 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80046a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ca:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80046ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	441a      	add	r2, r3
 80046e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80046ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046f4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80046f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6a1a      	ldr	r2, [r3, #32]
 800470c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004710:	1ad2      	subs	r2, r2, r3
 8004712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800471e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004722:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800472c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	b29b      	uxth	r3, r3
 800473c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 81c7 	beq.w	8004ad4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800474a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	633b      	str	r3, [r7, #48]	@ 0x30
 8004752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	785b      	ldrb	r3, [r3, #1]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d177      	bne.n	8004852 <USB_EPStartXfer+0x2ce>
 8004762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004766:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800476e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004772:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800477c:	b29b      	uxth	r3, r3
 800477e:	461a      	mov	r2, r3
 8004780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004782:	4413      	add	r3, r2
 8004784:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800478a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	011a      	lsls	r2, r3, #4
 8004794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004796:	4413      	add	r3, r2
 8004798:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800479c:	627b      	str	r3, [r7, #36]	@ 0x24
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ac:	801a      	strh	r2, [r3, #0]
 80047ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80047b4:	d921      	bls.n	80047fa <USB_EPStartXfer+0x276>
 80047b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80047c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d104      	bne.n	80047d6 <USB_EPStartXfer+0x252>
 80047cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80047d0:	3b01      	subs	r3, #1
 80047d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80047d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29a      	uxth	r2, r3
 80047dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	029b      	lsls	r3, r3, #10
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	4313      	orrs	r3, r2
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	801a      	strh	r2, [r3, #0]
 80047f8:	e050      	b.n	800489c <USB_EPStartXfer+0x318>
 80047fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <USB_EPStartXfer+0x294>
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800480c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004810:	b29a      	uxth	r2, r3
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	801a      	strh	r2, [r3, #0]
 8004816:	e041      	b.n	800489c <USB_EPStartXfer+0x318>
 8004818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800481c:	085b      	lsrs	r3, r3, #1
 800481e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d004      	beq.n	8004838 <USB_EPStartXfer+0x2b4>
 800482e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004832:	3301      	adds	r3, #1
 8004834:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	b29a      	uxth	r2, r3
 800483e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004842:	b29b      	uxth	r3, r3
 8004844:	029b      	lsls	r3, r3, #10
 8004846:	b29b      	uxth	r3, r3
 8004848:	4313      	orrs	r3, r2
 800484a:	b29a      	uxth	r2, r3
 800484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484e:	801a      	strh	r2, [r3, #0]
 8004850:	e024      	b.n	800489c <USB_EPStartXfer+0x318>
 8004852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	785b      	ldrb	r3, [r3, #1]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d11c      	bne.n	800489c <USB_EPStartXfer+0x318>
 8004862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004866:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004870:	b29b      	uxth	r3, r3
 8004872:	461a      	mov	r2, r3
 8004874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004876:	4413      	add	r3, r2
 8004878:	633b      	str	r3, [r7, #48]	@ 0x30
 800487a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800487e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	011a      	lsls	r2, r3, #4
 8004888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488a:	4413      	add	r3, r2
 800488c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004890:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004896:	b29a      	uxth	r2, r3
 8004898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800489a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800489c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	895b      	ldrh	r3, [r3, #10]
 80048a8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6959      	ldr	r1, [r3, #20]
 80048b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048bc:	b29b      	uxth	r3, r3
 80048be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80048c2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80048c6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80048ca:	6800      	ldr	r0, [r0, #0]
 80048cc:	f001 fb49 	bl	8005f62 <USB_WritePMA>
            ep->xfer_buff += len;
 80048d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e0:	441a      	add	r2, r3
 80048e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80048ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6a1a      	ldr	r2, [r3, #32]
 80048fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	429a      	cmp	r2, r3
 8004908:	d90f      	bls.n	800492a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800490a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800490e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6a1a      	ldr	r2, [r3, #32]
 8004916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800491a:	1ad2      	subs	r2, r2, r3
 800491c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	621a      	str	r2, [r3, #32]
 8004928:	e00e      	b.n	8004948 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800492a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800492e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800493a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800493e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2200      	movs	r2, #0
 8004946:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800494c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	785b      	ldrb	r3, [r3, #1]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d177      	bne.n	8004a48 <USB_EPStartXfer+0x4c4>
 8004958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800495c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004968:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004972:	b29b      	uxth	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	4413      	add	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	011a      	lsls	r2, r3, #4
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	4413      	add	r3, r2
 800498e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	b29b      	uxth	r3, r3
 800499a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800499e:	b29a      	uxth	r2, r3
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	801a      	strh	r2, [r3, #0]
 80049a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80049aa:	d921      	bls.n	80049f0 <USB_EPStartXfer+0x46c>
 80049ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80049b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d104      	bne.n	80049cc <USB_EPStartXfer+0x448>
 80049c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049c6:	3b01      	subs	r3, #1
 80049c8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	029b      	lsls	r3, r3, #10
 80049da:	b29b      	uxth	r3, r3
 80049dc:	4313      	orrs	r3, r2
 80049de:	b29b      	uxth	r3, r3
 80049e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	801a      	strh	r2, [r3, #0]
 80049ee:	e056      	b.n	8004a9e <USB_EPStartXfer+0x51a>
 80049f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <USB_EPStartXfer+0x48a>
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	801a      	strh	r2, [r3, #0]
 8004a0c:	e047      	b.n	8004a9e <USB_EPStartXfer+0x51a>
 8004a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a12:	085b      	lsrs	r3, r3, #1
 8004a14:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d004      	beq.n	8004a2e <USB_EPStartXfer+0x4aa>
 8004a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a28:	3301      	adds	r3, #1
 8004a2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	029b      	lsls	r3, r3, #10
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	801a      	strh	r2, [r3, #0]
 8004a46:	e02a      	b.n	8004a9e <USB_EPStartXfer+0x51a>
 8004a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	785b      	ldrb	r3, [r3, #1]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d122      	bne.n	8004a9e <USB_EPStartXfer+0x51a>
 8004a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	623b      	str	r3, [r7, #32]
 8004a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	461a      	mov	r2, r3
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	4413      	add	r3, r2
 8004a7a:	623b      	str	r3, [r7, #32]
 8004a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	011a      	lsls	r2, r3, #4
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a92:	61fb      	str	r3, [r7, #28]
 8004a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	891b      	ldrh	r3, [r3, #8]
 8004aaa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ab2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6959      	ldr	r1, [r3, #20]
 8004aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004ac4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004ac8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004acc:	6800      	ldr	r0, [r0, #0]
 8004ace:	f001 fa48 	bl	8005f62 <USB_WritePMA>
 8004ad2:	e3ee      	b.n	80052b2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	785b      	ldrb	r3, [r3, #1]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d177      	bne.n	8004bd4 <USB_EPStartXfer+0x650>
 8004ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ae8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004af4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	461a      	mov	r2, r3
 8004b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b04:	4413      	add	r3, r2
 8004b06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	011a      	lsls	r2, r3, #4
 8004b16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b18:	4413      	add	r3, r2
 8004b1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b2e:	801a      	strh	r2, [r3, #0]
 8004b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b34:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b36:	d921      	bls.n	8004b7c <USB_EPStartXfer+0x5f8>
 8004b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b3c:	095b      	lsrs	r3, r3, #5
 8004b3e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b46:	f003 031f 	and.w	r3, r3, #31
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d104      	bne.n	8004b58 <USB_EPStartXfer+0x5d4>
 8004b4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b52:	3b01      	subs	r3, #1
 8004b54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	029b      	lsls	r3, r3, #10
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b78:	801a      	strh	r2, [r3, #0]
 8004b7a:	e056      	b.n	8004c2a <USB_EPStartXfer+0x6a6>
 8004b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10a      	bne.n	8004b9a <USB_EPStartXfer+0x616>
 8004b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b96:	801a      	strh	r2, [r3, #0]
 8004b98:	e047      	b.n	8004c2a <USB_EPStartXfer+0x6a6>
 8004b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b9e:	085b      	lsrs	r3, r3, #1
 8004ba0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d004      	beq.n	8004bba <USB_EPStartXfer+0x636>
 8004bb0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004bba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	029b      	lsls	r3, r3, #10
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bd0:	801a      	strh	r2, [r3, #0]
 8004bd2:	e02a      	b.n	8004c2a <USB_EPStartXfer+0x6a6>
 8004bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	785b      	ldrb	r3, [r3, #1]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d122      	bne.n	8004c2a <USB_EPStartXfer+0x6a6>
 8004be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004be8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	461a      	mov	r2, r3
 8004c02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c04:	4413      	add	r3, r2
 8004c06:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	011a      	lsls	r2, r3, #4
 8004c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c18:	4413      	add	r3, r2
 8004c1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	891b      	ldrh	r3, [r3, #8]
 8004c36:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6959      	ldr	r1, [r3, #20]
 8004c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004c50:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004c54:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004c58:	6800      	ldr	r0, [r0, #0]
 8004c5a:	f001 f982 	bl	8005f62 <USB_WritePMA>
            ep->xfer_buff += len;
 8004c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695a      	ldr	r2, [r3, #20]
 8004c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c6e:	441a      	add	r2, r3
 8004c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a1a      	ldr	r2, [r3, #32]
 8004c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d90f      	bls.n	8004cb8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6a1a      	ldr	r2, [r3, #32]
 8004ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ca8:	1ad2      	subs	r2, r2, r3
 8004caa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	621a      	str	r2, [r3, #32]
 8004cb6:	e00e      	b.n	8004cd6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	785b      	ldrb	r3, [r3, #1]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d177      	bne.n	8004de2 <USB_EPStartXfer+0x85e>
 8004cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d12:	4413      	add	r3, r2
 8004d14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	011a      	lsls	r2, r3, #4
 8004d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d26:	4413      	add	r3, r2
 8004d28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d3c:	801a      	strh	r2, [r3, #0]
 8004d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d42:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d44:	d921      	bls.n	8004d8a <USB_EPStartXfer+0x806>
 8004d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d104      	bne.n	8004d66 <USB_EPStartXfer+0x7e2>
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d60:	3b01      	subs	r3, #1
 8004d62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	029b      	lsls	r3, r3, #10
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	4313      	orrs	r3, r2
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d86:	801a      	strh	r2, [r3, #0]
 8004d88:	e050      	b.n	8004e2c <USB_EPStartXfer+0x8a8>
 8004d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10a      	bne.n	8004da8 <USB_EPStartXfer+0x824>
 8004d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da4:	801a      	strh	r2, [r3, #0]
 8004da6:	e041      	b.n	8004e2c <USB_EPStartXfer+0x8a8>
 8004da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d004      	beq.n	8004dc8 <USB_EPStartXfer+0x844>
 8004dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	029b      	lsls	r3, r3, #10
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dde:	801a      	strh	r2, [r3, #0]
 8004de0:	e024      	b.n	8004e2c <USB_EPStartXfer+0x8a8>
 8004de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004de6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	785b      	ldrb	r3, [r3, #1]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d11c      	bne.n	8004e2c <USB_EPStartXfer+0x8a8>
 8004df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004df6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	461a      	mov	r2, r3
 8004e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e06:	4413      	add	r3, r2
 8004e08:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	011a      	lsls	r2, r3, #4
 8004e18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e2a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	895b      	ldrh	r3, [r3, #10]
 8004e38:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6959      	ldr	r1, [r3, #20]
 8004e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004e52:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004e56:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004e5a:	6800      	ldr	r0, [r0, #0]
 8004e5c:	f001 f881 	bl	8005f62 <USB_WritePMA>
 8004e60:	e227      	b.n	80052b2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004e94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e98:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ea0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	441a      	add	r2, r3
 8004eb6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004eba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ebe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ede:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004eee:	4413      	add	r3, r2
 8004ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	011a      	lsls	r2, r3, #4
 8004f00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f02:	4413      	add	r3, r2
 8004f04:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004f08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f12:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	891b      	ldrh	r3, [r3, #8]
 8004f20:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6959      	ldr	r1, [r3, #20]
 8004f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004f3a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004f3e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004f42:	6800      	ldr	r0, [r0, #0]
 8004f44:	f001 f80d 	bl	8005f62 <USB_WritePMA>
 8004f48:	e1b3      	b.n	80052b2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6a1a      	ldr	r2, [r3, #32]
 8004f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5a:	1ad2      	subs	r2, r2, r3
 8004f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 80c6 	beq.w	800511c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	785b      	ldrb	r3, [r3, #1]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d177      	bne.n	800509c <USB_EPStartXfer+0xb18>
 8004fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fcc:	4413      	add	r3, r2
 8004fce:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	011a      	lsls	r2, r3, #4
 8004fde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004fe6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fe8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ff6:	801a      	strh	r2, [r3, #0]
 8004ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ffc:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ffe:	d921      	bls.n	8005044 <USB_EPStartXfer+0xac0>
 8005000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005004:	095b      	lsrs	r3, r3, #5
 8005006:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800500a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	2b00      	cmp	r3, #0
 8005014:	d104      	bne.n	8005020 <USB_EPStartXfer+0xa9c>
 8005016:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800501a:	3b01      	subs	r3, #1
 800501c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	b29a      	uxth	r2, r3
 8005026:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800502a:	b29b      	uxth	r3, r3
 800502c:	029b      	lsls	r3, r3, #10
 800502e:	b29b      	uxth	r3, r3
 8005030:	4313      	orrs	r3, r2
 8005032:	b29b      	uxth	r3, r3
 8005034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800503c:	b29a      	uxth	r2, r3
 800503e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005040:	801a      	strh	r2, [r3, #0]
 8005042:	e050      	b.n	80050e6 <USB_EPStartXfer+0xb62>
 8005044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10a      	bne.n	8005062 <USB_EPStartXfer+0xade>
 800504c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b29b      	uxth	r3, r3
 8005052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800505a:	b29a      	uxth	r2, r3
 800505c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800505e:	801a      	strh	r2, [r3, #0]
 8005060:	e041      	b.n	80050e6 <USB_EPStartXfer+0xb62>
 8005062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005066:	085b      	lsrs	r3, r3, #1
 8005068:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800506c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d004      	beq.n	8005082 <USB_EPStartXfer+0xafe>
 8005078:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800507c:	3301      	adds	r3, #1
 800507e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005082:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	b29a      	uxth	r2, r3
 8005088:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800508c:	b29b      	uxth	r3, r3
 800508e:	029b      	lsls	r3, r3, #10
 8005090:	b29b      	uxth	r3, r3
 8005092:	4313      	orrs	r3, r2
 8005094:	b29a      	uxth	r2, r3
 8005096:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005098:	801a      	strh	r2, [r3, #0]
 800509a:	e024      	b.n	80050e6 <USB_EPStartXfer+0xb62>
 800509c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	785b      	ldrb	r3, [r3, #1]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d11c      	bne.n	80050e6 <USB_EPStartXfer+0xb62>
 80050ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050c0:	4413      	add	r3, r2
 80050c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80050c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	011a      	lsls	r2, r3, #4
 80050d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050d4:	4413      	add	r3, r2
 80050d6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80050e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	895b      	ldrh	r3, [r3, #10]
 80050f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6959      	ldr	r1, [r3, #20]
 8005102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005106:	b29b      	uxth	r3, r3
 8005108:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800510c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005110:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005114:	6800      	ldr	r0, [r0, #0]
 8005116:	f000 ff24 	bl	8005f62 <USB_WritePMA>
 800511a:	e0ca      	b.n	80052b2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800511c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	785b      	ldrb	r3, [r3, #1]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d177      	bne.n	800521c <USB_EPStartXfer+0xc98>
 800512c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005130:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800513c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005146:	b29b      	uxth	r3, r3
 8005148:	461a      	mov	r2, r3
 800514a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800514c:	4413      	add	r3, r2
 800514e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	011a      	lsls	r2, r3, #4
 800515e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005160:	4413      	add	r3, r2
 8005162:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005166:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005168:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	b29b      	uxth	r3, r3
 800516e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005172:	b29a      	uxth	r2, r3
 8005174:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005176:	801a      	strh	r2, [r3, #0]
 8005178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800517c:	2b3e      	cmp	r3, #62	@ 0x3e
 800517e:	d921      	bls.n	80051c4 <USB_EPStartXfer+0xc40>
 8005180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005184:	095b      	lsrs	r3, r3, #5
 8005186:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800518a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800518e:	f003 031f 	and.w	r3, r3, #31
 8005192:	2b00      	cmp	r3, #0
 8005194:	d104      	bne.n	80051a0 <USB_EPStartXfer+0xc1c>
 8005196:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800519a:	3b01      	subs	r3, #1
 800519c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80051a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	029b      	lsls	r3, r3, #10
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	4313      	orrs	r3, r2
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051bc:	b29a      	uxth	r2, r3
 80051be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051c0:	801a      	strh	r2, [r3, #0]
 80051c2:	e05c      	b.n	800527e <USB_EPStartXfer+0xcfa>
 80051c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <USB_EPStartXfer+0xc5e>
 80051cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051da:	b29a      	uxth	r2, r3
 80051dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051de:	801a      	strh	r2, [r3, #0]
 80051e0:	e04d      	b.n	800527e <USB_EPStartXfer+0xcfa>
 80051e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051e6:	085b      	lsrs	r3, r3, #1
 80051e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80051ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d004      	beq.n	8005202 <USB_EPStartXfer+0xc7e>
 80051f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80051fc:	3301      	adds	r3, #1
 80051fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005202:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	b29a      	uxth	r2, r3
 8005208:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800520c:	b29b      	uxth	r3, r3
 800520e:	029b      	lsls	r3, r3, #10
 8005210:	b29b      	uxth	r3, r3
 8005212:	4313      	orrs	r3, r2
 8005214:	b29a      	uxth	r2, r3
 8005216:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005218:	801a      	strh	r2, [r3, #0]
 800521a:	e030      	b.n	800527e <USB_EPStartXfer+0xcfa>
 800521c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	785b      	ldrb	r3, [r3, #1]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d128      	bne.n	800527e <USB_EPStartXfer+0xcfa>
 800522c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005230:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800523a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800523e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005248:	b29b      	uxth	r3, r3
 800524a:	461a      	mov	r2, r3
 800524c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005250:	4413      	add	r3, r2
 8005252:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800525a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	011a      	lsls	r2, r3, #4
 8005264:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005268:	4413      	add	r3, r2
 800526a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800526e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005276:	b29a      	uxth	r2, r3
 8005278:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800527c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800527e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	891b      	ldrh	r3, [r3, #8]
 800528a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800528e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6959      	ldr	r1, [r3, #20]
 800529a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80052a4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80052a8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80052ac:	6800      	ldr	r0, [r0, #0]
 80052ae:	f000 fe58 	bl	8005f62 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80052b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052d8:	817b      	strh	r3, [r7, #10]
 80052da:	897b      	ldrh	r3, [r7, #10]
 80052dc:	f083 0310 	eor.w	r3, r3, #16
 80052e0:	817b      	strh	r3, [r7, #10]
 80052e2:	897b      	ldrh	r3, [r7, #10]
 80052e4:	f083 0320 	eor.w	r3, r3, #32
 80052e8:	817b      	strh	r3, [r7, #10]
 80052ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	441a      	add	r2, r3
 8005304:	897b      	ldrh	r3, [r7, #10]
 8005306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800530a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800530e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005316:	b29b      	uxth	r3, r3
 8005318:	8013      	strh	r3, [r2, #0]
 800531a:	f000 bcde 	b.w	8005cda <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800531e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	7b1b      	ldrb	r3, [r3, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f040 80bb 	bne.w	80054a6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	699a      	ldr	r2, [r3, #24]
 800533c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	429a      	cmp	r2, r3
 800534a:	d917      	bls.n	800537c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800534c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800535c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	699a      	ldr	r2, [r3, #24]
 8005368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536c:	1ad2      	subs	r2, r2, r3
 800536e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005372:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	619a      	str	r2, [r3, #24]
 800537a:	e00e      	b.n	800539a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800537c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800538c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2200      	movs	r2, #0
 8005398:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800539a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800539e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	461a      	mov	r2, r3
 80053ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053be:	4413      	add	r3, r2
 80053c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	011a      	lsls	r2, r3, #4
 80053d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053d6:	4413      	add	r3, r2
 80053d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80053dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80053e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053f2:	801a      	strh	r2, [r3, #0]
 80053f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80053fa:	d924      	bls.n	8005446 <USB_EPStartXfer+0xec2>
 80053fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800540a:	f003 031f 	and.w	r3, r3, #31
 800540e:	2b00      	cmp	r3, #0
 8005410:	d104      	bne.n	800541c <USB_EPStartXfer+0xe98>
 8005412:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005416:	3b01      	subs	r3, #1
 8005418:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800541c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b29a      	uxth	r2, r3
 8005424:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005428:	b29b      	uxth	r3, r3
 800542a:	029b      	lsls	r3, r3, #10
 800542c:	b29b      	uxth	r3, r3
 800542e:	4313      	orrs	r3, r2
 8005430:	b29b      	uxth	r3, r3
 8005432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800543a:	b29a      	uxth	r2, r3
 800543c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005440:	801a      	strh	r2, [r3, #0]
 8005442:	f000 bc10 	b.w	8005c66 <USB_EPStartXfer+0x16e2>
 8005446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10c      	bne.n	8005468 <USB_EPStartXfer+0xee4>
 800544e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29b      	uxth	r3, r3
 8005456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800545a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545e:	b29a      	uxth	r2, r3
 8005460:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005464:	801a      	strh	r2, [r3, #0]
 8005466:	e3fe      	b.n	8005c66 <USB_EPStartXfer+0x16e2>
 8005468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800546c:	085b      	lsrs	r3, r3, #1
 800546e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d004      	beq.n	8005488 <USB_EPStartXfer+0xf04>
 800547e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005482:	3301      	adds	r3, #1
 8005484:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005488:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	b29a      	uxth	r2, r3
 8005490:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005494:	b29b      	uxth	r3, r3
 8005496:	029b      	lsls	r3, r3, #10
 8005498:	b29b      	uxth	r3, r3
 800549a:	4313      	orrs	r3, r2
 800549c:	b29a      	uxth	r2, r3
 800549e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054a2:	801a      	strh	r2, [r3, #0]
 80054a4:	e3df      	b.n	8005c66 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80054a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	78db      	ldrb	r3, [r3, #3]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	f040 8218 	bne.w	80058e8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80054b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	785b      	ldrb	r3, [r3, #1]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f040 809d 	bne.w	8005604 <USB_EPStartXfer+0x1080>
 80054ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054ee:	4413      	add	r3, r2
 80054f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	011a      	lsls	r2, r3, #4
 8005502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005506:	4413      	add	r3, r2
 8005508:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800550c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005510:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	b29b      	uxth	r3, r3
 8005518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800551c:	b29a      	uxth	r2, r3
 800551e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005522:	801a      	strh	r2, [r3, #0]
 8005524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	2b3e      	cmp	r3, #62	@ 0x3e
 8005532:	d92b      	bls.n	800558c <USB_EPStartXfer+0x1008>
 8005534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	095b      	lsrs	r3, r3, #5
 8005542:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800554a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	2b00      	cmp	r3, #0
 8005558:	d104      	bne.n	8005564 <USB_EPStartXfer+0xfe0>
 800555a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800555e:	3b01      	subs	r3, #1
 8005560:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005564:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	b29a      	uxth	r2, r3
 800556c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005570:	b29b      	uxth	r3, r3
 8005572:	029b      	lsls	r3, r3, #10
 8005574:	b29b      	uxth	r3, r3
 8005576:	4313      	orrs	r3, r2
 8005578:	b29b      	uxth	r3, r3
 800557a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800557e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005582:	b29a      	uxth	r2, r3
 8005584:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005588:	801a      	strh	r2, [r3, #0]
 800558a:	e070      	b.n	800566e <USB_EPStartXfer+0x10ea>
 800558c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10c      	bne.n	80055b6 <USB_EPStartXfer+0x1032>
 800559c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80055b2:	801a      	strh	r2, [r3, #0]
 80055b4:	e05b      	b.n	800566e <USB_EPStartXfer+0x10ea>
 80055b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	085b      	lsrs	r3, r3, #1
 80055c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d004      	beq.n	80055e6 <USB_EPStartXfer+0x1062>
 80055dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e0:	3301      	adds	r3, #1
 80055e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	029b      	lsls	r3, r3, #10
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	4313      	orrs	r3, r2
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005600:	801a      	strh	r2, [r3, #0]
 8005602:	e034      	b.n	800566e <USB_EPStartXfer+0x10ea>
 8005604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d12c      	bne.n	800566e <USB_EPStartXfer+0x10ea>
 8005614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005618:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005626:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005630:	b29b      	uxth	r3, r3
 8005632:	461a      	mov	r2, r3
 8005634:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005638:	4413      	add	r3, r2
 800563a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800563e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	011a      	lsls	r2, r3, #4
 800564c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005650:	4413      	add	r3, r2
 8005652:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005656:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800565a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800565e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	b29a      	uxth	r2, r3
 8005668:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005672:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800567c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	2b00      	cmp	r3, #0
 800568a:	f040 809d 	bne.w	80057c8 <USB_EPStartXfer+0x1244>
 800568e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005692:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800569c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	461a      	mov	r2, r3
 80056ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056b2:	4413      	add	r3, r2
 80056b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	011a      	lsls	r2, r3, #4
 80056c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056ca:	4413      	add	r3, r2
 80056cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80056d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056e6:	801a      	strh	r2, [r3, #0]
 80056e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80056f6:	d92b      	bls.n	8005750 <USB_EPStartXfer+0x11cc>
 80056f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	095b      	lsrs	r3, r3, #5
 8005706:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800570a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800570e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	2b00      	cmp	r3, #0
 800571c:	d104      	bne.n	8005728 <USB_EPStartXfer+0x11a4>
 800571e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005722:	3b01      	subs	r3, #1
 8005724:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005728:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	b29a      	uxth	r2, r3
 8005730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005734:	b29b      	uxth	r3, r3
 8005736:	029b      	lsls	r3, r3, #10
 8005738:	b29b      	uxth	r3, r3
 800573a:	4313      	orrs	r3, r2
 800573c:	b29b      	uxth	r3, r3
 800573e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005746:	b29a      	uxth	r2, r3
 8005748:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800574c:	801a      	strh	r2, [r3, #0]
 800574e:	e069      	b.n	8005824 <USB_EPStartXfer+0x12a0>
 8005750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10c      	bne.n	800577a <USB_EPStartXfer+0x11f6>
 8005760:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005764:	881b      	ldrh	r3, [r3, #0]
 8005766:	b29b      	uxth	r3, r3
 8005768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800576c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005770:	b29a      	uxth	r2, r3
 8005772:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005776:	801a      	strh	r2, [r3, #0]
 8005778:	e054      	b.n	8005824 <USB_EPStartXfer+0x12a0>
 800577a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800577e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	085b      	lsrs	r3, r3, #1
 8005788:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800578c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <USB_EPStartXfer+0x1226>
 80057a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057a4:	3301      	adds	r3, #1
 80057a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80057aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	029b      	lsls	r3, r3, #10
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	4313      	orrs	r3, r2
 80057be:	b29a      	uxth	r2, r3
 80057c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80057c4:	801a      	strh	r2, [r3, #0]
 80057c6:	e02d      	b.n	8005824 <USB_EPStartXfer+0x12a0>
 80057c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	785b      	ldrb	r3, [r3, #1]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d125      	bne.n	8005824 <USB_EPStartXfer+0x12a0>
 80057d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	461a      	mov	r2, r3
 80057ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80057ee:	4413      	add	r3, r2
 80057f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80057f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	011a      	lsls	r2, r3, #4
 8005802:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005806:	4413      	add	r3, r2
 8005808:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800580c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	b29a      	uxth	r2, r3
 800581e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005822:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 8218 	beq.w	8005c66 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005856:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800585a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <USB_EPStartXfer+0x12ea>
 8005862:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10d      	bne.n	800588a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800586e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005876:	2b00      	cmp	r3, #0
 8005878:	f040 81f5 	bne.w	8005c66 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800587c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	f040 81ee 	bne.w	8005c66 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800588a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058b0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80058b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	441a      	add	r2, r3
 80058ce:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80058d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	8013      	strh	r3, [r2, #0]
 80058e6:	e1be      	b.n	8005c66 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80058e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	78db      	ldrb	r3, [r3, #3]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	f040 81b4 	bne.w	8005c62 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80058fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800590a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	429a      	cmp	r2, r3
 8005914:	d917      	bls.n	8005946 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800591a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800592a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005936:	1ad2      	subs	r2, r2, r3
 8005938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	619a      	str	r2, [r3, #24]
 8005944:	e00e      	b.n	8005964 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2200      	movs	r2, #0
 8005962:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	785b      	ldrb	r3, [r3, #1]
 8005970:	2b00      	cmp	r3, #0
 8005972:	f040 8085 	bne.w	8005a80 <USB_EPStartXfer+0x14fc>
 8005976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800597a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005988:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005992:	b29b      	uxth	r3, r3
 8005994:	461a      	mov	r2, r3
 8005996:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800599a:	4413      	add	r3, r2
 800599c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	011a      	lsls	r2, r3, #4
 80059ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059b2:	4413      	add	r3, r2
 80059b4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80059ce:	801a      	strh	r2, [r3, #0]
 80059d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80059d6:	d923      	bls.n	8005a20 <USB_EPStartXfer+0x149c>
 80059d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059dc:	095b      	lsrs	r3, r3, #5
 80059de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80059e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d104      	bne.n	80059f8 <USB_EPStartXfer+0x1474>
 80059ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059f2:	3b01      	subs	r3, #1
 80059f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80059f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	029b      	lsls	r3, r3, #10
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a1c:	801a      	strh	r2, [r3, #0]
 8005a1e:	e060      	b.n	8005ae2 <USB_EPStartXfer+0x155e>
 8005a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10c      	bne.n	8005a42 <USB_EPStartXfer+0x14be>
 8005a28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a3e:	801a      	strh	r2, [r3, #0]
 8005a40:	e04f      	b.n	8005ae2 <USB_EPStartXfer+0x155e>
 8005a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d004      	beq.n	8005a62 <USB_EPStartXfer+0x14de>
 8005a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005a62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	029b      	lsls	r3, r3, #10
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	4313      	orrs	r3, r2
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a7c:	801a      	strh	r2, [r3, #0]
 8005a7e:	e030      	b.n	8005ae2 <USB_EPStartXfer+0x155e>
 8005a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	785b      	ldrb	r3, [r3, #1]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d128      	bne.n	8005ae2 <USB_EPStartXfer+0x155e>
 8005a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	011a      	lsls	r2, r3, #4
 8005ac8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005acc:	4413      	add	r3, r2
 8005ace:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ad2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005ae0:	801a      	strh	r2, [r3, #0]
 8005ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	785b      	ldrb	r3, [r3, #1]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f040 8085 	bne.w	8005c0c <USB_EPStartXfer+0x1688>
 8005b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	461a      	mov	r2, r3
 8005b22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005b26:	4413      	add	r3, r2
 8005b28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	011a      	lsls	r2, r3, #4
 8005b3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005b3e:	4413      	add	r3, r2
 8005b40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b5a:	801a      	strh	r2, [r3, #0]
 8005b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b60:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b62:	d923      	bls.n	8005bac <USB_EPStartXfer+0x1628>
 8005b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b68:	095b      	lsrs	r3, r3, #5
 8005b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b72:	f003 031f 	and.w	r3, r3, #31
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d104      	bne.n	8005b84 <USB_EPStartXfer+0x1600>
 8005b7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	029b      	lsls	r3, r3, #10
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	4313      	orrs	r3, r2
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ba8:	801a      	strh	r2, [r3, #0]
 8005baa:	e05c      	b.n	8005c66 <USB_EPStartXfer+0x16e2>
 8005bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10c      	bne.n	8005bce <USB_EPStartXfer+0x164a>
 8005bb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005bca:	801a      	strh	r2, [r3, #0]
 8005bcc:	e04b      	b.n	8005c66 <USB_EPStartXfer+0x16e2>
 8005bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd2:	085b      	lsrs	r3, r3, #1
 8005bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d004      	beq.n	8005bee <USB_EPStartXfer+0x166a>
 8005be4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005be8:	3301      	adds	r3, #1
 8005bea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005bee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	029b      	lsls	r3, r3, #10
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	4313      	orrs	r3, r2
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c08:	801a      	strh	r2, [r3, #0]
 8005c0a:	e02c      	b.n	8005c66 <USB_EPStartXfer+0x16e2>
 8005c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d124      	bne.n	8005c66 <USB_EPStartXfer+0x16e2>
 8005c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c32:	4413      	add	r3, r2
 8005c34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	011a      	lsls	r2, r3, #4
 8005c46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005c5e:	801a      	strh	r2, [r3, #0]
 8005c60:	e001      	b.n	8005c66 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e03a      	b.n	8005cdc <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c8c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005c90:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005c94:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005c98:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005c9c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005ca0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ca4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	441a      	add	r2, r3
 8005cc2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005cc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b085      	sub	sp, #20
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d020      	beq.n	8005d3a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d0e:	81bb      	strh	r3, [r7, #12]
 8005d10:	89bb      	ldrh	r3, [r7, #12]
 8005d12:	f083 0310 	eor.w	r3, r3, #16
 8005d16:	81bb      	strh	r3, [r7, #12]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	441a      	add	r2, r3
 8005d22:	89bb      	ldrh	r3, [r7, #12]
 8005d24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	8013      	strh	r3, [r2, #0]
 8005d38:	e01f      	b.n	8005d7a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d50:	81fb      	strh	r3, [r7, #14]
 8005d52:	89fb      	ldrh	r3, [r7, #14]
 8005d54:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005d58:	81fb      	strh	r3, [r7, #14]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	441a      	add	r2, r3
 8005d64:	89fb      	ldrh	r3, [r7, #14]
 8005d66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr

08005d86 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b087      	sub	sp, #28
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	7b1b      	ldrb	r3, [r3, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f040 809d 	bne.w	8005ed4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	785b      	ldrb	r3, [r3, #1]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d04c      	beq.n	8005e3c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	823b      	strh	r3, [r7, #16]
 8005db0:	8a3b      	ldrh	r3, [r7, #16]
 8005db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d01b      	beq.n	8005df2 <USB_EPClearStall+0x6c>
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd0:	81fb      	strh	r3, [r7, #14]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	441a      	add	r2, r3
 8005ddc:	89fb      	ldrh	r3, [r7, #14]
 8005dde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005de2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005de6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	78db      	ldrb	r3, [r3, #3]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d06c      	beq.n	8005ed4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e10:	81bb      	strh	r3, [r7, #12]
 8005e12:	89bb      	ldrh	r3, [r7, #12]
 8005e14:	f083 0320 	eor.w	r3, r3, #32
 8005e18:	81bb      	strh	r3, [r7, #12]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	441a      	add	r2, r3
 8005e24:	89bb      	ldrh	r3, [r7, #12]
 8005e26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	8013      	strh	r3, [r2, #0]
 8005e3a:	e04b      	b.n	8005ed4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	82fb      	strh	r3, [r7, #22]
 8005e4a:	8afb      	ldrh	r3, [r7, #22]
 8005e4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01b      	beq.n	8005e8c <USB_EPClearStall+0x106>
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6a:	82bb      	strh	r3, [r7, #20]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	441a      	add	r2, r3
 8005e76:	8abb      	ldrh	r3, [r7, #20]
 8005e78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ea2:	827b      	strh	r3, [r7, #18]
 8005ea4:	8a7b      	ldrh	r3, [r7, #18]
 8005ea6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005eaa:	827b      	strh	r3, [r7, #18]
 8005eac:	8a7b      	ldrh	r3, [r7, #18]
 8005eae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005eb2:	827b      	strh	r3, [r7, #18]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	441a      	add	r2, r3
 8005ebe:	8a7b      	ldrh	r3, [r7, #18]
 8005ec0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ec4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ec8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bc80      	pop	{r7}
 8005ede:	4770      	bx	lr

08005ee0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d103      	bne.n	8005efa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2280      	movs	r2, #128	@ 0x80
 8005ef6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bc80      	pop	{r7}
 8005f04:	4770      	bx	lr

08005f06 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bc80      	pop	{r7}
 8005f18:	4770      	bx	lr

08005f1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bc80      	pop	{r7}
 8005f2c:	4770      	bx	lr

08005f2e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b085      	sub	sp, #20
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005f40:	68fb      	ldr	r3, [r7, #12]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr

08005f4c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bc80      	pop	{r7}
 8005f60:	4770      	bx	lr

08005f62 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b08b      	sub	sp, #44	@ 0x2c
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	461a      	mov	r2, r3
 8005f70:	460b      	mov	r3, r1
 8005f72:	80fb      	strh	r3, [r7, #6]
 8005f74:	4613      	mov	r3, r2
 8005f76:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005f78:	88bb      	ldrh	r3, [r7, #4]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	085b      	lsrs	r3, r3, #1
 8005f7e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005f88:	88fb      	ldrh	r3, [r7, #6]
 8005f8a:	005a      	lsls	r2, r3, #1
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f94:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f9a:	e01e      	b.n	8005fda <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	021b      	lsls	r3, r3, #8
 8005faa:	b21a      	sxth	r2, r3
 8005fac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	b21b      	sxth	r3, r3
 8005fb4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	8a7a      	ldrh	r2, [r7, #18]
 8005fba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	3302      	adds	r3, #2
 8005fc0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	3302      	adds	r3, #2
 8005fc6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1dd      	bne.n	8005f9c <USB_WritePMA+0x3a>
  }
}
 8005fe0:	bf00      	nop
 8005fe2:	bf00      	nop
 8005fe4:	372c      	adds	r7, #44	@ 0x2c
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bc80      	pop	{r7}
 8005fea:	4770      	bx	lr

08005fec <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b08b      	sub	sp, #44	@ 0x2c
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	80fb      	strh	r3, [r7, #6]
 8005ffe:	4613      	mov	r3, r2
 8006000:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006002:	88bb      	ldrh	r3, [r7, #4]
 8006004:	085b      	lsrs	r3, r3, #1
 8006006:	b29b      	uxth	r3, r3
 8006008:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006012:	88fb      	ldrh	r3, [r7, #6]
 8006014:	005a      	lsls	r2, r3, #1
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800601e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	627b      	str	r3, [r7, #36]	@ 0x24
 8006024:	e01b      	b.n	800605e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	b29b      	uxth	r3, r3
 800602c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	3302      	adds	r3, #2
 8006032:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	b2da      	uxtb	r2, r3
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	3301      	adds	r3, #1
 8006040:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	0a1b      	lsrs	r3, r3, #8
 8006046:	b2da      	uxtb	r2, r3
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	3301      	adds	r3, #1
 8006050:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	3302      	adds	r3, #2
 8006056:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	3b01      	subs	r3, #1
 800605c:	627b      	str	r3, [r7, #36]	@ 0x24
 800605e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e0      	bne.n	8006026 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006064:	88bb      	ldrh	r3, [r7, #4]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	b29b      	uxth	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d007      	beq.n	8006080 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	b29b      	uxth	r3, r3
 8006076:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	b2da      	uxtb	r2, r3
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	701a      	strb	r2, [r3, #0]
  }
}
 8006080:	bf00      	nop
 8006082:	372c      	adds	r7, #44	@ 0x2c
 8006084:	46bd      	mov	sp, r7
 8006086:	bc80      	pop	{r7}
 8006088:	4770      	bx	lr

0800608a <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	460b      	mov	r3, r1
 8006094:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006096:	2304      	movs	r3, #4
 8006098:	2203      	movs	r2, #3
 800609a:	2181      	movs	r1, #129	@ 0x81
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 fc80 	bl	80079a2 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80060a8:	2010      	movs	r0, #16
 80060aa:	f001 fd8f 	bl	8007bcc <USBD_static_malloc>
 80060ae:	4602      	mov	r2, r0
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80060c0:	2302      	movs	r3, #2
 80060c2:	e005      	b.n	80060d0 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060ca:	2200      	movs	r2, #0
 80060cc:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80060e4:	2181      	movs	r1, #129	@ 0x81
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f001 fc81 	bl	80079ee <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d009      	beq.n	8006110 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006102:	4618      	mov	r0, r3
 8006104:	f001 fd6e 	bl	8007be4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800612c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006132:	2300      	movs	r3, #0
 8006134:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006146:	2b00      	cmp	r3, #0
 8006148:	d045      	beq.n	80061d6 <USBD_HID_Setup+0xba>
 800614a:	2b20      	cmp	r3, #32
 800614c:	f040 80d3 	bne.w	80062f6 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	785b      	ldrb	r3, [r3, #1]
 8006154:	3b02      	subs	r3, #2
 8006156:	2b09      	cmp	r3, #9
 8006158:	d835      	bhi.n	80061c6 <USBD_HID_Setup+0xaa>
 800615a:	a201      	add	r2, pc, #4	@ (adr r2, 8006160 <USBD_HID_Setup+0x44>)
 800615c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006160:	080061b7 	.word	0x080061b7
 8006164:	08006197 	.word	0x08006197
 8006168:	080061c7 	.word	0x080061c7
 800616c:	080061c7 	.word	0x080061c7
 8006170:	080061c7 	.word	0x080061c7
 8006174:	080061c7 	.word	0x080061c7
 8006178:	080061c7 	.word	0x080061c7
 800617c:	080061c7 	.word	0x080061c7
 8006180:	080061a5 	.word	0x080061a5
 8006184:	08006189 	.word	0x08006189
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	885b      	ldrh	r3, [r3, #2]
 800618c:	b2db      	uxtb	r3, r3
 800618e:	461a      	mov	r2, r3
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	601a      	str	r2, [r3, #0]
          break;
 8006194:	e01e      	b.n	80061d4 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	2201      	movs	r2, #1
 800619a:	4619      	mov	r1, r3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f001 f941 	bl	8007424 <USBD_CtlSendData>
          break;
 80061a2:	e017      	b.n	80061d4 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	885b      	ldrh	r3, [r3, #2]
 80061a8:	0a1b      	lsrs	r3, r3, #8
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	461a      	mov	r2, r3
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	605a      	str	r2, [r3, #4]
          break;
 80061b4:	e00e      	b.n	80061d4 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	3304      	adds	r3, #4
 80061ba:	2201      	movs	r2, #1
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f001 f930 	bl	8007424 <USBD_CtlSendData>
          break;
 80061c4:	e006      	b.n	80061d4 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f001 f8c1 	bl	8007350 <USBD_CtlError>
          ret = USBD_FAIL;
 80061ce:	2302      	movs	r3, #2
 80061d0:	75fb      	strb	r3, [r7, #23]
          break;
 80061d2:	bf00      	nop
      }
      break;
 80061d4:	e096      	b.n	8006304 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	785b      	ldrb	r3, [r3, #1]
 80061da:	2b0b      	cmp	r3, #11
 80061dc:	f200 8083 	bhi.w	80062e6 <USBD_HID_Setup+0x1ca>
 80061e0:	a201      	add	r2, pc, #4	@ (adr r2, 80061e8 <USBD_HID_Setup+0xcc>)
 80061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e6:	bf00      	nop
 80061e8:	08006219 	.word	0x08006219
 80061ec:	080062e7 	.word	0x080062e7
 80061f0:	080062e7 	.word	0x080062e7
 80061f4:	080062e7 	.word	0x080062e7
 80061f8:	080062e7 	.word	0x080062e7
 80061fc:	080062e7 	.word	0x080062e7
 8006200:	08006241 	.word	0x08006241
 8006204:	080062e7 	.word	0x080062e7
 8006208:	080062e7 	.word	0x080062e7
 800620c:	080062e7 	.word	0x080062e7
 8006210:	08006299 	.word	0x08006299
 8006214:	080062c1 	.word	0x080062c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800621e:	2b03      	cmp	r3, #3
 8006220:	d107      	bne.n	8006232 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006222:	f107 030e 	add.w	r3, r7, #14
 8006226:	2202      	movs	r2, #2
 8006228:	4619      	mov	r1, r3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f001 f8fa 	bl	8007424 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006230:	e060      	b.n	80062f4 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006232:	6839      	ldr	r1, [r7, #0]
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f001 f88b 	bl	8007350 <USBD_CtlError>
            ret = USBD_FAIL;
 800623a:	2302      	movs	r3, #2
 800623c:	75fb      	strb	r3, [r7, #23]
          break;
 800623e:	e059      	b.n	80062f4 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	885b      	ldrh	r3, [r3, #2]
 8006244:	0a1b      	lsrs	r3, r3, #8
 8006246:	b29b      	uxth	r3, r3
 8006248:	2b22      	cmp	r3, #34	@ 0x22
 800624a:	d108      	bne.n	800625e <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	88db      	ldrh	r3, [r3, #6]
 8006250:	2b3f      	cmp	r3, #63	@ 0x3f
 8006252:	bf28      	it	cs
 8006254:	233f      	movcs	r3, #63	@ 0x3f
 8006256:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006258:	4b2d      	ldr	r3, [pc, #180]	@ (8006310 <USBD_HID_Setup+0x1f4>)
 800625a:	61bb      	str	r3, [r7, #24]
 800625c:	e015      	b.n	800628a <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	885b      	ldrh	r3, [r3, #2]
 8006262:	0a1b      	lsrs	r3, r3, #8
 8006264:	b29b      	uxth	r3, r3
 8006266:	2b21      	cmp	r3, #33	@ 0x21
 8006268:	d108      	bne.n	800627c <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800626a:	4b2a      	ldr	r3, [pc, #168]	@ (8006314 <USBD_HID_Setup+0x1f8>)
 800626c:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	88db      	ldrh	r3, [r3, #6]
 8006272:	2b09      	cmp	r3, #9
 8006274:	bf28      	it	cs
 8006276:	2309      	movcs	r3, #9
 8006278:	83fb      	strh	r3, [r7, #30]
 800627a:	e006      	b.n	800628a <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f001 f866 	bl	8007350 <USBD_CtlError>
            ret = USBD_FAIL;
 8006284:	2302      	movs	r3, #2
 8006286:	75fb      	strb	r3, [r7, #23]
            break;
 8006288:	e034      	b.n	80062f4 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800628a:	8bfb      	ldrh	r3, [r7, #30]
 800628c:	461a      	mov	r2, r3
 800628e:	69b9      	ldr	r1, [r7, #24]
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f001 f8c7 	bl	8007424 <USBD_CtlSendData>
          break;
 8006296:	e02d      	b.n	80062f4 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d107      	bne.n	80062b2 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	3308      	adds	r3, #8
 80062a6:	2201      	movs	r2, #1
 80062a8:	4619      	mov	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 f8ba 	bl	8007424 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062b0:	e020      	b.n	80062f4 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f001 f84b 	bl	8007350 <USBD_CtlError>
            ret = USBD_FAIL;
 80062ba:	2302      	movs	r3, #2
 80062bc:	75fb      	strb	r3, [r7, #23]
          break;
 80062be:	e019      	b.n	80062f4 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d106      	bne.n	80062d8 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	885b      	ldrh	r3, [r3, #2]
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062d6:	e00d      	b.n	80062f4 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f001 f838 	bl	8007350 <USBD_CtlError>
            ret = USBD_FAIL;
 80062e0:	2302      	movs	r3, #2
 80062e2:	75fb      	strb	r3, [r7, #23]
          break;
 80062e4:	e006      	b.n	80062f4 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f001 f831 	bl	8007350 <USBD_CtlError>
          ret = USBD_FAIL;
 80062ee:	2302      	movs	r3, #2
 80062f0:	75fb      	strb	r3, [r7, #23]
          break;
 80062f2:	bf00      	nop
      }
      break;
 80062f4:	e006      	b.n	8006304 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 f829 	bl	8007350 <USBD_CtlError>
      ret = USBD_FAIL;
 80062fe:	2302      	movs	r3, #2
 8006300:	75fb      	strb	r3, [r7, #23]
      break;
 8006302:	bf00      	nop
  }

  return ret;
 8006304:	7dfb      	ldrb	r3, [r7, #23]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3720      	adds	r7, #32
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	200000c8 	.word	0x200000c8
 8006314:	200000b0 	.word	0x200000b0

08006318 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	4613      	mov	r3, r2
 8006324:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800632c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006334:	2b03      	cmp	r3, #3
 8006336:	d10c      	bne.n	8006352 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	7b1b      	ldrb	r3, [r3, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d108      	bne.n	8006352 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	2201      	movs	r2, #1
 8006344:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8006346:	88fb      	ldrh	r3, [r7, #6]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	2181      	movs	r1, #129	@ 0x81
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f001 fbf6 	bl	8007b3e <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2222      	movs	r2, #34	@ 0x22
 8006368:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800636a:	4b03      	ldr	r3, [pc, #12]	@ (8006378 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800636c:	4618      	mov	r0, r3
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	bc80      	pop	{r7}
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	20000044 	.word	0x20000044

0800637c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2222      	movs	r2, #34	@ 0x22
 8006388:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800638a:	4b03      	ldr	r3, [pc, #12]	@ (8006398 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	bc80      	pop	{r7}
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	20000068 	.word	0x20000068

0800639c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2222      	movs	r2, #34	@ 0x22
 80063a8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80063aa:	4b03      	ldr	r3, [pc, #12]	@ (80063b8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bc80      	pop	{r7}
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	2000008c 	.word	0x2000008c

080063bc <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063ce:	2200      	movs	r2, #0
 80063d0:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	bc80      	pop	{r7}
 80063dc:	4770      	bx	lr
	...

080063e0 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	220a      	movs	r2, #10
 80063ec:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80063ee:	4b03      	ldr	r3, [pc, #12]	@ (80063fc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bc80      	pop	{r7}
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	200000bc 	.word	0x200000bc

08006400 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	4613      	mov	r3, r2
 800640c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006414:	2302      	movs	r3, #2
 8006416:	e01a      	b.n	800644e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	79fa      	ldrb	r2, [r7, #7]
 8006444:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f001 fa48 	bl	80078dc <USBD_LL_Init>

  return USBD_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d006      	beq.n	8006478 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	73fb      	strb	r3, [r7, #15]
 8006476:	e001      	b.n	800647c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006478:	2302      	movs	r3, #2
 800647a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800647c:	7bfb      	ldrb	r3, [r7, #15]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	bc80      	pop	{r7}
 8006486:	4770      	bx	lr

08006488 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f001 fa6b 	bl	800796c <USBD_LL_Start>

  return USBD_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bc80      	pop	{r7}
 80064b2:	4770      	bx	lr

080064b4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	460b      	mov	r3, r1
 80064be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80064c0:	2302      	movs	r3, #2
 80064c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00c      	beq.n	80064e8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	78fa      	ldrb	r2, [r7, #3]
 80064d8:	4611      	mov	r1, r2
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	4798      	blx	r3
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	460b      	mov	r3, r1
 80064fc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	78fa      	ldrb	r2, [r7, #3]
 8006508:	4611      	mov	r1, r2
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	4798      	blx	r3

  return USBD_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fed7 	bl	80072de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800653e:	461a      	mov	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800654c:	f003 031f 	and.w	r3, r3, #31
 8006550:	2b02      	cmp	r3, #2
 8006552:	d016      	beq.n	8006582 <USBD_LL_SetupStage+0x6a>
 8006554:	2b02      	cmp	r3, #2
 8006556:	d81c      	bhi.n	8006592 <USBD_LL_SetupStage+0x7a>
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <USBD_LL_SetupStage+0x4a>
 800655c:	2b01      	cmp	r3, #1
 800655e:	d008      	beq.n	8006572 <USBD_LL_SetupStage+0x5a>
 8006560:	e017      	b.n	8006592 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006568:	4619      	mov	r1, r3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f9ca 	bl	8006904 <USBD_StdDevReq>
      break;
 8006570:	e01a      	b.n	80065a8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fa2c 	bl	80069d8 <USBD_StdItfReq>
      break;
 8006580:	e012      	b.n	80065a8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006588:	4619      	mov	r1, r3
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fa6c 	bl	8006a68 <USBD_StdEPReq>
      break;
 8006590:	e00a      	b.n	80065a8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006598:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800659c:	b2db      	uxtb	r3, r3
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f001 fa43 	bl	8007a2c <USBD_LL_StallEP>
      break;
 80065a6:	bf00      	nop
  }

  return USBD_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b086      	sub	sp, #24
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	460b      	mov	r3, r1
 80065bc:	607a      	str	r2, [r7, #4]
 80065be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80065c0:	7afb      	ldrb	r3, [r7, #11]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d14b      	bne.n	800665e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80065cc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d134      	bne.n	8006642 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	68da      	ldr	r2, [r3, #12]
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d919      	bls.n	8006618 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	1ad2      	subs	r2, r2, r3
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d203      	bcs.n	8006606 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006602:	b29b      	uxth	r3, r3
 8006604:	e002      	b.n	800660c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800660a:	b29b      	uxth	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 ff35 	bl	8007480 <USBD_CtlContinueRx>
 8006616:	e038      	b.n	800668a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00a      	beq.n	800663a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800662a:	2b03      	cmp	r3, #3
 800662c:	d105      	bne.n	800663a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 ff32 	bl	80074a4 <USBD_CtlSendStatus>
 8006640:	e023      	b.n	800668a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006648:	2b05      	cmp	r3, #5
 800664a:	d11e      	bne.n	800668a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006654:	2100      	movs	r1, #0
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f001 f9e8 	bl	8007a2c <USBD_LL_StallEP>
 800665c:	e015      	b.n	800668a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00d      	beq.n	8006686 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006670:	2b03      	cmp	r3, #3
 8006672:	d108      	bne.n	8006686 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	7afa      	ldrb	r2, [r7, #11]
 800667e:	4611      	mov	r1, r2
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	4798      	blx	r3
 8006684:	e001      	b.n	800668a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006686:	2302      	movs	r3, #2
 8006688:	e000      	b.n	800668c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3718      	adds	r7, #24
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	460b      	mov	r3, r1
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80066a2:	7afb      	ldrb	r3, [r7, #11]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d17f      	bne.n	80067a8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	3314      	adds	r3, #20
 80066ac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d15c      	bne.n	8006772 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	68da      	ldr	r2, [r3, #12]
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d915      	bls.n	80066f0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	1ad2      	subs	r2, r2, r3
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 febd 	bl	800745c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066e2:	2300      	movs	r3, #0
 80066e4:	2200      	movs	r2, #0
 80066e6:	2100      	movs	r1, #0
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f001 fa4b 	bl	8007b84 <USBD_LL_PrepareReceive>
 80066ee:	e04e      	b.n	800678e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	6912      	ldr	r2, [r2, #16]
 80066f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80066fc:	fb01 f202 	mul.w	r2, r1, r2
 8006700:	1a9b      	subs	r3, r3, r2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d11c      	bne.n	8006740 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	689a      	ldr	r2, [r3, #8]
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800670e:	429a      	cmp	r2, r3
 8006710:	d316      	bcc.n	8006740 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800671c:	429a      	cmp	r2, r3
 800671e:	d20f      	bcs.n	8006740 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006720:	2200      	movs	r2, #0
 8006722:	2100      	movs	r1, #0
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 fe99 	bl	800745c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006732:	2300      	movs	r3, #0
 8006734:	2200      	movs	r2, #0
 8006736:	2100      	movs	r1, #0
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f001 fa23 	bl	8007b84 <USBD_LL_PrepareReceive>
 800673e:	e026      	b.n	800678e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00a      	beq.n	8006762 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006752:	2b03      	cmp	r3, #3
 8006754:	d105      	bne.n	8006762 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006762:	2180      	movs	r1, #128	@ 0x80
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f001 f961 	bl	8007a2c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 fead 	bl	80074ca <USBD_CtlReceiveStatus>
 8006770:	e00d      	b.n	800678e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006778:	2b04      	cmp	r3, #4
 800677a:	d004      	beq.n	8006786 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006782:	2b00      	cmp	r3, #0
 8006784:	d103      	bne.n	800678e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006786:	2180      	movs	r1, #128	@ 0x80
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f001 f94f 	bl	8007a2c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006794:	2b01      	cmp	r3, #1
 8006796:	d11d      	bne.n	80067d4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f7ff fe81 	bl	80064a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80067a6:	e015      	b.n	80067d4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00d      	beq.n	80067d0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	d108      	bne.n	80067d0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	7afa      	ldrb	r2, [r7, #11]
 80067c8:	4611      	mov	r1, r2
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	4798      	blx	r3
 80067ce:	e001      	b.n	80067d4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80067d0:	2302      	movs	r3, #2
 80067d2:	e000      	b.n	80067d6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067e6:	2340      	movs	r3, #64	@ 0x40
 80067e8:	2200      	movs	r2, #0
 80067ea:	2100      	movs	r1, #0
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 f8d8 	bl	80079a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2240      	movs	r2, #64	@ 0x40
 80067fe:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006802:	2340      	movs	r3, #64	@ 0x40
 8006804:	2200      	movs	r2, #0
 8006806:	2180      	movs	r1, #128	@ 0x80
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f001 f8ca 	bl	80079a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2240      	movs	r2, #64	@ 0x40
 8006818:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800683e:	2b00      	cmp	r3, #0
 8006840:	d009      	beq.n	8006856 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	6852      	ldr	r2, [r2, #4]
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	4611      	mov	r1, r2
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	4798      	blx	r3
  }

  return USBD_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	460b      	mov	r3, r1
 800686a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	78fa      	ldrb	r2, [r7, #3]
 8006870:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	bc80      	pop	{r7}
 800687c:	4770      	bx	lr

0800687e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2204      	movs	r2, #4
 8006896:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bc80      	pop	{r7}
 80068a4:	4770      	bx	lr

080068a6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d105      	bne.n	80068c4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bc80      	pop	{r7}
 80068ce:	4770      	bx	lr

080068d0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d10b      	bne.n	80068fa <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d005      	beq.n	80068fa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800691a:	2b40      	cmp	r3, #64	@ 0x40
 800691c:	d005      	beq.n	800692a <USBD_StdDevReq+0x26>
 800691e:	2b40      	cmp	r3, #64	@ 0x40
 8006920:	d84f      	bhi.n	80069c2 <USBD_StdDevReq+0xbe>
 8006922:	2b00      	cmp	r3, #0
 8006924:	d009      	beq.n	800693a <USBD_StdDevReq+0x36>
 8006926:	2b20      	cmp	r3, #32
 8006928:	d14b      	bne.n	80069c2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	4798      	blx	r3
      break;
 8006938:	e048      	b.n	80069cc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	785b      	ldrb	r3, [r3, #1]
 800693e:	2b09      	cmp	r3, #9
 8006940:	d839      	bhi.n	80069b6 <USBD_StdDevReq+0xb2>
 8006942:	a201      	add	r2, pc, #4	@ (adr r2, 8006948 <USBD_StdDevReq+0x44>)
 8006944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006948:	08006999 	.word	0x08006999
 800694c:	080069ad 	.word	0x080069ad
 8006950:	080069b7 	.word	0x080069b7
 8006954:	080069a3 	.word	0x080069a3
 8006958:	080069b7 	.word	0x080069b7
 800695c:	0800697b 	.word	0x0800697b
 8006960:	08006971 	.word	0x08006971
 8006964:	080069b7 	.word	0x080069b7
 8006968:	0800698f 	.word	0x0800698f
 800696c:	08006985 	.word	0x08006985
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f9dc 	bl	8006d30 <USBD_GetDescriptor>
          break;
 8006978:	e022      	b.n	80069c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fb3f 	bl	8007000 <USBD_SetAddress>
          break;
 8006982:	e01d      	b.n	80069c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006984:	6839      	ldr	r1, [r7, #0]
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fb7e 	bl	8007088 <USBD_SetConfig>
          break;
 800698c:	e018      	b.n	80069c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fc07 	bl	80071a4 <USBD_GetConfig>
          break;
 8006996:	e013      	b.n	80069c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fc37 	bl	800720e <USBD_GetStatus>
          break;
 80069a0:	e00e      	b.n	80069c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fc65 	bl	8007274 <USBD_SetFeature>
          break;
 80069aa:	e009      	b.n	80069c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fc74 	bl	800729c <USBD_ClrFeature>
          break;
 80069b4:	e004      	b.n	80069c0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fcc9 	bl	8007350 <USBD_CtlError>
          break;
 80069be:	bf00      	nop
      }
      break;
 80069c0:	e004      	b.n	80069cc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fcc3 	bl	8007350 <USBD_CtlError>
      break;
 80069ca:	bf00      	nop
  }

  return ret;
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop

080069d8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069ee:	2b40      	cmp	r3, #64	@ 0x40
 80069f0:	d005      	beq.n	80069fe <USBD_StdItfReq+0x26>
 80069f2:	2b40      	cmp	r3, #64	@ 0x40
 80069f4:	d82e      	bhi.n	8006a54 <USBD_StdItfReq+0x7c>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <USBD_StdItfReq+0x26>
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	d12a      	bne.n	8006a54 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a04:	3b01      	subs	r3, #1
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d81d      	bhi.n	8006a46 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	889b      	ldrh	r3, [r3, #4]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d813      	bhi.n	8006a3c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	4798      	blx	r3
 8006a22:	4603      	mov	r3, r0
 8006a24:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	88db      	ldrh	r3, [r3, #6]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d110      	bne.n	8006a50 <USBD_StdItfReq+0x78>
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10d      	bne.n	8006a50 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fd35 	bl	80074a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a3a:	e009      	b.n	8006a50 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fc86 	bl	8007350 <USBD_CtlError>
          break;
 8006a44:	e004      	b.n	8006a50 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fc81 	bl	8007350 <USBD_CtlError>
          break;
 8006a4e:	e000      	b.n	8006a52 <USBD_StdItfReq+0x7a>
          break;
 8006a50:	bf00      	nop
      }
      break;
 8006a52:	e004      	b.n	8006a5e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fc7a 	bl	8007350 <USBD_CtlError>
      break;
 8006a5c:	bf00      	nop
  }

  return USBD_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	889b      	ldrh	r3, [r3, #4]
 8006a7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a84:	2b40      	cmp	r3, #64	@ 0x40
 8006a86:	d007      	beq.n	8006a98 <USBD_StdEPReq+0x30>
 8006a88:	2b40      	cmp	r3, #64	@ 0x40
 8006a8a:	f200 8146 	bhi.w	8006d1a <USBD_StdEPReq+0x2b2>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <USBD_StdEPReq+0x40>
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	f040 8141 	bne.w	8006d1a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	4798      	blx	r3
      break;
 8006aa6:	e13d      	b.n	8006d24 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	d10a      	bne.n	8006aca <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	4798      	blx	r3
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
 8006ac8:	e12d      	b.n	8006d26 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	785b      	ldrb	r3, [r3, #1]
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d007      	beq.n	8006ae2 <USBD_StdEPReq+0x7a>
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	f300 811b 	bgt.w	8006d0e <USBD_StdEPReq+0x2a6>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d072      	beq.n	8006bc2 <USBD_StdEPReq+0x15a>
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d03a      	beq.n	8006b56 <USBD_StdEPReq+0xee>
 8006ae0:	e115      	b.n	8006d0e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d002      	beq.n	8006af2 <USBD_StdEPReq+0x8a>
 8006aec:	2b03      	cmp	r3, #3
 8006aee:	d015      	beq.n	8006b1c <USBD_StdEPReq+0xb4>
 8006af0:	e02b      	b.n	8006b4a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006af2:	7bbb      	ldrb	r3, [r7, #14]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00c      	beq.n	8006b12 <USBD_StdEPReq+0xaa>
 8006af8:	7bbb      	ldrb	r3, [r7, #14]
 8006afa:	2b80      	cmp	r3, #128	@ 0x80
 8006afc:	d009      	beq.n	8006b12 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006afe:	7bbb      	ldrb	r3, [r7, #14]
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 ff92 	bl	8007a2c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b08:	2180      	movs	r1, #128	@ 0x80
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 ff8e 	bl	8007a2c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b10:	e020      	b.n	8006b54 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fc1b 	bl	8007350 <USBD_CtlError>
              break;
 8006b1a:	e01b      	b.n	8006b54 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	885b      	ldrh	r3, [r3, #2]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10e      	bne.n	8006b42 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00b      	beq.n	8006b42 <USBD_StdEPReq+0xda>
 8006b2a:	7bbb      	ldrb	r3, [r7, #14]
 8006b2c:	2b80      	cmp	r3, #128	@ 0x80
 8006b2e:	d008      	beq.n	8006b42 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	88db      	ldrh	r3, [r3, #6]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d104      	bne.n	8006b42 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 ff75 	bl	8007a2c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fcae 	bl	80074a4 <USBD_CtlSendStatus>

              break;
 8006b48:	e004      	b.n	8006b54 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fbff 	bl	8007350 <USBD_CtlError>
              break;
 8006b52:	bf00      	nop
          }
          break;
 8006b54:	e0e0      	b.n	8006d18 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d002      	beq.n	8006b66 <USBD_StdEPReq+0xfe>
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d015      	beq.n	8006b90 <USBD_StdEPReq+0x128>
 8006b64:	e026      	b.n	8006bb4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b66:	7bbb      	ldrb	r3, [r7, #14]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00c      	beq.n	8006b86 <USBD_StdEPReq+0x11e>
 8006b6c:	7bbb      	ldrb	r3, [r7, #14]
 8006b6e:	2b80      	cmp	r3, #128	@ 0x80
 8006b70:	d009      	beq.n	8006b86 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006b72:	7bbb      	ldrb	r3, [r7, #14]
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 ff58 	bl	8007a2c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b7c:	2180      	movs	r1, #128	@ 0x80
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 ff54 	bl	8007a2c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b84:	e01c      	b.n	8006bc0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fbe1 	bl	8007350 <USBD_CtlError>
              break;
 8006b8e:	e017      	b.n	8006bc0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	885b      	ldrh	r3, [r3, #2]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d112      	bne.n	8006bbe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b98:	7bbb      	ldrb	r3, [r7, #14]
 8006b9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d004      	beq.n	8006bac <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 ff5f 	bl	8007a6a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fc79 	bl	80074a4 <USBD_CtlSendStatus>
              }
              break;
 8006bb2:	e004      	b.n	8006bbe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fbca 	bl	8007350 <USBD_CtlError>
              break;
 8006bbc:	e000      	b.n	8006bc0 <USBD_StdEPReq+0x158>
              break;
 8006bbe:	bf00      	nop
          }
          break;
 8006bc0:	e0aa      	b.n	8006d18 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d002      	beq.n	8006bd2 <USBD_StdEPReq+0x16a>
 8006bcc:	2b03      	cmp	r3, #3
 8006bce:	d032      	beq.n	8006c36 <USBD_StdEPReq+0x1ce>
 8006bd0:	e097      	b.n	8006d02 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bd2:	7bbb      	ldrb	r3, [r7, #14]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d007      	beq.n	8006be8 <USBD_StdEPReq+0x180>
 8006bd8:	7bbb      	ldrb	r3, [r7, #14]
 8006bda:	2b80      	cmp	r3, #128	@ 0x80
 8006bdc:	d004      	beq.n	8006be8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fbb5 	bl	8007350 <USBD_CtlError>
                break;
 8006be6:	e091      	b.n	8006d0c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006be8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	da0b      	bge.n	8006c08 <USBD_StdEPReq+0x1a0>
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	3310      	adds	r3, #16
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	4413      	add	r3, r2
 8006c04:	3304      	adds	r3, #4
 8006c06:	e00b      	b.n	8006c20 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3304      	adds	r3, #4
 8006c20:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fbf8 	bl	8007424 <USBD_CtlSendData>
              break;
 8006c34:	e06a      	b.n	8006d0c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	da11      	bge.n	8006c62 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c3e:	7bbb      	ldrb	r3, [r7, #14]
 8006c40:	f003 020f 	and.w	r2, r3, #15
 8006c44:	6879      	ldr	r1, [r7, #4]
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	440b      	add	r3, r1
 8006c50:	3318      	adds	r3, #24
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d117      	bne.n	8006c88 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fb78 	bl	8007350 <USBD_CtlError>
                  break;
 8006c60:	e054      	b.n	8006d0c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c62:	7bbb      	ldrb	r3, [r7, #14]
 8006c64:	f003 020f 	and.w	r2, r3, #15
 8006c68:	6879      	ldr	r1, [r7, #4]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	440b      	add	r3, r1
 8006c74:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d104      	bne.n	8006c88 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fb65 	bl	8007350 <USBD_CtlError>
                  break;
 8006c86:	e041      	b.n	8006d0c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	da0b      	bge.n	8006ca8 <USBD_StdEPReq+0x240>
 8006c90:	7bbb      	ldrb	r3, [r7, #14]
 8006c92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	3310      	adds	r3, #16
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	e00b      	b.n	8006cc0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ca8:	7bbb      	ldrb	r3, [r7, #14]
 8006caa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <USBD_StdEPReq+0x266>
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	2b80      	cmp	r3, #128	@ 0x80
 8006ccc:	d103      	bne.n	8006cd6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	e00e      	b.n	8006cf4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fee4 	bl	8007aa8 <USBD_LL_IsStallEP>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	e002      	b.n	8006cf4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fb92 	bl	8007424 <USBD_CtlSendData>
              break;
 8006d00:	e004      	b.n	8006d0c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fb23 	bl	8007350 <USBD_CtlError>
              break;
 8006d0a:	bf00      	nop
          }
          break;
 8006d0c:	e004      	b.n	8006d18 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fb1d 	bl	8007350 <USBD_CtlError>
          break;
 8006d16:	bf00      	nop
      }
      break;
 8006d18:	e004      	b.n	8006d24 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fb17 	bl	8007350 <USBD_CtlError>
      break;
 8006d22:	bf00      	nop
  }

  return ret;
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
	...

08006d30 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	885b      	ldrh	r3, [r3, #2]
 8006d4a:	0a1b      	lsrs	r3, r3, #8
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	2b06      	cmp	r3, #6
 8006d52:	f200 8128 	bhi.w	8006fa6 <USBD_GetDescriptor+0x276>
 8006d56:	a201      	add	r2, pc, #4	@ (adr r2, 8006d5c <USBD_GetDescriptor+0x2c>)
 8006d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5c:	08006d79 	.word	0x08006d79
 8006d60:	08006d91 	.word	0x08006d91
 8006d64:	08006dd1 	.word	0x08006dd1
 8006d68:	08006fa7 	.word	0x08006fa7
 8006d6c:	08006fa7 	.word	0x08006fa7
 8006d70:	08006f47 	.word	0x08006f47
 8006d74:	08006f73 	.word	0x08006f73
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	7c12      	ldrb	r2, [r2, #16]
 8006d84:	f107 0108 	add.w	r1, r7, #8
 8006d88:	4610      	mov	r0, r2
 8006d8a:	4798      	blx	r3
 8006d8c:	60f8      	str	r0, [r7, #12]
      break;
 8006d8e:	e112      	b.n	8006fb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	7c1b      	ldrb	r3, [r3, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10d      	bne.n	8006db4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da0:	f107 0208 	add.w	r2, r7, #8
 8006da4:	4610      	mov	r0, r2
 8006da6:	4798      	blx	r3
 8006da8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	3301      	adds	r3, #1
 8006dae:	2202      	movs	r2, #2
 8006db0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006db2:	e100      	b.n	8006fb6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbc:	f107 0208 	add.w	r2, r7, #8
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4798      	blx	r3
 8006dc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	2202      	movs	r2, #2
 8006dcc:	701a      	strb	r2, [r3, #0]
      break;
 8006dce:	e0f2      	b.n	8006fb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	885b      	ldrh	r3, [r3, #2]
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b05      	cmp	r3, #5
 8006dd8:	f200 80ac 	bhi.w	8006f34 <USBD_GetDescriptor+0x204>
 8006ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8006de4 <USBD_GetDescriptor+0xb4>)
 8006dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de2:	bf00      	nop
 8006de4:	08006dfd 	.word	0x08006dfd
 8006de8:	08006e31 	.word	0x08006e31
 8006dec:	08006e65 	.word	0x08006e65
 8006df0:	08006e99 	.word	0x08006e99
 8006df4:	08006ecd 	.word	0x08006ecd
 8006df8:	08006f01 	.word	0x08006f01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00b      	beq.n	8006e20 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	7c12      	ldrb	r2, [r2, #16]
 8006e14:	f107 0108 	add.w	r1, r7, #8
 8006e18:	4610      	mov	r0, r2
 8006e1a:	4798      	blx	r3
 8006e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e1e:	e091      	b.n	8006f44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fa94 	bl	8007350 <USBD_CtlError>
            err++;
 8006e28:	7afb      	ldrb	r3, [r7, #11]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e2e:	e089      	b.n	8006f44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00b      	beq.n	8006e54 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	7c12      	ldrb	r2, [r2, #16]
 8006e48:	f107 0108 	add.w	r1, r7, #8
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	4798      	blx	r3
 8006e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e52:	e077      	b.n	8006f44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fa7a 	bl	8007350 <USBD_CtlError>
            err++;
 8006e5c:	7afb      	ldrb	r3, [r7, #11]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	72fb      	strb	r3, [r7, #11]
          break;
 8006e62:	e06f      	b.n	8006f44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00b      	beq.n	8006e88 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	7c12      	ldrb	r2, [r2, #16]
 8006e7c:	f107 0108 	add.w	r1, r7, #8
 8006e80:	4610      	mov	r0, r2
 8006e82:	4798      	blx	r3
 8006e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e86:	e05d      	b.n	8006f44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fa60 	bl	8007350 <USBD_CtlError>
            err++;
 8006e90:	7afb      	ldrb	r3, [r7, #11]
 8006e92:	3301      	adds	r3, #1
 8006e94:	72fb      	strb	r3, [r7, #11]
          break;
 8006e96:	e055      	b.n	8006f44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00b      	beq.n	8006ebc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	7c12      	ldrb	r2, [r2, #16]
 8006eb0:	f107 0108 	add.w	r1, r7, #8
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4798      	blx	r3
 8006eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eba:	e043      	b.n	8006f44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fa46 	bl	8007350 <USBD_CtlError>
            err++;
 8006ec4:	7afb      	ldrb	r3, [r7, #11]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eca:	e03b      	b.n	8006f44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00b      	beq.n	8006ef0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	7c12      	ldrb	r2, [r2, #16]
 8006ee4:	f107 0108 	add.w	r1, r7, #8
 8006ee8:	4610      	mov	r0, r2
 8006eea:	4798      	blx	r3
 8006eec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eee:	e029      	b.n	8006f44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fa2c 	bl	8007350 <USBD_CtlError>
            err++;
 8006ef8:	7afb      	ldrb	r3, [r7, #11]
 8006efa:	3301      	adds	r3, #1
 8006efc:	72fb      	strb	r3, [r7, #11]
          break;
 8006efe:	e021      	b.n	8006f44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00b      	beq.n	8006f24 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	7c12      	ldrb	r2, [r2, #16]
 8006f18:	f107 0108 	add.w	r1, r7, #8
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4798      	blx	r3
 8006f20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f22:	e00f      	b.n	8006f44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fa12 	bl	8007350 <USBD_CtlError>
            err++;
 8006f2c:	7afb      	ldrb	r3, [r7, #11]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	72fb      	strb	r3, [r7, #11]
          break;
 8006f32:	e007      	b.n	8006f44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fa0a 	bl	8007350 <USBD_CtlError>
          err++;
 8006f3c:	7afb      	ldrb	r3, [r7, #11]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006f42:	e038      	b.n	8006fb6 <USBD_GetDescriptor+0x286>
 8006f44:	e037      	b.n	8006fb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	7c1b      	ldrb	r3, [r3, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d109      	bne.n	8006f62 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f56:	f107 0208 	add.w	r2, r7, #8
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	4798      	blx	r3
 8006f5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f60:	e029      	b.n	8006fb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f9f3 	bl	8007350 <USBD_CtlError>
        err++;
 8006f6a:	7afb      	ldrb	r3, [r7, #11]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	72fb      	strb	r3, [r7, #11]
      break;
 8006f70:	e021      	b.n	8006fb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	7c1b      	ldrb	r3, [r3, #16]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10d      	bne.n	8006f96 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f82:	f107 0208 	add.w	r2, r7, #8
 8006f86:	4610      	mov	r0, r2
 8006f88:	4798      	blx	r3
 8006f8a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	2207      	movs	r2, #7
 8006f92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f94:	e00f      	b.n	8006fb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f9d9 	bl	8007350 <USBD_CtlError>
        err++;
 8006f9e:	7afb      	ldrb	r3, [r7, #11]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	72fb      	strb	r3, [r7, #11]
      break;
 8006fa4:	e007      	b.n	8006fb6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f9d1 	bl	8007350 <USBD_CtlError>
      err++;
 8006fae:	7afb      	ldrb	r3, [r7, #11]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	72fb      	strb	r3, [r7, #11]
      break;
 8006fb4:	bf00      	nop
  }

  if (err != 0U)
 8006fb6:	7afb      	ldrb	r3, [r7, #11]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d11c      	bne.n	8006ff6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006fbc:	893b      	ldrh	r3, [r7, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d011      	beq.n	8006fe6 <USBD_GetDescriptor+0x2b6>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	88db      	ldrh	r3, [r3, #6]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00d      	beq.n	8006fe6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	88da      	ldrh	r2, [r3, #6]
 8006fce:	893b      	ldrh	r3, [r7, #8]
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	bf28      	it	cs
 8006fd4:	4613      	movcs	r3, r2
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fda:	893b      	ldrh	r3, [r7, #8]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	68f9      	ldr	r1, [r7, #12]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fa1f 	bl	8007424 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	88db      	ldrh	r3, [r3, #6]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d104      	bne.n	8006ff8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fa58 	bl	80074a4 <USBD_CtlSendStatus>
 8006ff4:	e000      	b.n	8006ff8 <USBD_GetDescriptor+0x2c8>
    return;
 8006ff6:	bf00      	nop
    }
  }
}
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop

08007000 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	889b      	ldrh	r3, [r3, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d130      	bne.n	8007074 <USBD_SetAddress+0x74>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	88db      	ldrh	r3, [r3, #6]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d12c      	bne.n	8007074 <USBD_SetAddress+0x74>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	885b      	ldrh	r3, [r3, #2]
 800701e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007020:	d828      	bhi.n	8007074 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	885b      	ldrh	r3, [r3, #2]
 8007026:	b2db      	uxtb	r3, r3
 8007028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800702c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007034:	2b03      	cmp	r3, #3
 8007036:	d104      	bne.n	8007042 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f988 	bl	8007350 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007040:	e01d      	b.n	800707e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	7bfa      	ldrb	r2, [r7, #15]
 8007046:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800704a:	7bfb      	ldrb	r3, [r7, #15]
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fd56 	bl	8007b00 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fa25 	bl	80074a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800705a:	7bfb      	ldrb	r3, [r7, #15]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d004      	beq.n	800706a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007068:	e009      	b.n	800707e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007072:	e004      	b.n	800707e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f96a 	bl	8007350 <USBD_CtlError>
  }
}
 800707c:	bf00      	nop
 800707e:	bf00      	nop
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
	...

08007088 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	885b      	ldrh	r3, [r3, #2]
 8007096:	b2da      	uxtb	r2, r3
 8007098:	4b41      	ldr	r3, [pc, #260]	@ (80071a0 <USBD_SetConfig+0x118>)
 800709a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800709c:	4b40      	ldr	r3, [pc, #256]	@ (80071a0 <USBD_SetConfig+0x118>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d904      	bls.n	80070ae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f952 	bl	8007350 <USBD_CtlError>
 80070ac:	e075      	b.n	800719a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d002      	beq.n	80070be <USBD_SetConfig+0x36>
 80070b8:	2b03      	cmp	r3, #3
 80070ba:	d023      	beq.n	8007104 <USBD_SetConfig+0x7c>
 80070bc:	e062      	b.n	8007184 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80070be:	4b38      	ldr	r3, [pc, #224]	@ (80071a0 <USBD_SetConfig+0x118>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d01a      	beq.n	80070fc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80070c6:	4b36      	ldr	r3, [pc, #216]	@ (80071a0 <USBD_SetConfig+0x118>)
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2203      	movs	r2, #3
 80070d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80070d8:	4b31      	ldr	r3, [pc, #196]	@ (80071a0 <USBD_SetConfig+0x118>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7ff f9e8 	bl	80064b4 <USBD_SetClassConfig>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d104      	bne.n	80070f4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f92f 	bl	8007350 <USBD_CtlError>
            return;
 80070f2:	e052      	b.n	800719a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f9d5 	bl	80074a4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80070fa:	e04e      	b.n	800719a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f9d1 	bl	80074a4 <USBD_CtlSendStatus>
        break;
 8007102:	e04a      	b.n	800719a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007104:	4b26      	ldr	r3, [pc, #152]	@ (80071a0 <USBD_SetConfig+0x118>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d112      	bne.n	8007132 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007114:	4b22      	ldr	r3, [pc, #136]	@ (80071a0 <USBD_SetConfig+0x118>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	461a      	mov	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800711e:	4b20      	ldr	r3, [pc, #128]	@ (80071a0 <USBD_SetConfig+0x118>)
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7ff f9e4 	bl	80064f2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f9ba 	bl	80074a4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007130:	e033      	b.n	800719a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007132:	4b1b      	ldr	r3, [pc, #108]	@ (80071a0 <USBD_SetConfig+0x118>)
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	429a      	cmp	r2, r3
 800713e:	d01d      	beq.n	800717c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff f9d2 	bl	80064f2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800714e:	4b14      	ldr	r3, [pc, #80]	@ (80071a0 <USBD_SetConfig+0x118>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	461a      	mov	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007158:	4b11      	ldr	r3, [pc, #68]	@ (80071a0 <USBD_SetConfig+0x118>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7ff f9a8 	bl	80064b4 <USBD_SetClassConfig>
 8007164:	4603      	mov	r3, r0
 8007166:	2b02      	cmp	r3, #2
 8007168:	d104      	bne.n	8007174 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f8ef 	bl	8007350 <USBD_CtlError>
            return;
 8007172:	e012      	b.n	800719a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f995 	bl	80074a4 <USBD_CtlSendStatus>
        break;
 800717a:	e00e      	b.n	800719a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f991 	bl	80074a4 <USBD_CtlSendStatus>
        break;
 8007182:	e00a      	b.n	800719a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f8e2 	bl	8007350 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800718c:	4b04      	ldr	r3, [pc, #16]	@ (80071a0 <USBD_SetConfig+0x118>)
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff f9ad 	bl	80064f2 <USBD_ClrClassConfig>
        break;
 8007198:	bf00      	nop
    }
  }
}
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	20000178 	.word	0x20000178

080071a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	88db      	ldrh	r3, [r3, #6]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d004      	beq.n	80071c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f8c9 	bl	8007350 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80071be:	e022      	b.n	8007206 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	dc02      	bgt.n	80071d0 <USBD_GetConfig+0x2c>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	dc03      	bgt.n	80071d6 <USBD_GetConfig+0x32>
 80071ce:	e015      	b.n	80071fc <USBD_GetConfig+0x58>
 80071d0:	2b03      	cmp	r3, #3
 80071d2:	d00b      	beq.n	80071ec <USBD_GetConfig+0x48>
 80071d4:	e012      	b.n	80071fc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3308      	adds	r3, #8
 80071e0:	2201      	movs	r2, #1
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f91d 	bl	8007424 <USBD_CtlSendData>
        break;
 80071ea:	e00c      	b.n	8007206 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	3304      	adds	r3, #4
 80071f0:	2201      	movs	r2, #1
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f915 	bl	8007424 <USBD_CtlSendData>
        break;
 80071fa:	e004      	b.n	8007206 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80071fc:	6839      	ldr	r1, [r7, #0]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f8a6 	bl	8007350 <USBD_CtlError>
        break;
 8007204:	bf00      	nop
}
 8007206:	bf00      	nop
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800721e:	3b01      	subs	r3, #1
 8007220:	2b02      	cmp	r3, #2
 8007222:	d81e      	bhi.n	8007262 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	88db      	ldrh	r3, [r3, #6]
 8007228:	2b02      	cmp	r3, #2
 800722a:	d004      	beq.n	8007236 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f88e 	bl	8007350 <USBD_CtlError>
        break;
 8007234:	e01a      	b.n	800726c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f043 0202 	orr.w	r2, r3, #2
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	330c      	adds	r3, #12
 8007256:	2202      	movs	r2, #2
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f8e2 	bl	8007424 <USBD_CtlSendData>
      break;
 8007260:	e004      	b.n	800726c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f873 	bl	8007350 <USBD_CtlError>
      break;
 800726a:	bf00      	nop
  }
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	885b      	ldrh	r3, [r3, #2]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d106      	bne.n	8007294 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f908 	bl	80074a4 <USBD_CtlSendStatus>
  }
}
 8007294:	bf00      	nop
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072ac:	3b01      	subs	r3, #1
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d80b      	bhi.n	80072ca <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	885b      	ldrh	r3, [r3, #2]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d10c      	bne.n	80072d4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f8ee 	bl	80074a4 <USBD_CtlSendStatus>
      }
      break;
 80072c8:	e004      	b.n	80072d4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f83f 	bl	8007350 <USBD_CtlError>
      break;
 80072d2:	e000      	b.n	80072d6 <USBD_ClrFeature+0x3a>
      break;
 80072d4:	bf00      	nop
  }
}
 80072d6:	bf00      	nop
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781a      	ldrb	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	785a      	ldrb	r2, [r3, #1]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	3302      	adds	r3, #2
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	3303      	adds	r3, #3
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	021b      	lsls	r3, r3, #8
 8007308:	b29b      	uxth	r3, r3
 800730a:	4413      	add	r3, r2
 800730c:	b29a      	uxth	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	3304      	adds	r3, #4
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	461a      	mov	r2, r3
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	3305      	adds	r3, #5
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	021b      	lsls	r3, r3, #8
 8007322:	b29b      	uxth	r3, r3
 8007324:	4413      	add	r3, r2
 8007326:	b29a      	uxth	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	3306      	adds	r3, #6
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	461a      	mov	r2, r3
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	3307      	adds	r3, #7
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	021b      	lsls	r3, r3, #8
 800733c:	b29b      	uxth	r3, r3
 800733e:	4413      	add	r3, r2
 8007340:	b29a      	uxth	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	80da      	strh	r2, [r3, #6]

}
 8007346:	bf00      	nop
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	bc80      	pop	{r7}
 800734e:	4770      	bx	lr

08007350 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800735a:	2180      	movs	r1, #128	@ 0x80
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fb65 	bl	8007a2c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007362:	2100      	movs	r1, #0
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fb61 	bl	8007a2c <USBD_LL_StallEP>
}
 800736a:	bf00      	nop
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b086      	sub	sp, #24
 8007376:	af00      	add	r7, sp, #0
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	60b9      	str	r1, [r7, #8]
 800737c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d032      	beq.n	80073ee <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f000 f834 	bl	80073f6 <USBD_GetLen>
 800738e:	4603      	mov	r3, r0
 8007390:	3301      	adds	r3, #1
 8007392:	b29b      	uxth	r3, r3
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	b29a      	uxth	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800739c:	7dfb      	ldrb	r3, [r7, #23]
 800739e:	1c5a      	adds	r2, r3, #1
 80073a0:	75fa      	strb	r2, [r7, #23]
 80073a2:	461a      	mov	r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	4413      	add	r3, r2
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	7812      	ldrb	r2, [r2, #0]
 80073ac:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	75fa      	strb	r2, [r7, #23]
 80073b4:	461a      	mov	r2, r3
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	4413      	add	r3, r2
 80073ba:	2203      	movs	r2, #3
 80073bc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80073be:	e012      	b.n	80073e6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	60fa      	str	r2, [r7, #12]
 80073c6:	7dfa      	ldrb	r2, [r7, #23]
 80073c8:	1c51      	adds	r1, r2, #1
 80073ca:	75f9      	strb	r1, [r7, #23]
 80073cc:	4611      	mov	r1, r2
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	440a      	add	r2, r1
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80073d6:	7dfb      	ldrb	r3, [r7, #23]
 80073d8:	1c5a      	adds	r2, r3, #1
 80073da:	75fa      	strb	r2, [r7, #23]
 80073dc:	461a      	mov	r2, r3
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	4413      	add	r3, r2
 80073e2:	2200      	movs	r2, #0
 80073e4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e8      	bne.n	80073c0 <USBD_GetString+0x4e>
    }
  }
}
 80073ee:	bf00      	nop
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007402:	e005      	b.n	8007410 <USBD_GetLen+0x1a>
  {
    len++;
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	3301      	adds	r3, #1
 8007408:	73fb      	strb	r3, [r7, #15]
    buf++;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	3301      	adds	r3, #1
 800740e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1f5      	bne.n	8007404 <USBD_GetLen+0xe>
  }

  return len;
 8007418:	7bfb      	ldrb	r3, [r7, #15]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	bc80      	pop	{r7}
 8007422:	4770      	bx	lr

08007424 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	4613      	mov	r3, r2
 8007430:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2202      	movs	r2, #2
 8007436:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800743a:	88fa      	ldrh	r2, [r7, #6]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007440:	88fa      	ldrh	r2, [r7, #6]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007446:	88fb      	ldrh	r3, [r7, #6]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	2100      	movs	r1, #0
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f000 fb76 	bl	8007b3e <USBD_LL_Transmit>

  return USBD_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	4613      	mov	r3, r2
 8007468:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800746a:	88fb      	ldrh	r3, [r7, #6]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	2100      	movs	r1, #0
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 fb64 	bl	8007b3e <USBD_LL_Transmit>

  return USBD_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	4613      	mov	r3, r2
 800748c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800748e:	88fb      	ldrh	r3, [r7, #6]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	2100      	movs	r1, #0
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 fb75 	bl	8007b84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2204      	movs	r2, #4
 80074b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074b4:	2300      	movs	r3, #0
 80074b6:	2200      	movs	r2, #0
 80074b8:	2100      	movs	r1, #0
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fb3f 	bl	8007b3e <USBD_LL_Transmit>

  return USBD_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b082      	sub	sp, #8
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2205      	movs	r2, #5
 80074d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074da:	2300      	movs	r3, #0
 80074dc:	2200      	movs	r2, #0
 80074de:	2100      	movs	r1, #0
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fb4f 	bl	8007b84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074f4:	2200      	movs	r2, #0
 80074f6:	490e      	ldr	r1, [pc, #56]	@ (8007530 <MX_USB_DEVICE_Init+0x40>)
 80074f8:	480e      	ldr	r0, [pc, #56]	@ (8007534 <MX_USB_DEVICE_Init+0x44>)
 80074fa:	f7fe ff81 	bl	8006400 <USBD_Init>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007504:	f7f9 fc5a 	bl	8000dbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007508:	490b      	ldr	r1, [pc, #44]	@ (8007538 <MX_USB_DEVICE_Init+0x48>)
 800750a:	480a      	ldr	r0, [pc, #40]	@ (8007534 <MX_USB_DEVICE_Init+0x44>)
 800750c:	f7fe ffa3 	bl	8006456 <USBD_RegisterClass>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007516:	f7f9 fc51 	bl	8000dbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800751a:	4806      	ldr	r0, [pc, #24]	@ (8007534 <MX_USB_DEVICE_Init+0x44>)
 800751c:	f7fe ffb4 	bl	8006488 <USBD_Start>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007526:	f7f9 fc49 	bl	8000dbc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800752a:	bf00      	nop
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20000108 	.word	0x20000108
 8007534:	2000017c 	.word	0x2000017c
 8007538:	2000000c 	.word	0x2000000c

0800753c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	4603      	mov	r3, r0
 8007544:	6039      	str	r1, [r7, #0]
 8007546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2212      	movs	r2, #18
 800754c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800754e:	4b03      	ldr	r3, [pc, #12]	@ (800755c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007550:	4618      	mov	r0, r3
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	bc80      	pop	{r7}
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	20000124 	.word	0x20000124

08007560 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	4603      	mov	r3, r0
 8007568:	6039      	str	r1, [r7, #0]
 800756a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2204      	movs	r2, #4
 8007570:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007572:	4b03      	ldr	r3, [pc, #12]	@ (8007580 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007574:	4618      	mov	r0, r3
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	bc80      	pop	{r7}
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	20000138 	.word	0x20000138

08007584 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	4603      	mov	r3, r0
 800758c:	6039      	str	r1, [r7, #0]
 800758e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007590:	79fb      	ldrb	r3, [r7, #7]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d105      	bne.n	80075a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	4907      	ldr	r1, [pc, #28]	@ (80075b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800759a:	4808      	ldr	r0, [pc, #32]	@ (80075bc <USBD_FS_ProductStrDescriptor+0x38>)
 800759c:	f7ff fee9 	bl	8007372 <USBD_GetString>
 80075a0:	e004      	b.n	80075ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	4904      	ldr	r1, [pc, #16]	@ (80075b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80075a6:	4805      	ldr	r0, [pc, #20]	@ (80075bc <USBD_FS_ProductStrDescriptor+0x38>)
 80075a8:	f7ff fee3 	bl	8007372 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075ac:	4b02      	ldr	r3, [pc, #8]	@ (80075b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20000440 	.word	0x20000440
 80075bc:	08007cd4 	.word	0x08007cd4

080075c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	4603      	mov	r3, r0
 80075c8:	6039      	str	r1, [r7, #0]
 80075ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	4904      	ldr	r1, [pc, #16]	@ (80075e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075d0:	4804      	ldr	r0, [pc, #16]	@ (80075e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075d2:	f7ff fece 	bl	8007372 <USBD_GetString>
  return USBD_StrDesc;
 80075d6:	4b02      	ldr	r3, [pc, #8]	@ (80075e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	20000440 	.word	0x20000440
 80075e4:	08007cdc 	.word	0x08007cdc

080075e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	4603      	mov	r3, r0
 80075f0:	6039      	str	r1, [r7, #0]
 80075f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	221a      	movs	r2, #26
 80075f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075fa:	f000 f843 	bl	8007684 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075fe:	4b02      	ldr	r3, [pc, #8]	@ (8007608 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007600:	4618      	mov	r0, r3
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	2000013c 	.word	0x2000013c

0800760c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	4603      	mov	r3, r0
 8007614:	6039      	str	r1, [r7, #0]
 8007616:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007618:	79fb      	ldrb	r3, [r7, #7]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d105      	bne.n	800762a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	4907      	ldr	r1, [pc, #28]	@ (8007640 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007622:	4808      	ldr	r0, [pc, #32]	@ (8007644 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007624:	f7ff fea5 	bl	8007372 <USBD_GetString>
 8007628:	e004      	b.n	8007634 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	4904      	ldr	r1, [pc, #16]	@ (8007640 <USBD_FS_ConfigStrDescriptor+0x34>)
 800762e:	4805      	ldr	r0, [pc, #20]	@ (8007644 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007630:	f7ff fe9f 	bl	8007372 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007634:	4b02      	ldr	r3, [pc, #8]	@ (8007640 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20000440 	.word	0x20000440
 8007644:	08007cf0 	.word	0x08007cf0

08007648 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	6039      	str	r1, [r7, #0]
 8007652:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007654:	79fb      	ldrb	r3, [r7, #7]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d105      	bne.n	8007666 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	4907      	ldr	r1, [pc, #28]	@ (800767c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800765e:	4808      	ldr	r0, [pc, #32]	@ (8007680 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007660:	f7ff fe87 	bl	8007372 <USBD_GetString>
 8007664:	e004      	b.n	8007670 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	4904      	ldr	r1, [pc, #16]	@ (800767c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800766a:	4805      	ldr	r0, [pc, #20]	@ (8007680 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800766c:	f7ff fe81 	bl	8007372 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007670:	4b02      	ldr	r3, [pc, #8]	@ (800767c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007672:	4618      	mov	r0, r3
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	20000440 	.word	0x20000440
 8007680:	08007cfc 	.word	0x08007cfc

08007684 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800768a:	4b0f      	ldr	r3, [pc, #60]	@ (80076c8 <Get_SerialNum+0x44>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007690:	4b0e      	ldr	r3, [pc, #56]	@ (80076cc <Get_SerialNum+0x48>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007696:	4b0e      	ldr	r3, [pc, #56]	@ (80076d0 <Get_SerialNum+0x4c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4413      	add	r3, r2
 80076a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d009      	beq.n	80076be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80076aa:	2208      	movs	r2, #8
 80076ac:	4909      	ldr	r1, [pc, #36]	@ (80076d4 <Get_SerialNum+0x50>)
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 f814 	bl	80076dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80076b4:	2204      	movs	r2, #4
 80076b6:	4908      	ldr	r1, [pc, #32]	@ (80076d8 <Get_SerialNum+0x54>)
 80076b8:	68b8      	ldr	r0, [r7, #8]
 80076ba:	f000 f80f 	bl	80076dc <IntToUnicode>
  }
}
 80076be:	bf00      	nop
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	1ffff7e8 	.word	0x1ffff7e8
 80076cc:	1ffff7ec 	.word	0x1ffff7ec
 80076d0:	1ffff7f0 	.word	0x1ffff7f0
 80076d4:	2000013e 	.word	0x2000013e
 80076d8:	2000014e 	.word	0x2000014e

080076dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	4613      	mov	r3, r2
 80076e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076ee:	2300      	movs	r3, #0
 80076f0:	75fb      	strb	r3, [r7, #23]
 80076f2:	e027      	b.n	8007744 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	0f1b      	lsrs	r3, r3, #28
 80076f8:	2b09      	cmp	r3, #9
 80076fa:	d80b      	bhi.n	8007714 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	0f1b      	lsrs	r3, r3, #28
 8007700:	b2da      	uxtb	r2, r3
 8007702:	7dfb      	ldrb	r3, [r7, #23]
 8007704:	005b      	lsls	r3, r3, #1
 8007706:	4619      	mov	r1, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	440b      	add	r3, r1
 800770c:	3230      	adds	r2, #48	@ 0x30
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]
 8007712:	e00a      	b.n	800772a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	0f1b      	lsrs	r3, r3, #28
 8007718:	b2da      	uxtb	r2, r3
 800771a:	7dfb      	ldrb	r3, [r7, #23]
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	4619      	mov	r1, r3
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	440b      	add	r3, r1
 8007724:	3237      	adds	r2, #55	@ 0x37
 8007726:	b2d2      	uxtb	r2, r2
 8007728:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	011b      	lsls	r3, r3, #4
 800772e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	3301      	adds	r3, #1
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	4413      	add	r3, r2
 800773a:	2200      	movs	r2, #0
 800773c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800773e:	7dfb      	ldrb	r3, [r7, #23]
 8007740:	3301      	adds	r3, #1
 8007742:	75fb      	strb	r3, [r7, #23]
 8007744:	7dfa      	ldrb	r2, [r7, #23]
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	429a      	cmp	r2, r3
 800774a:	d3d3      	bcc.n	80076f4 <IntToUnicode+0x18>
  }
}
 800774c:	bf00      	nop
 800774e:	bf00      	nop
 8007750:	371c      	adds	r7, #28
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr

08007758 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a0d      	ldr	r2, [pc, #52]	@ (800779c <HAL_PCD_MspInit+0x44>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d113      	bne.n	8007792 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800776a:	4b0d      	ldr	r3, [pc, #52]	@ (80077a0 <HAL_PCD_MspInit+0x48>)
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	4a0c      	ldr	r2, [pc, #48]	@ (80077a0 <HAL_PCD_MspInit+0x48>)
 8007770:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007774:	61d3      	str	r3, [r2, #28]
 8007776:	4b0a      	ldr	r3, [pc, #40]	@ (80077a0 <HAL_PCD_MspInit+0x48>)
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007782:	2200      	movs	r2, #0
 8007784:	2100      	movs	r1, #0
 8007786:	2014      	movs	r0, #20
 8007788:	f7f9 fd0f 	bl	80011aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800778c:	2014      	movs	r0, #20
 800778e:	f7f9 fd28 	bl	80011e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007792:	bf00      	nop
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	40005c00 	.word	0x40005c00
 80077a0:	40021000 	.word	0x40021000

080077a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80077b8:	4619      	mov	r1, r3
 80077ba:	4610      	mov	r0, r2
 80077bc:	f7fe feac 	bl	8006518 <USBD_LL_SetupStage>
}
 80077c0:	bf00      	nop
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	460b      	mov	r3, r1
 80077d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 80077da:	78fa      	ldrb	r2, [r7, #3]
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	4613      	mov	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	00db      	lsls	r3, r3, #3
 80077e6:	440b      	add	r3, r1
 80077e8:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	78fb      	ldrb	r3, [r7, #3]
 80077f0:	4619      	mov	r1, r3
 80077f2:	f7fe fede 	bl	80065b2 <USBD_LL_DataOutStage>
}
 80077f6:	bf00      	nop
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b082      	sub	sp, #8
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	460b      	mov	r3, r1
 8007808:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8007810:	78fa      	ldrb	r2, [r7, #3]
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	4613      	mov	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	440b      	add	r3, r1
 800781e:	333c      	adds	r3, #60	@ 0x3c
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	78fb      	ldrb	r3, [r7, #3]
 8007824:	4619      	mov	r1, r3
 8007826:	f7fe ff35 	bl	8006694 <USBD_LL_DataInStage>
}
 800782a:	bf00      	nop
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8007840:	4618      	mov	r0, r3
 8007842:	f7ff f845 	bl	80068d0 <USBD_LL_SOF>
}
 8007846:	bf00      	nop
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b084      	sub	sp, #16
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007856:	2301      	movs	r3, #1
 8007858:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	2b02      	cmp	r3, #2
 8007860:	d001      	beq.n	8007866 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007862:	f7f9 faab 	bl	8000dbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800786c:	7bfa      	ldrb	r2, [r7, #15]
 800786e:	4611      	mov	r1, r2
 8007870:	4618      	mov	r0, r3
 8007872:	f7fe fff5 	bl	8006860 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800787c:	4618      	mov	r0, r3
 800787e:	f7fe ffae 	bl	80067de <USBD_LL_Reset>
}
 8007882:	bf00      	nop
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
	...

0800788c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800789a:	4618      	mov	r0, r3
 800789c:	f7fe ffef 	bl	800687e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d005      	beq.n	80078b4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078a8:	4b04      	ldr	r3, [pc, #16]	@ (80078bc <HAL_PCD_SuspendCallback+0x30>)
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	4a03      	ldr	r2, [pc, #12]	@ (80078bc <HAL_PCD_SuspendCallback+0x30>)
 80078ae:	f043 0306 	orr.w	r3, r3, #6
 80078b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80078b4:	bf00      	nop
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	e000ed00 	.word	0xe000ed00

080078c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fe ffe9 	bl	80068a6 <USBD_LL_Resume>
}
 80078d4:	bf00      	nop
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80078e4:	4a1f      	ldr	r2, [pc, #124]	@ (8007964 <USBD_LL_Init+0x88>)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a1d      	ldr	r2, [pc, #116]	@ (8007964 <USBD_LL_Init+0x88>)
 80078f0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80078f4:	4b1b      	ldr	r3, [pc, #108]	@ (8007964 <USBD_LL_Init+0x88>)
 80078f6:	4a1c      	ldr	r2, [pc, #112]	@ (8007968 <USBD_LL_Init+0x8c>)
 80078f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80078fa:	4b1a      	ldr	r3, [pc, #104]	@ (8007964 <USBD_LL_Init+0x88>)
 80078fc:	2208      	movs	r2, #8
 80078fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007900:	4b18      	ldr	r3, [pc, #96]	@ (8007964 <USBD_LL_Init+0x88>)
 8007902:	2202      	movs	r2, #2
 8007904:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007906:	4b17      	ldr	r3, [pc, #92]	@ (8007964 <USBD_LL_Init+0x88>)
 8007908:	2200      	movs	r2, #0
 800790a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800790c:	4b15      	ldr	r3, [pc, #84]	@ (8007964 <USBD_LL_Init+0x88>)
 800790e:	2200      	movs	r2, #0
 8007910:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007912:	4b14      	ldr	r3, [pc, #80]	@ (8007964 <USBD_LL_Init+0x88>)
 8007914:	2200      	movs	r2, #0
 8007916:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007918:	4812      	ldr	r0, [pc, #72]	@ (8007964 <USBD_LL_Init+0x88>)
 800791a:	f7f9 fe30 	bl	800157e <HAL_PCD_Init>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007924:	f7f9 fa4a 	bl	8000dbc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800792e:	2318      	movs	r3, #24
 8007930:	2200      	movs	r2, #0
 8007932:	2100      	movs	r1, #0
 8007934:	f7fb fb37 	bl	8002fa6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800793e:	2358      	movs	r3, #88	@ 0x58
 8007940:	2200      	movs	r2, #0
 8007942:	2180      	movs	r1, #128	@ 0x80
 8007944:	f7fb fb2f 	bl	8002fa6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800794e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007952:	2200      	movs	r2, #0
 8007954:	2181      	movs	r1, #129	@ 0x81
 8007956:	f7fb fb26 	bl	8002fa6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	20000640 	.word	0x20000640
 8007968:	40005c00 	.word	0x40005c00

0800796c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007982:	4618      	mov	r0, r3
 8007984:	f7f9 fefa 	bl	800177c <HAL_PCD_Start>
 8007988:	4603      	mov	r3, r0
 800798a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800798c:	7bfb      	ldrb	r3, [r7, #15]
 800798e:	4618      	mov	r0, r3
 8007990:	f000 f93c 	bl	8007c0c <USBD_Get_USB_Status>
 8007994:	4603      	mov	r3, r0
 8007996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007998:	7bbb      	ldrb	r3, [r7, #14]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b084      	sub	sp, #16
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	4608      	mov	r0, r1
 80079ac:	4611      	mov	r1, r2
 80079ae:	461a      	mov	r2, r3
 80079b0:	4603      	mov	r3, r0
 80079b2:	70fb      	strb	r3, [r7, #3]
 80079b4:	460b      	mov	r3, r1
 80079b6:	70bb      	strb	r3, [r7, #2]
 80079b8:	4613      	mov	r3, r2
 80079ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079bc:	2300      	movs	r3, #0
 80079be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80079ca:	78bb      	ldrb	r3, [r7, #2]
 80079cc:	883a      	ldrh	r2, [r7, #0]
 80079ce:	78f9      	ldrb	r1, [r7, #3]
 80079d0:	f7fa f84f 	bl	8001a72 <HAL_PCD_EP_Open>
 80079d4:	4603      	mov	r3, r0
 80079d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 f916 	bl	8007c0c <USBD_Get_USB_Status>
 80079e0:	4603      	mov	r3, r0
 80079e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	460b      	mov	r3, r1
 80079f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007a08:	78fa      	ldrb	r2, [r7, #3]
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7fa f88d 	bl	8001b2c <HAL_PCD_EP_Close>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 f8f7 	bl	8007c0c <USBD_Get_USB_Status>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	460b      	mov	r3, r1
 8007a36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007a46:	78fa      	ldrb	r2, [r7, #3]
 8007a48:	4611      	mov	r1, r2
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fa f91e 	bl	8001c8c <HAL_PCD_EP_SetStall>
 8007a50:	4603      	mov	r3, r0
 8007a52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 f8d8 	bl	8007c0c <USBD_Get_USB_Status>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b084      	sub	sp, #16
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	460b      	mov	r3, r1
 8007a74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007a84:	78fa      	ldrb	r2, [r7, #3]
 8007a86:	4611      	mov	r1, r2
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fa f95f 	bl	8001d4c <HAL_PCD_EP_ClrStall>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a92:	7bfb      	ldrb	r3, [r7, #15]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 f8b9 	bl	8007c0c <USBD_Get_USB_Status>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007aba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	da0c      	bge.n	8007ade <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ac4:	78fb      	ldrb	r3, [r7, #3]
 8007ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007aca:	68f9      	ldr	r1, [r7, #12]
 8007acc:	1c5a      	adds	r2, r3, #1
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	00db      	lsls	r3, r3, #3
 8007ad6:	440b      	add	r3, r1
 8007ad8:	3302      	adds	r3, #2
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	e00b      	b.n	8007af6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ade:	78fb      	ldrb	r3, [r7, #3]
 8007ae0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ae4:	68f9      	ldr	r1, [r7, #12]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	440b      	add	r3, r1
 8007af0:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8007af4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bc80      	pop	{r7}
 8007afe:	4770      	bx	lr

08007b00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007b1a:	78fa      	ldrb	r2, [r7, #3]
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7f9 ff82 	bl	8001a28 <HAL_PCD_SetAddress>
 8007b24:	4603      	mov	r3, r0
 8007b26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 f86e 	bl	8007c0c <USBD_Get_USB_Status>
 8007b30:	4603      	mov	r3, r0
 8007b32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b086      	sub	sp, #24
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	60f8      	str	r0, [r7, #12]
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	72fb      	strb	r3, [r7, #11]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007b60:	893b      	ldrh	r3, [r7, #8]
 8007b62:	7af9      	ldrb	r1, [r7, #11]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	f7fa f85a 	bl	8001c1e <HAL_PCD_EP_Transmit>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 f84b 	bl	8007c0c <USBD_Get_USB_Status>
 8007b76:	4603      	mov	r3, r0
 8007b78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3718      	adds	r7, #24
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	607a      	str	r2, [r7, #4]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	460b      	mov	r3, r1
 8007b92:	72fb      	strb	r3, [r7, #11]
 8007b94:	4613      	mov	r3, r2
 8007b96:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007ba6:	893b      	ldrh	r3, [r7, #8]
 8007ba8:	7af9      	ldrb	r1, [r7, #11]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	f7fa f806 	bl	8001bbc <HAL_PCD_EP_Receive>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bb4:	7dfb      	ldrb	r3, [r7, #23]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 f828 	bl	8007c0c <USBD_Get_USB_Status>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007bc0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
	...

08007bcc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007bd4:	4b02      	ldr	r3, [pc, #8]	@ (8007be0 <USBD_static_malloc+0x14>)
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bc80      	pop	{r7}
 8007bde:	4770      	bx	lr
 8007be0:	20000930 	.word	0x20000930

08007be4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]

}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bc80      	pop	{r7}
 8007bf4:	4770      	bx	lr

08007bf6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007c02:	bf00      	nop
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bc80      	pop	{r7}
 8007c0a:	4770      	bx	lr

08007c0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	4603      	mov	r3, r0
 8007c14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c1a:	79fb      	ldrb	r3, [r7, #7]
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d817      	bhi.n	8007c50 <USBD_Get_USB_Status+0x44>
 8007c20:	a201      	add	r2, pc, #4	@ (adr r2, 8007c28 <USBD_Get_USB_Status+0x1c>)
 8007c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c26:	bf00      	nop
 8007c28:	08007c39 	.word	0x08007c39
 8007c2c:	08007c3f 	.word	0x08007c3f
 8007c30:	08007c45 	.word	0x08007c45
 8007c34:	08007c4b 	.word	0x08007c4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c3c:	e00b      	b.n	8007c56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c3e:	2302      	movs	r3, #2
 8007c40:	73fb      	strb	r3, [r7, #15]
    break;
 8007c42:	e008      	b.n	8007c56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c44:	2301      	movs	r3, #1
 8007c46:	73fb      	strb	r3, [r7, #15]
    break;
 8007c48:	e005      	b.n	8007c56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c4e:	e002      	b.n	8007c56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c50:	2302      	movs	r3, #2
 8007c52:	73fb      	strb	r3, [r7, #15]
    break;
 8007c54:	bf00      	nop
  }
  return usb_status;
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bc80      	pop	{r7}
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop

08007c64 <memset>:
 8007c64:	4603      	mov	r3, r0
 8007c66:	4402      	add	r2, r0
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d100      	bne.n	8007c6e <memset+0xa>
 8007c6c:	4770      	bx	lr
 8007c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c72:	e7f9      	b.n	8007c68 <memset+0x4>

08007c74 <__libc_init_array>:
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	2600      	movs	r6, #0
 8007c78:	4d0c      	ldr	r5, [pc, #48]	@ (8007cac <__libc_init_array+0x38>)
 8007c7a:	4c0d      	ldr	r4, [pc, #52]	@ (8007cb0 <__libc_init_array+0x3c>)
 8007c7c:	1b64      	subs	r4, r4, r5
 8007c7e:	10a4      	asrs	r4, r4, #2
 8007c80:	42a6      	cmp	r6, r4
 8007c82:	d109      	bne.n	8007c98 <__libc_init_array+0x24>
 8007c84:	f000 f81a 	bl	8007cbc <_init>
 8007c88:	2600      	movs	r6, #0
 8007c8a:	4d0a      	ldr	r5, [pc, #40]	@ (8007cb4 <__libc_init_array+0x40>)
 8007c8c:	4c0a      	ldr	r4, [pc, #40]	@ (8007cb8 <__libc_init_array+0x44>)
 8007c8e:	1b64      	subs	r4, r4, r5
 8007c90:	10a4      	asrs	r4, r4, #2
 8007c92:	42a6      	cmp	r6, r4
 8007c94:	d105      	bne.n	8007ca2 <__libc_init_array+0x2e>
 8007c96:	bd70      	pop	{r4, r5, r6, pc}
 8007c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c9c:	4798      	blx	r3
 8007c9e:	3601      	adds	r6, #1
 8007ca0:	e7ee      	b.n	8007c80 <__libc_init_array+0xc>
 8007ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ca6:	4798      	blx	r3
 8007ca8:	3601      	adds	r6, #1
 8007caa:	e7f2      	b.n	8007c92 <__libc_init_array+0x1e>
 8007cac:	08007d30 	.word	0x08007d30
 8007cb0:	08007d30 	.word	0x08007d30
 8007cb4:	08007d30 	.word	0x08007d30
 8007cb8:	08007d34 	.word	0x08007d34

08007cbc <_init>:
 8007cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cbe:	bf00      	nop
 8007cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc2:	bc08      	pop	{r3}
 8007cc4:	469e      	mov	lr, r3
 8007cc6:	4770      	bx	lr

08007cc8 <_fini>:
 8007cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cca:	bf00      	nop
 8007ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cce:	bc08      	pop	{r3}
 8007cd0:	469e      	mov	lr, r3
 8007cd2:	4770      	bx	lr
