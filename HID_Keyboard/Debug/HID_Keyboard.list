
HID_Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bb0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08007cbc  08007cbc  00008cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d18  08007d18  00009158  2**0
                  CONTENTS
  4 .ARM          00000000  08007d18  08007d18  00009158  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d18  08007d18  00009158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d18  08007d18  00008d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d1c  08007d1c  00008d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  08007d20  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ec  20000158  08007e78  00009158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000944  08007e78  00009944  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1a1  00000000  00000000  00009181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002709  00000000  00000000  00014322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  00016a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000074e  00000000  00000000  00017438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e34  00000000  00000000  00017b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce93  00000000  00000000  000309ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000844e4  00000000  00000000  0003d84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1d31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002674  00000000  00000000  000c1d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c43e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	08007ca4 	.word	0x08007ca4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	08007ca4 	.word	0x08007ca4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fec1 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 fd65 	bl	8000c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fdbd 	bl	8000cd8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015e:	f007 f9bb 	bl	80074d8 <MX_USB_DEVICE_Init>
      	uint8_t KEYCODE04;
      	uint8_t KEYCODE05;
      	uint8_t KEYCODE06;
      } keyboardReportsDes;

      keyboardReportsDes HIDKeyboard = {0,0,0,0,0,0,0};
 8000162:	463b      	mov	r3, r7
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
 8000168:	605a      	str	r2, [r3, #4]

      short control = 0;
 800016a:	2300      	movs	r3, #0
 800016c:	81fb      	strh	r3, [r7, #14]
      /* Infinite loop */
      /* USER CODE BEGIN WHILE */
      while (1)
      {
    	  uint8_t *ptr_key = &HIDKeyboard.KEYCODE01;
 800016e:	463b      	mov	r3, r7
 8000170:	3302      	adds	r3, #2
 8000172:	60bb      	str	r3, [r7, #8]
    	  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000174:	2201      	movs	r2, #1
 8000176:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800017a:	48a5      	ldr	r0, [pc, #660]	@ (8000410 <main+0x2c4>)
 800017c:	f001 f9db 	bl	8001536 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000186:	48a2      	ldr	r0, [pc, #648]	@ (8000410 <main+0x2c4>)
 8000188:	f001 f9d5 	bl	8001536 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 800018c:	2201      	movs	r2, #1
 800018e:	2180      	movs	r1, #128	@ 0x80
 8000190:	489f      	ldr	r0, [pc, #636]	@ (8000410 <main+0x2c4>)
 8000192:	f001 f9d0 	bl	8001536 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2140      	movs	r1, #64	@ 0x40
 800019a:	489d      	ldr	r0, [pc, #628]	@ (8000410 <main+0x2c4>)
 800019c:	f001 f9cb 	bl	8001536 <HAL_GPIO_WritePin>

    	    control = 0;
 80001a0:	2300      	movs	r3, #0
 80001a2:	81fb      	strh	r3, [r7, #14]
    	    HIDKeyboard.MODIFIER = 0X00;
 80001a4:	2300      	movs	r3, #0
 80001a6:	703b      	strb	r3, [r7, #0]
      		if (!(HAL_GPIO_ReadPin(C8_GPIO_Port, C8_Pin))){
 80001a8:	2102      	movs	r1, #2
 80001aa:	489a      	ldr	r0, [pc, #616]	@ (8000414 <main+0x2c8>)
 80001ac:	f001 f9ac 	bl	8001508 <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d101      	bne.n	80001ba <main+0x6e>
    			HIDKeyboard.MODIFIER = 0X02;
 80001b6:	2302      	movs	r3, #2
 80001b8:	703b      	strb	r3, [r7, #0]
      		}

      		if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 80001ba:	2102      	movs	r1, #2
 80001bc:	4894      	ldr	r0, [pc, #592]	@ (8000410 <main+0x2c4>)
 80001be:	f001 f9a3 	bl	8001508 <HAL_GPIO_ReadPin>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d101      	bne.n	80001cc <main+0x80>
      			control = 1;
 80001c8:	2301      	movs	r3, #1
 80001ca:	81fb      	strh	r3, [r7, #14]
      		}

      		if (!(HAL_GPIO_ReadPin(C5_GPIO_Port, C5_Pin))){
 80001cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001d0:	4890      	ldr	r0, [pc, #576]	@ (8000414 <main+0x2c8>)
 80001d2:	f001 f999 	bl	8001508 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d103      	bne.n	80001e4 <main+0x98>
      			HIDKeyboard.MODIFIER = HIDKeyboard.MODIFIER + 0X01;
 80001dc:	783b      	ldrb	r3, [r7, #0]
 80001de:	3301      	adds	r3, #1
 80001e0:	b2db      	uxtb	r3, r3
 80001e2:	703b      	strb	r3, [r7, #0]
    		}

      		if (!(HAL_GPIO_ReadPin(C7_GPIO_Port, C7_Pin))){
 80001e4:	2104      	movs	r1, #4
 80001e6:	488a      	ldr	r0, [pc, #552]	@ (8000410 <main+0x2c4>)
 80001e8:	f001 f98e 	bl	8001508 <HAL_GPIO_ReadPin>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d103      	bne.n	80001fa <main+0xae>
      			HIDKeyboard.MODIFIER = HIDKeyboard.MODIFIER + 0X04;
 80001f2:	783b      	ldrb	r3, [r7, #0]
 80001f4:	3304      	adds	r3, #4
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	703b      	strb	r3, [r7, #0]
      		}

      		if (!(HAL_GPIO_ReadPin(C9_GPIO_Port, C9_Pin))){
 80001fa:	2101      	movs	r1, #1
 80001fc:	4885      	ldr	r0, [pc, #532]	@ (8000414 <main+0x2c8>)
 80001fe:	f001 f983 	bl	8001508 <HAL_GPIO_ReadPin>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d108      	bne.n	800021a <main+0xce>
      			if(control == 1){
 8000208:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800020c:	2b01      	cmp	r3, #1
 800020e:	d102      	bne.n	8000216 <main+0xca>
      				control = 3;
 8000210:	2303      	movs	r3, #3
 8000212:	81fb      	strh	r3, [r7, #14]
 8000214:	e001      	b.n	800021a <main+0xce>
      			}else{
      				control = 4;
 8000216:	2304      	movs	r3, #4
 8000218:	81fb      	strh	r3, [r7, #14]
      			}
      		}

      		if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)) && !(HAL_GPIO_ReadPin(C7_GPIO_Port, C7_Pin))){
 800021a:	2102      	movs	r1, #2
 800021c:	487c      	ldr	r0, [pc, #496]	@ (8000410 <main+0x2c4>)
 800021e:	f001 f973 	bl	8001508 <HAL_GPIO_ReadPin>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d108      	bne.n	800023a <main+0xee>
 8000228:	2104      	movs	r1, #4
 800022a:	4879      	ldr	r0, [pc, #484]	@ (8000410 <main+0x2c4>)
 800022c:	f001 f96c 	bl	8001508 <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d101      	bne.n	800023a <main+0xee>
      			HIDKeyboard.MODIFIER = 0X08;
 8000236:	2308      	movs	r3, #8
 8000238:	703b      	strb	r3, [r7, #0]
			}

      		if ((!(HAL_GPIO_ReadPin(C8_GPIO_Port, C8_Pin))) && control == 3){
 800023a:	2102      	movs	r1, #2
 800023c:	4875      	ldr	r0, [pc, #468]	@ (8000414 <main+0x2c8>)
 800023e:	f001 f963 	bl	8001508 <HAL_GPIO_ReadPin>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d112      	bne.n	800026e <main+0x122>
 8000248:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800024c:	2b03      	cmp	r3, #3
 800024e:	d10e      	bne.n	800026e <main+0x122>
      			*ptr_key = 0X39;
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	2239      	movs	r2, #57	@ 0x39
 8000254:	701a      	strb	r2, [r3, #0]
      			if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000256:	463b      	mov	r3, r7
 8000258:	3307      	adds	r3, #7
 800025a:	68ba      	ldr	r2, [r7, #8]
 800025c:	429a      	cmp	r2, r3
 800025e:	d003      	beq.n	8000268 <main+0x11c>
				{
					ptr_key++;
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	3301      	adds	r3, #1
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	e002      	b.n	800026e <main+0x122>
				}else{
					ptr_key = &HIDKeyboard.KEYCODE01;
 8000268:	463b      	mov	r3, r7
 800026a:	3302      	adds	r3, #2
 800026c:	60bb      	str	r3, [r7, #8]
				}
      		}

    	  	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000274:	4866      	ldr	r0, [pc, #408]	@ (8000410 <main+0x2c4>)
 8000276:	f001 f95e 	bl	8001536 <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 800027a:	2201      	movs	r2, #1
 800027c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000280:	4863      	ldr	r0, [pc, #396]	@ (8000410 <main+0x2c4>)
 8000282:	f001 f958 	bl	8001536 <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000286:	2201      	movs	r2, #1
 8000288:	2180      	movs	r1, #128	@ 0x80
 800028a:	4861      	ldr	r0, [pc, #388]	@ (8000410 <main+0x2c4>)
 800028c:	f001 f953 	bl	8001536 <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000290:	2201      	movs	r2, #1
 8000292:	2140      	movs	r1, #64	@ 0x40
 8000294:	485e      	ldr	r0, [pc, #376]	@ (8000410 <main+0x2c4>)
 8000296:	f001 f94e 	bl	8001536 <HAL_GPIO_WritePin>

				if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 800029a:	2120      	movs	r1, #32
 800029c:	485c      	ldr	r0, [pc, #368]	@ (8000410 <main+0x2c4>)
 800029e:	f001 f933 	bl	8001508 <HAL_GPIO_ReadPin>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d122      	bne.n	80002ee <main+0x1a2>
					switch(control){
 80002a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80002ac:	2b04      	cmp	r3, #4
 80002ae:	d00e      	beq.n	80002ce <main+0x182>
 80002b0:	2b04      	cmp	r3, #4
 80002b2:	dc10      	bgt.n	80002d6 <main+0x18a>
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d002      	beq.n	80002be <main+0x172>
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d004      	beq.n	80002c6 <main+0x17a>
 80002bc:	e00b      	b.n	80002d6 <main+0x18a>
					case 0:
						*ptr_key = 0X14;
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	2214      	movs	r2, #20
 80002c2:	701a      	strb	r2, [r3, #0]
						break;
 80002c4:	e007      	b.n	80002d6 <main+0x18a>
					case 1:
						*ptr_key = 0X1E;
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	221e      	movs	r2, #30
 80002ca:	701a      	strb	r2, [r3, #0]
						break;
 80002cc:	e003      	b.n	80002d6 <main+0x18a>
					case 4:
						*ptr_key = 0x3A;
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	223a      	movs	r2, #58	@ 0x3a
 80002d2:	701a      	strb	r2, [r3, #0]
						break;
 80002d4:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80002d6:	463b      	mov	r3, r7
 80002d8:	3307      	adds	r3, #7
 80002da:	68ba      	ldr	r2, [r7, #8]
 80002dc:	429a      	cmp	r2, r3
 80002de:	d003      	beq.n	80002e8 <main+0x19c>
					{
						ptr_key++;
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	3301      	adds	r3, #1
 80002e4:	60bb      	str	r3, [r7, #8]
 80002e6:	e002      	b.n	80002ee <main+0x1a2>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 80002e8:	463b      	mov	r3, r7
 80002ea:	3302      	adds	r3, #2
 80002ec:	60bb      	str	r3, [r7, #8]
					}
				}

				if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 80002ee:	2110      	movs	r1, #16
 80002f0:	4847      	ldr	r0, [pc, #284]	@ (8000410 <main+0x2c4>)
 80002f2:	f001 f909 	bl	8001508 <HAL_GPIO_ReadPin>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d122      	bne.n	8000342 <main+0x1f6>
					switch(control){
 80002fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000300:	2b04      	cmp	r3, #4
 8000302:	d00e      	beq.n	8000322 <main+0x1d6>
 8000304:	2b04      	cmp	r3, #4
 8000306:	dc10      	bgt.n	800032a <main+0x1de>
 8000308:	2b00      	cmp	r3, #0
 800030a:	d002      	beq.n	8000312 <main+0x1c6>
 800030c:	2b01      	cmp	r3, #1
 800030e:	d004      	beq.n	800031a <main+0x1ce>
 8000310:	e00b      	b.n	800032a <main+0x1de>
						case 0:
							*ptr_key = 0x1A;
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	221a      	movs	r2, #26
 8000316:	701a      	strb	r2, [r3, #0]
							break;
 8000318:	e007      	b.n	800032a <main+0x1de>
						case 1:
							*ptr_key = 0X1F;
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	221f      	movs	r2, #31
 800031e:	701a      	strb	r2, [r3, #0]
							break;
 8000320:	e003      	b.n	800032a <main+0x1de>
						case 4:
							*ptr_key = 0x3B;
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	223b      	movs	r2, #59	@ 0x3b
 8000326:	701a      	strb	r2, [r3, #0]
							break;
 8000328:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 800032a:	463b      	mov	r3, r7
 800032c:	3307      	adds	r3, #7
 800032e:	68ba      	ldr	r2, [r7, #8]
 8000330:	429a      	cmp	r2, r3
 8000332:	d003      	beq.n	800033c <main+0x1f0>
					{
						ptr_key++;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	3301      	adds	r3, #1
 8000338:	60bb      	str	r3, [r7, #8]
 800033a:	e002      	b.n	8000342 <main+0x1f6>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 800033c:	463b      	mov	r3, r7
 800033e:	3302      	adds	r3, #2
 8000340:	60bb      	str	r3, [r7, #8]
					}
				}

				if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8000342:	2102      	movs	r1, #2
 8000344:	4832      	ldr	r0, [pc, #200]	@ (8000410 <main+0x2c4>)
 8000346:	f001 f8df 	bl	8001508 <HAL_GPIO_ReadPin>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d122      	bne.n	8000396 <main+0x24a>
					switch(control){
 8000350:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000354:	2b04      	cmp	r3, #4
 8000356:	d00e      	beq.n	8000376 <main+0x22a>
 8000358:	2b04      	cmp	r3, #4
 800035a:	dc10      	bgt.n	800037e <main+0x232>
 800035c:	2b00      	cmp	r3, #0
 800035e:	d002      	beq.n	8000366 <main+0x21a>
 8000360:	2b01      	cmp	r3, #1
 8000362:	d004      	beq.n	800036e <main+0x222>
 8000364:	e00b      	b.n	800037e <main+0x232>
						case 0:
							*ptr_key = 0X08;
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	2208      	movs	r2, #8
 800036a:	701a      	strb	r2, [r3, #0]
							break;
 800036c:	e007      	b.n	800037e <main+0x232>
						case 1:
							*ptr_key = 0X20;
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	2220      	movs	r2, #32
 8000372:	701a      	strb	r2, [r3, #0]
							break;
 8000374:	e003      	b.n	800037e <main+0x232>
						case 4:
							*ptr_key = 0x3C;
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	223c      	movs	r2, #60	@ 0x3c
 800037a:	701a      	strb	r2, [r3, #0]
							break;
 800037c:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 800037e:	463b      	mov	r3, r7
 8000380:	3307      	adds	r3, #7
 8000382:	68ba      	ldr	r2, [r7, #8]
 8000384:	429a      	cmp	r2, r3
 8000386:	d003      	beq.n	8000390 <main+0x244>
					{
						ptr_key++;
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	3301      	adds	r3, #1
 800038c:	60bb      	str	r3, [r7, #8]
 800038e:	e002      	b.n	8000396 <main+0x24a>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000390:	463b      	mov	r3, r7
 8000392:	3302      	adds	r3, #2
 8000394:	60bb      	str	r3, [r7, #8]
					}
				}


				if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000396:	2101      	movs	r1, #1
 8000398:	481d      	ldr	r0, [pc, #116]	@ (8000410 <main+0x2c4>)
 800039a:	f001 f8b5 	bl	8001508 <HAL_GPIO_ReadPin>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d122      	bne.n	80003ea <main+0x29e>
					switch(control){
 80003a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003a8:	2b04      	cmp	r3, #4
 80003aa:	d00e      	beq.n	80003ca <main+0x27e>
 80003ac:	2b04      	cmp	r3, #4
 80003ae:	dc10      	bgt.n	80003d2 <main+0x286>
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d002      	beq.n	80003ba <main+0x26e>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d004      	beq.n	80003c2 <main+0x276>
 80003b8:	e00b      	b.n	80003d2 <main+0x286>
						case 0:
							*ptr_key = 0X15;
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	2215      	movs	r2, #21
 80003be:	701a      	strb	r2, [r3, #0]
							break;
 80003c0:	e007      	b.n	80003d2 <main+0x286>
						case 1:
							*ptr_key = 0X21;
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	2221      	movs	r2, #33	@ 0x21
 80003c6:	701a      	strb	r2, [r3, #0]
							break;
 80003c8:	e003      	b.n	80003d2 <main+0x286>
						case 4:
							*ptr_key = 0x3D;
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	223d      	movs	r2, #61	@ 0x3d
 80003ce:	701a      	strb	r2, [r3, #0]
							break;
 80003d0:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80003d2:	463b      	mov	r3, r7
 80003d4:	3307      	adds	r3, #7
 80003d6:	68ba      	ldr	r2, [r7, #8]
 80003d8:	429a      	cmp	r2, r3
 80003da:	d003      	beq.n	80003e4 <main+0x298>
					{
						ptr_key++;
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	3301      	adds	r3, #1
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	e002      	b.n	80003ea <main+0x29e>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 80003e4:	463b      	mov	r3, r7
 80003e6:	3302      	adds	r3, #2
 80003e8:	60bb      	str	r3, [r7, #8]
					}
				}

			   if (!(HAL_GPIO_ReadPin(C5_GPIO_Port, C5_Pin))){
 80003ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003ee:	4809      	ldr	r0, [pc, #36]	@ (8000414 <main+0x2c8>)
 80003f0:	f001 f88a 	bl	8001508 <HAL_GPIO_ReadPin>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d11e      	bne.n	8000438 <main+0x2ec>
					switch(control){
 80003fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d002      	beq.n	8000408 <main+0x2bc>
 8000402:	2b01      	cmp	r3, #1
 8000404:	d008      	beq.n	8000418 <main+0x2cc>
 8000406:	e00b      	b.n	8000420 <main+0x2d4>

						case 0:
							*ptr_key = 0X17;
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	2217      	movs	r2, #23
 800040c:	701a      	strb	r2, [r3, #0]
							break;
 800040e:	e007      	b.n	8000420 <main+0x2d4>
 8000410:	40010800 	.word	0x40010800
 8000414:	40010c00 	.word	0x40010c00
						case 1:
							*ptr_key = 0X22;
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	2222      	movs	r2, #34	@ 0x22
 800041c:	701a      	strb	r2, [r3, #0]
							break;
 800041e:	bf00      	nop
					 }
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000420:	463b      	mov	r3, r7
 8000422:	3307      	adds	r3, #7
 8000424:	68ba      	ldr	r2, [r7, #8]
 8000426:	429a      	cmp	r2, r3
 8000428:	d003      	beq.n	8000432 <main+0x2e6>
					{
						ptr_key++;
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	3301      	adds	r3, #1
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	e002      	b.n	8000438 <main+0x2ec>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000432:	463b      	mov	r3, r7
 8000434:	3302      	adds	r3, #2
 8000436:	60bb      	str	r3, [r7, #8]
					}
			   }

			   if (!(HAL_GPIO_ReadPin(C6_GPIO_Port, C6_Pin))){
 8000438:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800043c:	48a5      	ldr	r0, [pc, #660]	@ (80006d4 <main+0x588>)
 800043e:	f001 f863 	bl	8001508 <HAL_GPIO_ReadPin>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d11a      	bne.n	800047e <main+0x332>
					switch(control){
 8000448:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d002      	beq.n	8000456 <main+0x30a>
 8000450:	2b01      	cmp	r3, #1
 8000452:	d004      	beq.n	800045e <main+0x312>
 8000454:	e007      	b.n	8000466 <main+0x31a>
						case 0:
							*ptr_key = 0X1C;
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	221c      	movs	r2, #28
 800045a:	701a      	strb	r2, [r3, #0]
							break;
 800045c:	e003      	b.n	8000466 <main+0x31a>
						case 1:
							*ptr_key = 0X23;
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	2223      	movs	r2, #35	@ 0x23
 8000462:	701a      	strb	r2, [r3, #0]
							break;
 8000464:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000466:	463b      	mov	r3, r7
 8000468:	3307      	adds	r3, #7
 800046a:	68ba      	ldr	r2, [r7, #8]
 800046c:	429a      	cmp	r2, r3
 800046e:	d003      	beq.n	8000478 <main+0x32c>
					{
						ptr_key++;
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	3301      	adds	r3, #1
 8000474:	60bb      	str	r3, [r7, #8]
 8000476:	e002      	b.n	800047e <main+0x332>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000478:	463b      	mov	r3, r7
 800047a:	3302      	adds	r3, #2
 800047c:	60bb      	str	r3, [r7, #8]
					}
				}

			   if (!(HAL_GPIO_ReadPin(C7_GPIO_Port, C7_Pin))){
 800047e:	2104      	movs	r1, #4
 8000480:	4895      	ldr	r0, [pc, #596]	@ (80006d8 <main+0x58c>)
 8000482:	f001 f841 	bl	8001508 <HAL_GPIO_ReadPin>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d11a      	bne.n	80004c2 <main+0x376>
					switch(control){
 800048c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d002      	beq.n	800049a <main+0x34e>
 8000494:	2b01      	cmp	r3, #1
 8000496:	d004      	beq.n	80004a2 <main+0x356>
 8000498:	e007      	b.n	80004aa <main+0x35e>
						case 0:
							*ptr_key = 0X18;
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	2218      	movs	r2, #24
 800049e:	701a      	strb	r2, [r3, #0]
							break;
 80004a0:	e003      	b.n	80004aa <main+0x35e>
						case 1:
							*ptr_key = 0X24;
 80004a2:	68bb      	ldr	r3, [r7, #8]
 80004a4:	2224      	movs	r2, #36	@ 0x24
 80004a6:	701a      	strb	r2, [r3, #0]
							break;
 80004a8:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80004aa:	463b      	mov	r3, r7
 80004ac:	3307      	adds	r3, #7
 80004ae:	68ba      	ldr	r2, [r7, #8]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d003      	beq.n	80004bc <main+0x370>
					{
						ptr_key++;
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	3301      	adds	r3, #1
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	e002      	b.n	80004c2 <main+0x376>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 80004bc:	463b      	mov	r3, r7
 80004be:	3302      	adds	r3, #2
 80004c0:	60bb      	str	r3, [r7, #8]
					}
				}

			   if (!(HAL_GPIO_ReadPin(C8_GPIO_Port, C8_Pin))){
 80004c2:	2102      	movs	r1, #2
 80004c4:	4883      	ldr	r0, [pc, #524]	@ (80006d4 <main+0x588>)
 80004c6:	f001 f81f 	bl	8001508 <HAL_GPIO_ReadPin>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d11a      	bne.n	8000506 <main+0x3ba>
					switch(control){
 80004d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d002      	beq.n	80004de <main+0x392>
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d004      	beq.n	80004e6 <main+0x39a>
 80004dc:	e007      	b.n	80004ee <main+0x3a2>
						case 0:
							*ptr_key = 0X0C;
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	220c      	movs	r2, #12
 80004e2:	701a      	strb	r2, [r3, #0]
							break;
 80004e4:	e003      	b.n	80004ee <main+0x3a2>
						case 1:
							*ptr_key = 0X25;
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	2225      	movs	r2, #37	@ 0x25
 80004ea:	701a      	strb	r2, [r3, #0]
							break;
 80004ec:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80004ee:	463b      	mov	r3, r7
 80004f0:	3307      	adds	r3, #7
 80004f2:	68ba      	ldr	r2, [r7, #8]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d003      	beq.n	8000500 <main+0x3b4>
					{
						ptr_key++;
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	3301      	adds	r3, #1
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	e002      	b.n	8000506 <main+0x3ba>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000500:	463b      	mov	r3, r7
 8000502:	3302      	adds	r3, #2
 8000504:	60bb      	str	r3, [r7, #8]
					}
				}

			   if (!(HAL_GPIO_ReadPin(C9_GPIO_Port, C9_Pin))){
 8000506:	2101      	movs	r1, #1
 8000508:	4872      	ldr	r0, [pc, #456]	@ (80006d4 <main+0x588>)
 800050a:	f000 fffd 	bl	8001508 <HAL_GPIO_ReadPin>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d11a      	bne.n	800054a <main+0x3fe>
					switch(control){
 8000514:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d002      	beq.n	8000522 <main+0x3d6>
 800051c:	2b01      	cmp	r3, #1
 800051e:	d004      	beq.n	800052a <main+0x3de>
 8000520:	e007      	b.n	8000532 <main+0x3e6>
						case 0:
							*ptr_key = 0X12;
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	2212      	movs	r2, #18
 8000526:	701a      	strb	r2, [r3, #0]
							break;
 8000528:	e003      	b.n	8000532 <main+0x3e6>
						case 1:
							*ptr_key = 0X26;
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	2226      	movs	r2, #38	@ 0x26
 800052e:	701a      	strb	r2, [r3, #0]
							break;
 8000530:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000532:	463b      	mov	r3, r7
 8000534:	3307      	adds	r3, #7
 8000536:	68ba      	ldr	r2, [r7, #8]
 8000538:	429a      	cmp	r2, r3
 800053a:	d003      	beq.n	8000544 <main+0x3f8>
					{
						ptr_key++;
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	3301      	adds	r3, #1
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	e002      	b.n	800054a <main+0x3fe>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000544:	463b      	mov	r3, r7
 8000546:	3302      	adds	r3, #2
 8000548:	60bb      	str	r3, [r7, #8]
					}
				}

			   if (!(HAL_GPIO_ReadPin(C10_GPIO_Port, C10_Pin))){
 800054a:	2108      	movs	r1, #8
 800054c:	4862      	ldr	r0, [pc, #392]	@ (80006d8 <main+0x58c>)
 800054e:	f000 ffdb 	bl	8001508 <HAL_GPIO_ReadPin>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d11a      	bne.n	800058e <main+0x442>
					switch(control){
 8000558:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d002      	beq.n	8000566 <main+0x41a>
 8000560:	2b01      	cmp	r3, #1
 8000562:	d004      	beq.n	800056e <main+0x422>
 8000564:	e007      	b.n	8000576 <main+0x42a>
						case 0:
							*ptr_key = 0X13;
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	2213      	movs	r2, #19
 800056a:	701a      	strb	r2, [r3, #0]
							break;
 800056c:	e003      	b.n	8000576 <main+0x42a>
						case 1:
							*ptr_key = 0X27;
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	2227      	movs	r2, #39	@ 0x27
 8000572:	701a      	strb	r2, [r3, #0]
							break;
 8000574:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000576:	463b      	mov	r3, r7
 8000578:	3307      	adds	r3, #7
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	429a      	cmp	r2, r3
 800057e:	d003      	beq.n	8000588 <main+0x43c>
					{
						ptr_key++;
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	3301      	adds	r3, #1
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	e002      	b.n	800058e <main+0x442>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000588:	463b      	mov	r3, r7
 800058a:	3302      	adds	r3, #2
 800058c:	60bb      	str	r3, [r7, #8]
					}
			   }

    	  	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000594:	4850      	ldr	r0, [pc, #320]	@ (80006d8 <main+0x58c>)
 8000596:	f000 ffce 	bl	8001536 <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005a0:	484d      	ldr	r0, [pc, #308]	@ (80006d8 <main+0x58c>)
 80005a2:	f000 ffc8 	bl	8001536 <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2180      	movs	r1, #128	@ 0x80
 80005aa:	484b      	ldr	r0, [pc, #300]	@ (80006d8 <main+0x58c>)
 80005ac:	f000 ffc3 	bl	8001536 <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2140      	movs	r1, #64	@ 0x40
 80005b4:	4848      	ldr	r0, [pc, #288]	@ (80006d8 <main+0x58c>)
 80005b6:	f000 ffbe 	bl	8001536 <HAL_GPIO_WritePin>

				if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 80005ba:	2120      	movs	r1, #32
 80005bc:	4846      	ldr	r0, [pc, #280]	@ (80006d8 <main+0x58c>)
 80005be:	f000 ffa3 	bl	8001508 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d122      	bne.n	800060e <main+0x4c2>
					switch(control){
 80005c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005cc:	2b04      	cmp	r3, #4
 80005ce:	d00e      	beq.n	80005ee <main+0x4a2>
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	dc10      	bgt.n	80005f6 <main+0x4aa>
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d002      	beq.n	80005de <main+0x492>
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d004      	beq.n	80005e6 <main+0x49a>
 80005dc:	e00b      	b.n	80005f6 <main+0x4aa>
						case 0:
							*ptr_key = 0X04;
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	2204      	movs	r2, #4
 80005e2:	701a      	strb	r2, [r3, #0]
							break;
 80005e4:	e007      	b.n	80005f6 <main+0x4aa>
						case 1:
							*ptr_key = 0X29;
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	2229      	movs	r2, #41	@ 0x29
 80005ea:	701a      	strb	r2, [r3, #0]
							break;
 80005ec:	e003      	b.n	80005f6 <main+0x4aa>
						case 4:
							*ptr_key = 0x3E;
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	223e      	movs	r2, #62	@ 0x3e
 80005f2:	701a      	strb	r2, [r3, #0]
							break;
 80005f4:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80005f6:	463b      	mov	r3, r7
 80005f8:	3307      	adds	r3, #7
 80005fa:	68ba      	ldr	r2, [r7, #8]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d003      	beq.n	8000608 <main+0x4bc>
					{
						ptr_key++;
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	3301      	adds	r3, #1
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	e002      	b.n	800060e <main+0x4c2>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000608:	463b      	mov	r3, r7
 800060a:	3302      	adds	r3, #2
 800060c:	60bb      	str	r3, [r7, #8]
					}
				}
				if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 800060e:	2110      	movs	r1, #16
 8000610:	4831      	ldr	r0, [pc, #196]	@ (80006d8 <main+0x58c>)
 8000612:	f000 ff79 	bl	8001508 <HAL_GPIO_ReadPin>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d11a      	bne.n	8000652 <main+0x506>
					switch(control){
 800061c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d002      	beq.n	800062a <main+0x4de>
 8000624:	2b04      	cmp	r3, #4
 8000626:	d004      	beq.n	8000632 <main+0x4e6>
 8000628:	e007      	b.n	800063a <main+0x4ee>
					case 0:
						*ptr_key = 0X16;
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2216      	movs	r2, #22
 800062e:	701a      	strb	r2, [r3, #0]
						break;
 8000630:	e003      	b.n	800063a <main+0x4ee>
					case 4:
						*ptr_key = 0x3F;
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	223f      	movs	r2, #63	@ 0x3f
 8000636:	701a      	strb	r2, [r3, #0]
						break;
 8000638:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 800063a:	463b      	mov	r3, r7
 800063c:	3307      	adds	r3, #7
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	429a      	cmp	r2, r3
 8000642:	d003      	beq.n	800064c <main+0x500>
					{
						ptr_key++;
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	3301      	adds	r3, #1
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	e002      	b.n	8000652 <main+0x506>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 800064c:	463b      	mov	r3, r7
 800064e:	3302      	adds	r3, #2
 8000650:	60bb      	str	r3, [r7, #8]
					}
				}
				if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8000652:	2102      	movs	r1, #2
 8000654:	4820      	ldr	r0, [pc, #128]	@ (80006d8 <main+0x58c>)
 8000656:	f000 ff57 	bl	8001508 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d11a      	bne.n	8000696 <main+0x54a>
					switch(control){
 8000660:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d002      	beq.n	800066e <main+0x522>
 8000668:	2b04      	cmp	r3, #4
 800066a:	d004      	beq.n	8000676 <main+0x52a>
 800066c:	e007      	b.n	800067e <main+0x532>
					case 0:
						*ptr_key = 0X07;
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	2207      	movs	r2, #7
 8000672:	701a      	strb	r2, [r3, #0]
						break;
 8000674:	e003      	b.n	800067e <main+0x532>
					case 4:
						*ptr_key = 0x40;
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	2240      	movs	r2, #64	@ 0x40
 800067a:	701a      	strb	r2, [r3, #0]
						break;
 800067c:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 800067e:	463b      	mov	r3, r7
 8000680:	3307      	adds	r3, #7
 8000682:	68ba      	ldr	r2, [r7, #8]
 8000684:	429a      	cmp	r2, r3
 8000686:	d003      	beq.n	8000690 <main+0x544>
					{
						ptr_key++;
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	3301      	adds	r3, #1
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	e002      	b.n	8000696 <main+0x54a>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000690:	463b      	mov	r3, r7
 8000692:	3302      	adds	r3, #2
 8000694:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000696:	2101      	movs	r1, #1
 8000698:	480f      	ldr	r0, [pc, #60]	@ (80006d8 <main+0x58c>)
 800069a:	f000 ff35 	bl	8001508 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d11e      	bne.n	80006e2 <main+0x596>
					switch(control){
 80006a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <main+0x566>
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	d004      	beq.n	80006ba <main+0x56e>
 80006b0:	e007      	b.n	80006c2 <main+0x576>
					case 0:
						*ptr_key = 0X09;
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	2209      	movs	r2, #9
 80006b6:	701a      	strb	r2, [r3, #0]
						break;
 80006b8:	e003      	b.n	80006c2 <main+0x576>
					case 4:
						*ptr_key = 0x41;
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	2241      	movs	r2, #65	@ 0x41
 80006be:	701a      	strb	r2, [r3, #0]
						break;
 80006c0:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80006c2:	463b      	mov	r3, r7
 80006c4:	3307      	adds	r3, #7
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d007      	beq.n	80006dc <main+0x590>
					{
						ptr_key++;
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	3301      	adds	r3, #1
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	e006      	b.n	80006e2 <main+0x596>
 80006d4:	40010c00 	.word	0x40010c00
 80006d8:	40010800 	.word	0x40010800
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 80006dc:	463b      	mov	r3, r7
 80006de:	3302      	adds	r3, #2
 80006e0:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C5_GPIO_Port, C5_Pin))){
 80006e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006e6:	48a1      	ldr	r0, [pc, #644]	@ (800096c <main+0x820>)
 80006e8:	f000 ff0e 	bl	8001508 <HAL_GPIO_ReadPin>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d11a      	bne.n	8000728 <main+0x5dc>
					switch(control){
 80006f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <main+0x5b4>
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	d004      	beq.n	8000708 <main+0x5bc>
 80006fe:	e007      	b.n	8000710 <main+0x5c4>
					case 0:
						*ptr_key = 0X0A;
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	220a      	movs	r2, #10
 8000704:	701a      	strb	r2, [r3, #0]
						break;
 8000706:	e003      	b.n	8000710 <main+0x5c4>
					case 4:
						*ptr_key = 0x42;
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	2242      	movs	r2, #66	@ 0x42
 800070c:	701a      	strb	r2, [r3, #0]
						break;
 800070e:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000710:	463b      	mov	r3, r7
 8000712:	3307      	adds	r3, #7
 8000714:	68ba      	ldr	r2, [r7, #8]
 8000716:	429a      	cmp	r2, r3
 8000718:	d003      	beq.n	8000722 <main+0x5d6>
					{
						ptr_key++;
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	3301      	adds	r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	e002      	b.n	8000728 <main+0x5dc>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000722:	463b      	mov	r3, r7
 8000724:	3302      	adds	r3, #2
 8000726:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C6_GPIO_Port, C6_Pin))){
 8000728:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800072c:	488f      	ldr	r0, [pc, #572]	@ (800096c <main+0x820>)
 800072e:	f000 feeb 	bl	8001508 <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d122      	bne.n	800077e <main+0x632>
					switch(control){
 8000738:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800073c:	2b04      	cmp	r3, #4
 800073e:	d00e      	beq.n	800075e <main+0x612>
 8000740:	2b04      	cmp	r3, #4
 8000742:	dc10      	bgt.n	8000766 <main+0x61a>
 8000744:	2b00      	cmp	r3, #0
 8000746:	d002      	beq.n	800074e <main+0x602>
 8000748:	2b01      	cmp	r3, #1
 800074a:	d004      	beq.n	8000756 <main+0x60a>
 800074c:	e00b      	b.n	8000766 <main+0x61a>
						case 0:
							*ptr_key = 0X0B;
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	220b      	movs	r2, #11
 8000752:	701a      	strb	r2, [r3, #0]
							break;
 8000754:	e007      	b.n	8000766 <main+0x61a>
						case 1:
							*ptr_key = 0X2F;
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	222f      	movs	r2, #47	@ 0x2f
 800075a:	701a      	strb	r2, [r3, #0]
							break;
 800075c:	e003      	b.n	8000766 <main+0x61a>
						case 4:
							*ptr_key = 0X50;
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	2250      	movs	r2, #80	@ 0x50
 8000762:	701a      	strb	r2, [r3, #0]
							break;
 8000764:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000766:	463b      	mov	r3, r7
 8000768:	3307      	adds	r3, #7
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	429a      	cmp	r2, r3
 800076e:	d003      	beq.n	8000778 <main+0x62c>
					{
						ptr_key++;
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	3301      	adds	r3, #1
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	e002      	b.n	800077e <main+0x632>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000778:	463b      	mov	r3, r7
 800077a:	3302      	adds	r3, #2
 800077c:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C7_GPIO_Port, C7_Pin))){
 800077e:	2104      	movs	r1, #4
 8000780:	487b      	ldr	r0, [pc, #492]	@ (8000970 <main+0x824>)
 8000782:	f000 fec1 	bl	8001508 <HAL_GPIO_ReadPin>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d122      	bne.n	80007d2 <main+0x686>
					switch(control){
 800078c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000790:	2b04      	cmp	r3, #4
 8000792:	d00e      	beq.n	80007b2 <main+0x666>
 8000794:	2b04      	cmp	r3, #4
 8000796:	dc10      	bgt.n	80007ba <main+0x66e>
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <main+0x656>
 800079c:	2b01      	cmp	r3, #1
 800079e:	d004      	beq.n	80007aa <main+0x65e>
 80007a0:	e00b      	b.n	80007ba <main+0x66e>
						case 0:
							*ptr_key = 0X0D;
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	220d      	movs	r2, #13
 80007a6:	701a      	strb	r2, [r3, #0]
							break;
 80007a8:	e007      	b.n	80007ba <main+0x66e>
						case 1:
							*ptr_key = 0X30;
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	2230      	movs	r2, #48	@ 0x30
 80007ae:	701a      	strb	r2, [r3, #0]
							break;
 80007b0:	e003      	b.n	80007ba <main+0x66e>
						case 4:
							*ptr_key = 0X51;
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	2251      	movs	r2, #81	@ 0x51
 80007b6:	701a      	strb	r2, [r3, #0]
							break;
 80007b8:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80007ba:	463b      	mov	r3, r7
 80007bc:	3307      	adds	r3, #7
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d003      	beq.n	80007cc <main+0x680>
					{
						ptr_key++;
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	3301      	adds	r3, #1
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	e002      	b.n	80007d2 <main+0x686>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 80007cc:	463b      	mov	r3, r7
 80007ce:	3302      	adds	r3, #2
 80007d0:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C8_GPIO_Port, C8_Pin))){
 80007d2:	2102      	movs	r1, #2
 80007d4:	4865      	ldr	r0, [pc, #404]	@ (800096c <main+0x820>)
 80007d6:	f000 fe97 	bl	8001508 <HAL_GPIO_ReadPin>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d122      	bne.n	8000826 <main+0x6da>
					switch(control){
 80007e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d00e      	beq.n	8000806 <main+0x6ba>
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	dc10      	bgt.n	800080e <main+0x6c2>
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <main+0x6aa>
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d004      	beq.n	80007fe <main+0x6b2>
 80007f4:	e00b      	b.n	800080e <main+0x6c2>
						case 0:
							*ptr_key = 0X0E;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	220e      	movs	r2, #14
 80007fa:	701a      	strb	r2, [r3, #0]
							break;
 80007fc:	e007      	b.n	800080e <main+0x6c2>
						case 1:
							*ptr_key = 0X31;
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	2231      	movs	r2, #49	@ 0x31
 8000802:	701a      	strb	r2, [r3, #0]
							break;
 8000804:	e003      	b.n	800080e <main+0x6c2>
						case 4:
							*ptr_key = 0X52;
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	2252      	movs	r2, #82	@ 0x52
 800080a:	701a      	strb	r2, [r3, #0]
							break;
 800080c:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 800080e:	463b      	mov	r3, r7
 8000810:	3307      	adds	r3, #7
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	429a      	cmp	r2, r3
 8000816:	d003      	beq.n	8000820 <main+0x6d4>
					{
						ptr_key++;
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	3301      	adds	r3, #1
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	e002      	b.n	8000826 <main+0x6da>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000820:	463b      	mov	r3, r7
 8000822:	3302      	adds	r3, #2
 8000824:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C9_GPIO_Port, C9_Pin))){
 8000826:	2101      	movs	r1, #1
 8000828:	4850      	ldr	r0, [pc, #320]	@ (800096c <main+0x820>)
 800082a:	f000 fe6d 	bl	8001508 <HAL_GPIO_ReadPin>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d122      	bne.n	800087a <main+0x72e>
					switch(control){
 8000834:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000838:	2b04      	cmp	r3, #4
 800083a:	d00e      	beq.n	800085a <main+0x70e>
 800083c:	2b04      	cmp	r3, #4
 800083e:	dc10      	bgt.n	8000862 <main+0x716>
 8000840:	2b00      	cmp	r3, #0
 8000842:	d002      	beq.n	800084a <main+0x6fe>
 8000844:	2b01      	cmp	r3, #1
 8000846:	d004      	beq.n	8000852 <main+0x706>
 8000848:	e00b      	b.n	8000862 <main+0x716>
						case 0:
							*ptr_key = 0X0F;
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	220f      	movs	r2, #15
 800084e:	701a      	strb	r2, [r3, #0]
							break;
 8000850:	e007      	b.n	8000862 <main+0x716>
						case 1:
							*ptr_key = 0X2D;
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	222d      	movs	r2, #45	@ 0x2d
 8000856:	701a      	strb	r2, [r3, #0]
							break;
 8000858:	e003      	b.n	8000862 <main+0x716>
						case 4:
							*ptr_key = 0X4F;
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	224f      	movs	r2, #79	@ 0x4f
 800085e:	701a      	strb	r2, [r3, #0]
							break;
 8000860:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000862:	463b      	mov	r3, r7
 8000864:	3307      	adds	r3, #7
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	429a      	cmp	r2, r3
 800086a:	d003      	beq.n	8000874 <main+0x728>
					{
						ptr_key++;
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	3301      	adds	r3, #1
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	e002      	b.n	800087a <main+0x72e>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000874:	463b      	mov	r3, r7
 8000876:	3302      	adds	r3, #2
 8000878:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C10_GPIO_Port, C10_Pin))){
 800087a:	2108      	movs	r1, #8
 800087c:	483c      	ldr	r0, [pc, #240]	@ (8000970 <main+0x824>)
 800087e:	f000 fe43 	bl	8001508 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d11a      	bne.n	80008be <main+0x772>
					switch(control){
 8000888:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d002      	beq.n	8000896 <main+0x74a>
 8000890:	2b01      	cmp	r3, #1
 8000892:	d004      	beq.n	800089e <main+0x752>
 8000894:	e007      	b.n	80008a6 <main+0x75a>
						case 0:
							*ptr_key = 0X33;
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	2233      	movs	r2, #51	@ 0x33
 800089a:	701a      	strb	r2, [r3, #0]
							break;
 800089c:	e003      	b.n	80008a6 <main+0x75a>
						case 1:
							*ptr_key = 0X2E;
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	222e      	movs	r2, #46	@ 0x2e
 80008a2:	701a      	strb	r2, [r3, #0]
							break;
 80008a4:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80008a6:	463b      	mov	r3, r7
 80008a8:	3307      	adds	r3, #7
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d003      	beq.n	80008b8 <main+0x76c>
					{
						ptr_key++;
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	3301      	adds	r3, #1
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	e002      	b.n	80008be <main+0x772>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 80008b8:	463b      	mov	r3, r7
 80008ba:	3302      	adds	r3, #2
 80008bc:	60bb      	str	r3, [r7, #8]
					}
				}

    	  	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008c4:	482a      	ldr	r0, [pc, #168]	@ (8000970 <main+0x824>)
 80008c6:	f000 fe36 	bl	8001536 <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008d0:	4827      	ldr	r0, [pc, #156]	@ (8000970 <main+0x824>)
 80008d2:	f000 fe30 	bl	8001536 <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2180      	movs	r1, #128	@ 0x80
 80008da:	4825      	ldr	r0, [pc, #148]	@ (8000970 <main+0x824>)
 80008dc:	f000 fe2b 	bl	8001536 <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	2140      	movs	r1, #64	@ 0x40
 80008e4:	4822      	ldr	r0, [pc, #136]	@ (8000970 <main+0x824>)
 80008e6:	f000 fe26 	bl	8001536 <HAL_GPIO_WritePin>

			    if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 80008ea:	2120      	movs	r1, #32
 80008ec:	4820      	ldr	r0, [pc, #128]	@ (8000970 <main+0x824>)
 80008ee:	f000 fe0b 	bl	8001508 <HAL_GPIO_ReadPin>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d11a      	bne.n	800092e <main+0x7e2>
					switch(control){
 80008f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d002      	beq.n	8000906 <main+0x7ba>
 8000900:	2b04      	cmp	r3, #4
 8000902:	d004      	beq.n	800090e <main+0x7c2>
 8000904:	e007      	b.n	8000916 <main+0x7ca>
					case 0:
						*ptr_key = 0X1D;
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	221d      	movs	r2, #29
 800090a:	701a      	strb	r2, [r3, #0]
						break;
 800090c:	e003      	b.n	8000916 <main+0x7ca>
					case 4:
						*ptr_key = 0x43;
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2243      	movs	r2, #67	@ 0x43
 8000912:	701a      	strb	r2, [r3, #0]
						break;
 8000914:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000916:	463b      	mov	r3, r7
 8000918:	3307      	adds	r3, #7
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	429a      	cmp	r2, r3
 800091e:	d003      	beq.n	8000928 <main+0x7dc>
					{
						ptr_key++;
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	3301      	adds	r3, #1
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	e002      	b.n	800092e <main+0x7e2>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000928:	463b      	mov	r3, r7
 800092a:	3302      	adds	r3, #2
 800092c:	60bb      	str	r3, [r7, #8]
					}
				}
				if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 800092e:	2110      	movs	r1, #16
 8000930:	480f      	ldr	r0, [pc, #60]	@ (8000970 <main+0x824>)
 8000932:	f000 fde9 	bl	8001508 <HAL_GPIO_ReadPin>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d11e      	bne.n	800097a <main+0x82e>
					switch(control){
 800093c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <main+0x7fe>
 8000944:	2b04      	cmp	r3, #4
 8000946:	d004      	beq.n	8000952 <main+0x806>
 8000948:	e007      	b.n	800095a <main+0x80e>
					case 0:
						*ptr_key = 0X1B;
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	221b      	movs	r2, #27
 800094e:	701a      	strb	r2, [r3, #0]
						break;
 8000950:	e003      	b.n	800095a <main+0x80e>
					case 4:
						*ptr_key = 0x44;
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	2244      	movs	r2, #68	@ 0x44
 8000956:	701a      	strb	r2, [r3, #0]
						break;
 8000958:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 800095a:	463b      	mov	r3, r7
 800095c:	3307      	adds	r3, #7
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	429a      	cmp	r2, r3
 8000962:	d007      	beq.n	8000974 <main+0x828>
					{
						ptr_key++;
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	3301      	adds	r3, #1
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	e006      	b.n	800097a <main+0x82e>
 800096c:	40010c00 	.word	0x40010c00
 8000970:	40010800 	.word	0x40010800
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000974:	463b      	mov	r3, r7
 8000976:	3302      	adds	r3, #2
 8000978:	60bb      	str	r3, [r7, #8]
					}
				}
				if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 800097a:	2102      	movs	r1, #2
 800097c:	48a6      	ldr	r0, [pc, #664]	@ (8000c18 <main+0xacc>)
 800097e:	f000 fdc3 	bl	8001508 <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d11a      	bne.n	80009be <main+0x872>
					switch(control){
 8000988:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d002      	beq.n	8000996 <main+0x84a>
 8000990:	2b04      	cmp	r3, #4
 8000992:	d004      	beq.n	800099e <main+0x852>
 8000994:	e007      	b.n	80009a6 <main+0x85a>
					case 0:
						*ptr_key = 0X06;
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	2206      	movs	r2, #6
 800099a:	701a      	strb	r2, [r3, #0]
						break;
 800099c:	e003      	b.n	80009a6 <main+0x85a>
					case 4:
						*ptr_key = 0x45;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	2245      	movs	r2, #69	@ 0x45
 80009a2:	701a      	strb	r2, [r3, #0]
						break;
 80009a4:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80009a6:	463b      	mov	r3, r7
 80009a8:	3307      	adds	r3, #7
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d003      	beq.n	80009b8 <main+0x86c>
					{
						ptr_key++;
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	3301      	adds	r3, #1
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	e002      	b.n	80009be <main+0x872>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 80009b8:	463b      	mov	r3, r7
 80009ba:	3302      	adds	r3, #2
 80009bc:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 80009be:	2101      	movs	r1, #1
 80009c0:	4895      	ldr	r0, [pc, #596]	@ (8000c18 <main+0xacc>)
 80009c2:	f000 fda1 	bl	8001508 <HAL_GPIO_ReadPin>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d10e      	bne.n	80009ea <main+0x89e>
					*ptr_key = 0X19;
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	2219      	movs	r2, #25
 80009d0:	701a      	strb	r2, [r3, #0]
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 80009d2:	463b      	mov	r3, r7
 80009d4:	3307      	adds	r3, #7
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d003      	beq.n	80009e4 <main+0x898>
					{
						ptr_key++;
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	3301      	adds	r3, #1
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	e002      	b.n	80009ea <main+0x89e>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 80009e4:	463b      	mov	r3, r7
 80009e6:	3302      	adds	r3, #2
 80009e8:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C5_GPIO_Port, C5_Pin))){
 80009ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009ee:	488b      	ldr	r0, [pc, #556]	@ (8000c1c <main+0xad0>)
 80009f0:	f000 fd8a 	bl	8001508 <HAL_GPIO_ReadPin>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d10e      	bne.n	8000a18 <main+0x8cc>
					*ptr_key = 0X05;
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	2205      	movs	r2, #5
 80009fe:	701a      	strb	r2, [r3, #0]
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000a00:	463b      	mov	r3, r7
 8000a02:	3307      	adds	r3, #7
 8000a04:	68ba      	ldr	r2, [r7, #8]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d003      	beq.n	8000a12 <main+0x8c6>
					{
						ptr_key++;
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	e002      	b.n	8000a18 <main+0x8cc>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000a12:	463b      	mov	r3, r7
 8000a14:	3302      	adds	r3, #2
 8000a16:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C6_GPIO_Port, C6_Pin))){
 8000a18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a1c:	487f      	ldr	r0, [pc, #508]	@ (8000c1c <main+0xad0>)
 8000a1e:	f000 fd73 	bl	8001508 <HAL_GPIO_ReadPin>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d10e      	bne.n	8000a46 <main+0x8fa>
					*ptr_key = 0X28;
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	2228      	movs	r2, #40	@ 0x28
 8000a2c:	701a      	strb	r2, [r3, #0]
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000a2e:	463b      	mov	r3, r7
 8000a30:	3307      	adds	r3, #7
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d003      	beq.n	8000a40 <main+0x8f4>
					{
						ptr_key++;
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	e002      	b.n	8000a46 <main+0x8fa>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000a40:	463b      	mov	r3, r7
 8000a42:	3302      	adds	r3, #2
 8000a44:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C7_GPIO_Port, C7_Pin))){
 8000a46:	2104      	movs	r1, #4
 8000a48:	4873      	ldr	r0, [pc, #460]	@ (8000c18 <main+0xacc>)
 8000a4a:	f000 fd5d 	bl	8001508 <HAL_GPIO_ReadPin>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d10e      	bne.n	8000a72 <main+0x926>
					*ptr_key = 0X11;
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	2211      	movs	r2, #17
 8000a58:	701a      	strb	r2, [r3, #0]
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	3307      	adds	r3, #7
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d003      	beq.n	8000a6c <main+0x920>
					{
						ptr_key++;
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	3301      	adds	r3, #1
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	e002      	b.n	8000a72 <main+0x926>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	3302      	adds	r3, #2
 8000a70:	60bb      	str	r3, [r7, #8]
					}
				}
				if (!(HAL_GPIO_ReadPin(C8_GPIO_Port, C8_Pin))){
 8000a72:	2102      	movs	r1, #2
 8000a74:	4869      	ldr	r0, [pc, #420]	@ (8000c1c <main+0xad0>)
 8000a76:	f000 fd47 	bl	8001508 <HAL_GPIO_ReadPin>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d11a      	bne.n	8000ab6 <main+0x96a>
					switch(control){
 8000a80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d002      	beq.n	8000a8e <main+0x942>
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d004      	beq.n	8000a96 <main+0x94a>
 8000a8c:	e007      	b.n	8000a9e <main+0x952>
						case 0:
							*ptr_key = 0X10;
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	2210      	movs	r2, #16
 8000a92:	701a      	strb	r2, [r3, #0]
							break;
 8000a94:	e003      	b.n	8000a9e <main+0x952>
						case 1:
							*ptr_key = 0X35;
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	2235      	movs	r2, #53	@ 0x35
 8000a9a:	701a      	strb	r2, [r3, #0]
							break;
 8000a9c:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	3307      	adds	r3, #7
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d003      	beq.n	8000ab0 <main+0x964>
					{
						ptr_key++;
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	e002      	b.n	8000ab6 <main+0x96a>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	60bb      	str	r3, [r7, #8]
					}
				}

				if (!(HAL_GPIO_ReadPin(C9_GPIO_Port, C9_Pin))){
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4858      	ldr	r0, [pc, #352]	@ (8000c1c <main+0xad0>)
 8000aba:	f000 fd25 	bl	8001508 <HAL_GPIO_ReadPin>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d11a      	bne.n	8000afa <main+0x9ae>
					switch(control){
 8000ac4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d002      	beq.n	8000ad2 <main+0x986>
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d004      	beq.n	8000ada <main+0x98e>
 8000ad0:	e007      	b.n	8000ae2 <main+0x996>
						case 0:
							*ptr_key = 0X36;
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	2236      	movs	r2, #54	@ 0x36
 8000ad6:	701a      	strb	r2, [r3, #0]
							break;
 8000ad8:	e003      	b.n	8000ae2 <main+0x996>
						case 1:
							*ptr_key = 0X34;
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	2234      	movs	r2, #52	@ 0x34
 8000ade:	701a      	strb	r2, [r3, #0]
							break;
 8000ae0:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	3307      	adds	r3, #7
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d003      	beq.n	8000af4 <main+0x9a8>
					{
						ptr_key++;
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	3301      	adds	r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	e002      	b.n	8000afa <main+0x9ae>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000af4:	463b      	mov	r3, r7
 8000af6:	3302      	adds	r3, #2
 8000af8:	60bb      	str	r3, [r7, #8]
					}
				}

				if (!(HAL_GPIO_ReadPin(C10_GPIO_Port, C10_Pin))){
 8000afa:	2108      	movs	r1, #8
 8000afc:	4846      	ldr	r0, [pc, #280]	@ (8000c18 <main+0xacc>)
 8000afe:	f000 fd03 	bl	8001508 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d11a      	bne.n	8000b3e <main+0x9f2>
					switch(control){
 8000b08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d002      	beq.n	8000b16 <main+0x9ca>
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d004      	beq.n	8000b1e <main+0x9d2>
 8000b14:	e007      	b.n	8000b26 <main+0x9da>
						case 0:
							*ptr_key = 0X37;
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	2237      	movs	r2, #55	@ 0x37
 8000b1a:	701a      	strb	r2, [r3, #0]
							break;
 8000b1c:	e003      	b.n	8000b26 <main+0x9da>
						case 1:
							*ptr_key = 0X2B;
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	222b      	movs	r2, #43	@ 0x2b
 8000b22:	701a      	strb	r2, [r3, #0]
							break;
 8000b24:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000b26:	463b      	mov	r3, r7
 8000b28:	3307      	adds	r3, #7
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d003      	beq.n	8000b38 <main+0x9ec>
					{
						ptr_key++;
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	3301      	adds	r3, #1
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	e002      	b.n	8000b3e <main+0x9f2>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000b38:	463b      	mov	r3, r7
 8000b3a:	3302      	adds	r3, #2
 8000b3c:	60bb      	str	r3, [r7, #8]
					}
				}

    	  	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b44:	4834      	ldr	r0, [pc, #208]	@ (8000c18 <main+0xacc>)
 8000b46:	f000 fcf6 	bl	8001536 <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b50:	4831      	ldr	r0, [pc, #196]	@ (8000c18 <main+0xacc>)
 8000b52:	f000 fcf0 	bl	8001536 <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	2180      	movs	r1, #128	@ 0x80
 8000b5a:	482f      	ldr	r0, [pc, #188]	@ (8000c18 <main+0xacc>)
 8000b5c:	f000 fceb 	bl	8001536 <HAL_GPIO_WritePin>
    	  	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2140      	movs	r1, #64	@ 0x40
 8000b64:	482c      	ldr	r0, [pc, #176]	@ (8000c18 <main+0xacc>)
 8000b66:	f000 fce6 	bl	8001536 <HAL_GPIO_WritePin>


				if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	482a      	ldr	r0, [pc, #168]	@ (8000c18 <main+0xacc>)
 8000b6e:	f000 fccb 	bl	8001508 <HAL_GPIO_ReadPin>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10e      	bne.n	8000b96 <main+0xa4a>
					*ptr_key = 0X2C;
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	222c      	movs	r2, #44	@ 0x2c
 8000b7c:	701a      	strb	r2, [r3, #0]
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000b7e:	463b      	mov	r3, r7
 8000b80:	3307      	adds	r3, #7
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d003      	beq.n	8000b90 <main+0xa44>
					{
						ptr_key++;
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	e002      	b.n	8000b96 <main+0xa4a>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000b90:	463b      	mov	r3, r7
 8000b92:	3302      	adds	r3, #2
 8000b94:	60bb      	str	r3, [r7, #8]
					}
				}

				if (!(HAL_GPIO_ReadPin(C10_GPIO_Port, C10_Pin))){
 8000b96:	2108      	movs	r1, #8
 8000b98:	481f      	ldr	r0, [pc, #124]	@ (8000c18 <main+0xacc>)
 8000b9a:	f000 fcb5 	bl	8001508 <HAL_GPIO_ReadPin>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d122      	bne.n	8000bea <main+0xa9e>
					switch(control){
 8000ba4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ba8:	2b04      	cmp	r3, #4
 8000baa:	d00e      	beq.n	8000bca <main+0xa7e>
 8000bac:	2b04      	cmp	r3, #4
 8000bae:	dc10      	bgt.n	8000bd2 <main+0xa86>
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <main+0xa6e>
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d004      	beq.n	8000bc2 <main+0xa76>
 8000bb8:	e00b      	b.n	8000bd2 <main+0xa86>
						case 0:
							*ptr_key = 0X38;
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	2238      	movs	r2, #56	@ 0x38
 8000bbe:	701a      	strb	r2, [r3, #0]
							break;
 8000bc0:	e007      	b.n	8000bd2 <main+0xa86>
						case 1:
							*ptr_key = 0X2A;
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	222a      	movs	r2, #42	@ 0x2a
 8000bc6:	701a      	strb	r2, [r3, #0]
							break;
 8000bc8:	e003      	b.n	8000bd2 <main+0xa86>
						case 4:
							*ptr_key = 0x4c;
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	224c      	movs	r2, #76	@ 0x4c
 8000bce:	701a      	strb	r2, [r3, #0]
							break;
 8000bd0:	bf00      	nop
					}
					if(ptr_key != &HIDKeyboard.KEYCODE06)
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	3307      	adds	r3, #7
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d003      	beq.n	8000be4 <main+0xa98>
					{
						ptr_key++;
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	3301      	adds	r3, #1
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	e002      	b.n	8000bea <main+0xa9e>
					}else{
						ptr_key = &HIDKeyboard.KEYCODE01;
 8000be4:	463b      	mov	r3, r7
 8000be6:	3302      	adds	r3, #2
 8000be8:	60bb      	str	r3, [r7, #8]
					}
				}

		USBD_HID_SendReport(&hUsbDeviceFS,&HIDKeyboard,sizeof(HIDKeyboard));
 8000bea:	463b      	mov	r3, r7
 8000bec:	2208      	movs	r2, #8
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480b      	ldr	r0, [pc, #44]	@ (8000c20 <main+0xad4>)
 8000bf2:	f005 fb85 	bl	8006300 <USBD_HID_SendReport>
		HAL_Delay(25);
 8000bf6:	2019      	movs	r0, #25
 8000bf8:	f000 f9d0 	bl	8000f9c <HAL_Delay>
		HIDKeyboard.KEYCODE01 = 0x00;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	70bb      	strb	r3, [r7, #2]
		HIDKeyboard.KEYCODE02 = 0x00;
 8000c00:	2300      	movs	r3, #0
 8000c02:	70fb      	strb	r3, [r7, #3]
		HIDKeyboard.KEYCODE03 = 0x00;
 8000c04:	2300      	movs	r3, #0
 8000c06:	713b      	strb	r3, [r7, #4]
		HIDKeyboard.KEYCODE04 = 0x00;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	717b      	strb	r3, [r7, #5]
		HIDKeyboard.KEYCODE05 = 0x00;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	71bb      	strb	r3, [r7, #6]
		HIDKeyboard.KEYCODE05 = 0x00;
 8000c10:	2300      	movs	r3, #0
 8000c12:	71bb      	strb	r3, [r7, #6]
      {
 8000c14:	f7ff baab 	b.w	800016e <main+0x22>
 8000c18:	40010800 	.word	0x40010800
 8000c1c:	40010c00 	.word	0x40010c00
 8000c20:	2000017c 	.word	0x2000017c

08000c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b094      	sub	sp, #80	@ 0x50
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c2e:	2228      	movs	r2, #40	@ 0x28
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f007 f80a 	bl	8007c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c54:	2301      	movs	r3, #1
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c62:	2301      	movs	r3, #1
 8000c64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c66:	2302      	movs	r3, #2
 8000c68:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c70:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 f9ca 	bl	8003014 <HAL_RCC_OscConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c86:	f000 f88d 	bl	8000da4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c9a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 fc36 	bl	8003518 <HAL_RCC_ClockConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cb2:	f000 f877 	bl	8000da4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000cb6:	2310      	movs	r3, #16
 8000cb8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 fd85 	bl	80037d0 <HAL_RCCEx_PeriphCLKConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000ccc:	f000 f86a 	bl	8000da4 <Error_Handler>
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	3750      	adds	r7, #80	@ 0x50
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cec:	4b2a      	ldr	r3, [pc, #168]	@ (8000d98 <MX_GPIO_Init+0xc0>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a29      	ldr	r2, [pc, #164]	@ (8000d98 <MX_GPIO_Init+0xc0>)
 8000cf2:	f043 0320 	orr.w	r3, r3, #32
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <MX_GPIO_Init+0xc0>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0320 	and.w	r3, r3, #32
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	4b24      	ldr	r3, [pc, #144]	@ (8000d98 <MX_GPIO_Init+0xc0>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a23      	ldr	r2, [pc, #140]	@ (8000d98 <MX_GPIO_Init+0xc0>)
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b21      	ldr	r3, [pc, #132]	@ (8000d98 <MX_GPIO_Init+0xc0>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d98 <MX_GPIO_Init+0xc0>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a1d      	ldr	r2, [pc, #116]	@ (8000d98 <MX_GPIO_Init+0xc0>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <MX_GPIO_Init+0xc0>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0308 	and.w	r3, r3, #8
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R4_Pin|R3_Pin|R2_Pin|R1_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000d3a:	4818      	ldr	r0, [pc, #96]	@ (8000d9c <MX_GPIO_Init+0xc4>)
 8000d3c:	f000 fbfb 	bl	8001536 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C4_Pin C3_Pin C7_Pin C10_Pin
                           C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin|C7_Pin|C10_Pin
 8000d40:	233f      	movs	r3, #63	@ 0x3f
 8000d42:	613b      	str	r3, [r7, #16]
                          |C2_Pin|C1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	4619      	mov	r1, r3
 8000d52:	4812      	ldr	r0, [pc, #72]	@ (8000d9c <MX_GPIO_Init+0xc4>)
 8000d54:	f000 fa54 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_Pin R3_Pin R2_Pin R1_Pin */
  GPIO_InitStruct.Pin = R4_Pin|R3_Pin|R2_Pin|R1_Pin;
 8000d58:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000d5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2302      	movs	r3, #2
 8000d68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0310 	add.w	r3, r7, #16
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480a      	ldr	r0, [pc, #40]	@ (8000d9c <MX_GPIO_Init+0xc4>)
 8000d72:	f000 fa45 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : C9_Pin C8_Pin C6_Pin C5_Pin */
  GPIO_InitStruct.Pin = C9_Pin|C8_Pin|C6_Pin|C5_Pin;
 8000d76:	f640 4303 	movw	r3, #3075	@ 0xc03
 8000d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_GPIO_Init+0xc8>)
 8000d8c:	f000 fa38 	bl	8001200 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d90:	bf00      	nop
 8000d92:	3720      	adds	r7, #32
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010800 	.word	0x40010800
 8000da0:	40010c00 	.word	0x40010c00

08000da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da8:	b672      	cpsid	i
}
 8000daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <Error_Handler+0x8>

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000db6:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <HAL_MspInit+0x5c>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	4a14      	ldr	r2, [pc, #80]	@ (8000e0c <HAL_MspInit+0x5c>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6193      	str	r3, [r2, #24]
 8000dc2:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <HAL_MspInit+0x5c>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <HAL_MspInit+0x5c>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	@ (8000e0c <HAL_MspInit+0x5c>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd8:	61d3      	str	r3, [r2, #28]
 8000dda:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <HAL_MspInit+0x5c>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000de6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <HAL_MspInit+0x60>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	4a04      	ldr	r2, [pc, #16]	@ (8000e10 <HAL_MspInit+0x60>)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010000 	.word	0x40010000

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <NMI_Handler+0x4>

08000e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e64:	f000 f87e 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e70:	4802      	ldr	r0, [pc, #8]	@ (8000e7c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000e72:	f000 fc9d 	bl	80017b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000640 	.word	0x20000640

08000e80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e8c:	f7ff fff8 	bl	8000e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e90:	480b      	ldr	r0, [pc, #44]	@ (8000ec0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e92:	490c      	ldr	r1, [pc, #48]	@ (8000ec4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e94:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a09      	ldr	r2, [pc, #36]	@ (8000ecc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ea8:	4c09      	ldr	r4, [pc, #36]	@ (8000ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f006 fed1 	bl	8007c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eba:	f7ff f947 	bl	800014c <main>
  bx lr
 8000ebe:	4770      	bx	lr
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000ec8:	08007d20 	.word	0x08007d20
  ldr r2, =_sbss
 8000ecc:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000ed0:	20000944 	.word	0x20000944

08000ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC1_2_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <HAL_Init+0x28>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a07      	ldr	r2, [pc, #28]	@ (8000f00 <HAL_Init+0x28>)
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f947 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	200f      	movs	r0, #15
 8000ef0:	f000 f808 	bl	8000f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f7ff ff5c 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40022000 	.word	0x40022000

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f95f 	bl	80011e6 <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f40:	f000 f927 	bl	8001192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	@ (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000004 	.word	0x20000004

08000f64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <HAL_IncTick+0x1c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <HAL_IncTick+0x20>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a03      	ldr	r2, [pc, #12]	@ (8000f84 <HAL_IncTick+0x20>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000174 	.word	0x20000174

08000f88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b02      	ldr	r3, [pc, #8]	@ (8000f98 <HAL_GetTick+0x10>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	20000174 	.word	0x20000174

08000f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff fff0 	bl	8000f88 <HAL_GetTick>
 8000fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fb4:	d005      	beq.n	8000fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <HAL_Delay+0x44>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc2:	bf00      	nop
 8000fc4:	f7ff ffe0 	bl	8000f88 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8f7      	bhi.n	8000fc4 <HAL_Delay+0x28>
  {
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008

08000fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001000:	4013      	ands	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800100c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001016:	4a04      	ldr	r2, [pc, #16]	@ (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	60d3      	str	r3, [r2, #12]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001030:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <__NVIC_GetPriorityGrouping+0x18>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 0307 	and.w	r3, r3, #7
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	db0b      	blt.n	8001072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	f003 021f 	and.w	r2, r3, #31
 8001060:	4906      	ldr	r1, [pc, #24]	@ (800107c <__NVIC_EnableIRQ+0x34>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	095b      	lsrs	r3, r3, #5
 8001068:	2001      	movs	r0, #1
 800106a:	fa00 f202 	lsl.w	r2, r0, r2
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	db0a      	blt.n	80010aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	490c      	ldr	r1, [pc, #48]	@ (80010cc <__NVIC_SetPriority+0x4c>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	0112      	lsls	r2, r2, #4
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a8:	e00a      	b.n	80010c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4908      	ldr	r1, [pc, #32]	@ (80010d0 <__NVIC_SetPriority+0x50>)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	3b04      	subs	r3, #4
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	440b      	add	r3, r1
 80010be:	761a      	strb	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	@ 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f1c3 0307 	rsb	r3, r3, #7
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	bf28      	it	cs
 80010f2:	2304      	movcs	r3, #4
 80010f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3304      	adds	r3, #4
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d902      	bls.n	8001104 <NVIC_EncodePriority+0x30>
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3b03      	subs	r3, #3
 8001102:	e000      	b.n	8001106 <NVIC_EncodePriority+0x32>
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43d9      	mvns	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	4313      	orrs	r3, r2
         );
}
 800112e:	4618      	mov	r0, r3
 8001130:	3724      	adds	r7, #36	@ 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800115c:	f7ff ff90 	bl	8001080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff2d 	bl	8000fe4 <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a4:	f7ff ff42 	bl	800102c <__NVIC_GetPriorityGrouping>
 80011a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff90 	bl	80010d4 <NVIC_EncodePriority>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff5f 	bl	8001080 <__NVIC_SetPriority>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff35 	bl	8001048 <__NVIC_EnableIRQ>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffa2 	bl	8001138 <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b480      	push	{r7}
 8001202:	b08b      	sub	sp, #44	@ 0x2c
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800120e:	2300      	movs	r3, #0
 8001210:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001212:	e169      	b.n	80014e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001214:	2201      	movs	r2, #1
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	69fa      	ldr	r2, [r7, #28]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	429a      	cmp	r2, r3
 800122e:	f040 8158 	bne.w	80014e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4a9a      	ldr	r2, [pc, #616]	@ (80014a0 <HAL_GPIO_Init+0x2a0>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d05e      	beq.n	80012fa <HAL_GPIO_Init+0xfa>
 800123c:	4a98      	ldr	r2, [pc, #608]	@ (80014a0 <HAL_GPIO_Init+0x2a0>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d875      	bhi.n	800132e <HAL_GPIO_Init+0x12e>
 8001242:	4a98      	ldr	r2, [pc, #608]	@ (80014a4 <HAL_GPIO_Init+0x2a4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d058      	beq.n	80012fa <HAL_GPIO_Init+0xfa>
 8001248:	4a96      	ldr	r2, [pc, #600]	@ (80014a4 <HAL_GPIO_Init+0x2a4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d86f      	bhi.n	800132e <HAL_GPIO_Init+0x12e>
 800124e:	4a96      	ldr	r2, [pc, #600]	@ (80014a8 <HAL_GPIO_Init+0x2a8>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d052      	beq.n	80012fa <HAL_GPIO_Init+0xfa>
 8001254:	4a94      	ldr	r2, [pc, #592]	@ (80014a8 <HAL_GPIO_Init+0x2a8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d869      	bhi.n	800132e <HAL_GPIO_Init+0x12e>
 800125a:	4a94      	ldr	r2, [pc, #592]	@ (80014ac <HAL_GPIO_Init+0x2ac>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d04c      	beq.n	80012fa <HAL_GPIO_Init+0xfa>
 8001260:	4a92      	ldr	r2, [pc, #584]	@ (80014ac <HAL_GPIO_Init+0x2ac>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d863      	bhi.n	800132e <HAL_GPIO_Init+0x12e>
 8001266:	4a92      	ldr	r2, [pc, #584]	@ (80014b0 <HAL_GPIO_Init+0x2b0>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d046      	beq.n	80012fa <HAL_GPIO_Init+0xfa>
 800126c:	4a90      	ldr	r2, [pc, #576]	@ (80014b0 <HAL_GPIO_Init+0x2b0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d85d      	bhi.n	800132e <HAL_GPIO_Init+0x12e>
 8001272:	2b12      	cmp	r3, #18
 8001274:	d82a      	bhi.n	80012cc <HAL_GPIO_Init+0xcc>
 8001276:	2b12      	cmp	r3, #18
 8001278:	d859      	bhi.n	800132e <HAL_GPIO_Init+0x12e>
 800127a:	a201      	add	r2, pc, #4	@ (adr r2, 8001280 <HAL_GPIO_Init+0x80>)
 800127c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001280:	080012fb 	.word	0x080012fb
 8001284:	080012d5 	.word	0x080012d5
 8001288:	080012e7 	.word	0x080012e7
 800128c:	08001329 	.word	0x08001329
 8001290:	0800132f 	.word	0x0800132f
 8001294:	0800132f 	.word	0x0800132f
 8001298:	0800132f 	.word	0x0800132f
 800129c:	0800132f 	.word	0x0800132f
 80012a0:	0800132f 	.word	0x0800132f
 80012a4:	0800132f 	.word	0x0800132f
 80012a8:	0800132f 	.word	0x0800132f
 80012ac:	0800132f 	.word	0x0800132f
 80012b0:	0800132f 	.word	0x0800132f
 80012b4:	0800132f 	.word	0x0800132f
 80012b8:	0800132f 	.word	0x0800132f
 80012bc:	0800132f 	.word	0x0800132f
 80012c0:	0800132f 	.word	0x0800132f
 80012c4:	080012dd 	.word	0x080012dd
 80012c8:	080012f1 	.word	0x080012f1
 80012cc:	4a79      	ldr	r2, [pc, #484]	@ (80014b4 <HAL_GPIO_Init+0x2b4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d013      	beq.n	80012fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012d2:	e02c      	b.n	800132e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	623b      	str	r3, [r7, #32]
          break;
 80012da:	e029      	b.n	8001330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	3304      	adds	r3, #4
 80012e2:	623b      	str	r3, [r7, #32]
          break;
 80012e4:	e024      	b.n	8001330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	3308      	adds	r3, #8
 80012ec:	623b      	str	r3, [r7, #32]
          break;
 80012ee:	e01f      	b.n	8001330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	330c      	adds	r3, #12
 80012f6:	623b      	str	r3, [r7, #32]
          break;
 80012f8:	e01a      	b.n	8001330 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d102      	bne.n	8001308 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001302:	2304      	movs	r3, #4
 8001304:	623b      	str	r3, [r7, #32]
          break;
 8001306:	e013      	b.n	8001330 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d105      	bne.n	800131c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001310:	2308      	movs	r3, #8
 8001312:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69fa      	ldr	r2, [r7, #28]
 8001318:	611a      	str	r2, [r3, #16]
          break;
 800131a:	e009      	b.n	8001330 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800131c:	2308      	movs	r3, #8
 800131e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69fa      	ldr	r2, [r7, #28]
 8001324:	615a      	str	r2, [r3, #20]
          break;
 8001326:	e003      	b.n	8001330 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
          break;
 800132c:	e000      	b.n	8001330 <HAL_GPIO_Init+0x130>
          break;
 800132e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	2bff      	cmp	r3, #255	@ 0xff
 8001334:	d801      	bhi.n	800133a <HAL_GPIO_Init+0x13a>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	e001      	b.n	800133e <HAL_GPIO_Init+0x13e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3304      	adds	r3, #4
 800133e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	2bff      	cmp	r3, #255	@ 0xff
 8001344:	d802      	bhi.n	800134c <HAL_GPIO_Init+0x14c>
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	e002      	b.n	8001352 <HAL_GPIO_Init+0x152>
 800134c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134e:	3b08      	subs	r3, #8
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	210f      	movs	r1, #15
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	401a      	ands	r2, r3
 8001364:	6a39      	ldr	r1, [r7, #32]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	fa01 f303 	lsl.w	r3, r1, r3
 800136c:	431a      	orrs	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 80b1 	beq.w	80014e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001380:	4b4d      	ldr	r3, [pc, #308]	@ (80014b8 <HAL_GPIO_Init+0x2b8>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a4c      	ldr	r2, [pc, #304]	@ (80014b8 <HAL_GPIO_Init+0x2b8>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b4a      	ldr	r3, [pc, #296]	@ (80014b8 <HAL_GPIO_Init+0x2b8>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001398:	4a48      	ldr	r2, [pc, #288]	@ (80014bc <HAL_GPIO_Init+0x2bc>)
 800139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	220f      	movs	r2, #15
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	4013      	ands	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a40      	ldr	r2, [pc, #256]	@ (80014c0 <HAL_GPIO_Init+0x2c0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d013      	beq.n	80013ec <HAL_GPIO_Init+0x1ec>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a3f      	ldr	r2, [pc, #252]	@ (80014c4 <HAL_GPIO_Init+0x2c4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d00d      	beq.n	80013e8 <HAL_GPIO_Init+0x1e8>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a3e      	ldr	r2, [pc, #248]	@ (80014c8 <HAL_GPIO_Init+0x2c8>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d007      	beq.n	80013e4 <HAL_GPIO_Init+0x1e4>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a3d      	ldr	r2, [pc, #244]	@ (80014cc <HAL_GPIO_Init+0x2cc>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d101      	bne.n	80013e0 <HAL_GPIO_Init+0x1e0>
 80013dc:	2303      	movs	r3, #3
 80013de:	e006      	b.n	80013ee <HAL_GPIO_Init+0x1ee>
 80013e0:	2304      	movs	r3, #4
 80013e2:	e004      	b.n	80013ee <HAL_GPIO_Init+0x1ee>
 80013e4:	2302      	movs	r3, #2
 80013e6:	e002      	b.n	80013ee <HAL_GPIO_Init+0x1ee>
 80013e8:	2301      	movs	r3, #1
 80013ea:	e000      	b.n	80013ee <HAL_GPIO_Init+0x1ee>
 80013ec:	2300      	movs	r3, #0
 80013ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013f0:	f002 0203 	and.w	r2, r2, #3
 80013f4:	0092      	lsls	r2, r2, #2
 80013f6:	4093      	lsls	r3, r2
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013fe:	492f      	ldr	r1, [pc, #188]	@ (80014bc <HAL_GPIO_Init+0x2bc>)
 8001400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001402:	089b      	lsrs	r3, r3, #2
 8001404:	3302      	adds	r3, #2
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d006      	beq.n	8001426 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001418:	4b2d      	ldr	r3, [pc, #180]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	492c      	ldr	r1, [pc, #176]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	608b      	str	r3, [r1, #8]
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001426:	4b2a      	ldr	r3, [pc, #168]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	43db      	mvns	r3, r3
 800142e:	4928      	ldr	r1, [pc, #160]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001430:	4013      	ands	r3, r2
 8001432:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001440:	4b23      	ldr	r3, [pc, #140]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	4922      	ldr	r1, [pc, #136]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	60cb      	str	r3, [r1, #12]
 800144c:	e006      	b.n	800145c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800144e:	4b20      	ldr	r3, [pc, #128]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	43db      	mvns	r3, r3
 8001456:	491e      	ldr	r1, [pc, #120]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001458:	4013      	ands	r3, r2
 800145a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001468:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	4918      	ldr	r1, [pc, #96]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
 8001474:	e006      	b.n	8001484 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001476:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	43db      	mvns	r3, r3
 800147e:	4914      	ldr	r1, [pc, #80]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001480:	4013      	ands	r3, r2
 8001482:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d021      	beq.n	80014d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001490:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	490e      	ldr	r1, [pc, #56]	@ (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
 800149c:	e021      	b.n	80014e2 <HAL_GPIO_Init+0x2e2>
 800149e:	bf00      	nop
 80014a0:	10320000 	.word	0x10320000
 80014a4:	10310000 	.word	0x10310000
 80014a8:	10220000 	.word	0x10220000
 80014ac:	10210000 	.word	0x10210000
 80014b0:	10120000 	.word	0x10120000
 80014b4:	10110000 	.word	0x10110000
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010000 	.word	0x40010000
 80014c0:	40010800 	.word	0x40010800
 80014c4:	40010c00 	.word	0x40010c00
 80014c8:	40011000 	.word	0x40011000
 80014cc:	40011400 	.word	0x40011400
 80014d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <HAL_GPIO_Init+0x304>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	43db      	mvns	r3, r3
 80014dc:	4909      	ldr	r1, [pc, #36]	@ (8001504 <HAL_GPIO_Init+0x304>)
 80014de:	4013      	ands	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e4:	3301      	adds	r3, #1
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ee:	fa22 f303 	lsr.w	r3, r2, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f47f ae8e 	bne.w	8001214 <HAL_GPIO_Init+0x14>
  }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	372c      	adds	r7, #44	@ 0x2c
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	40010400 	.word	0x40010400

08001508 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e001      	b.n	800152a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	460b      	mov	r3, r1
 8001540:	807b      	strh	r3, [r7, #2]
 8001542:	4613      	mov	r3, r2
 8001544:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001546:	787b      	ldrb	r3, [r7, #1]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154c:	887a      	ldrh	r2, [r7, #2]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001552:	e003      	b.n	800155c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	041a      	lsls	r2, r3, #16
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	611a      	str	r2, [r3, #16]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001566:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001568:	b08b      	sub	sp, #44	@ 0x2c
 800156a:	af06      	add	r7, sp, #24
 800156c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0f1      	b.n	800175c <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	d106      	bne.n	8001592 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f006 f8d7 	bl	8007740 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2203      	movs	r2, #3
 8001596:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 f9f2 	bl	8003988 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	687e      	ldr	r6, [r7, #4]
 80015ac:	466d      	mov	r5, sp
 80015ae:	f106 0410 	add.w	r4, r6, #16
 80015b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	602b      	str	r3, [r5, #0]
 80015ba:	1d33      	adds	r3, r6, #4
 80015bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015be:	6838      	ldr	r0, [r7, #0]
 80015c0:	f002 f9bc 	bl	800393c <USB_CoreInit>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2202      	movs	r2, #2
 80015ce:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0c2      	b.n	800175c <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 f9ed 	bl	80039bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]
 80015e6:	e040      	b.n	800166a <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	440b      	add	r3, r1
 80015f8:	3301      	adds	r3, #1
 80015fa:	2201      	movs	r2, #1
 80015fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	440b      	add	r3, r1
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	440b      	add	r3, r1
 8001622:	3303      	adds	r3, #3
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001628:	7bfa      	ldrb	r2, [r7, #15]
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	3338      	adds	r3, #56	@ 0x38
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	440b      	add	r3, r1
 800164a:	333c      	adds	r3, #60	@ 0x3c
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	440b      	add	r3, r1
 800165e:	3340      	adds	r3, #64	@ 0x40
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	3301      	adds	r3, #1
 8001668:	73fb      	strb	r3, [r7, #15]
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	429a      	cmp	r2, r3
 8001672:	d3b9      	bcc.n	80015e8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e044      	b.n	8001704 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	f203 1369 	addw	r3, r3, #361	@ 0x169
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80016a2:	7bfa      	ldrb	r2, [r7, #15]
 80016a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016bc:	7bfa      	ldrb	r2, [r7, #15]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016e8:	7bfa      	ldrb	r2, [r7, #15]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	440b      	add	r3, r1
 80016f6:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	3301      	adds	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
 8001704:	7bfa      	ldrb	r2, [r7, #15]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	429a      	cmp	r2, r3
 800170c:	d3b5      	bcc.n	800167a <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	687e      	ldr	r6, [r7, #4]
 8001716:	466d      	mov	r5, sp
 8001718:	f106 0410 	add.w	r4, r6, #16
 800171c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	602b      	str	r3, [r5, #0]
 8001724:	1d33      	adds	r3, r6, #4
 8001726:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001728:	6838      	ldr	r0, [r7, #0]
 800172a:	f002 f953 	bl	80039d4 <USB_DevInit>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2202      	movs	r2, #2
 8001738:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e00d      	b.n	800175c <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f004 fbd4 	bl	8005f02 <USB_DevDisconnect>

  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001764 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_PCD_Start+0x16>
 8001776:	2302      	movs	r3, #2
 8001778:	e016      	b.n	80017a8 <HAL_PCD_Start+0x44>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f002 f8e8 	bl	800395c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800178c:	2101      	movs	r1, #1
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f006 fa25 	bl	8007bde <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f004 fba8 	bl	8005eee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f004 fbaa 	bl	8005f16 <USB_ReadInterrupts>
 80017c2:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fb04 	bl	8001ddc <PCD_EP_ISR_Handler>

    return;
 80017d4:	e119      	b.n	8001a0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d013      	beq.n	8001808 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017f2:	b292      	uxth	r2, r2
 80017f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f006 f81c 	bl	8007836 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80017fe:	2100      	movs	r1, #0
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f905 	bl	8001a10 <HAL_PCD_SetAddress>

    return;
 8001806:	e100      	b.n	8001a0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00c      	beq.n	800182c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800181a:	b29a      	uxth	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001824:	b292      	uxth	r2, r2
 8001826:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800182a:	e0ee      	b.n	8001a0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00c      	beq.n	8001850 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800183e:	b29a      	uxth	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001848:	b292      	uxth	r2, r2
 800184a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800184e:	e0dc      	b.n	8001a0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d027      	beq.n	80018aa <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001862:	b29a      	uxth	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0204 	bic.w	r2, r2, #4
 800186c:	b292      	uxth	r2, r2
 800186e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800187a:	b29a      	uxth	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0208 	bic.w	r2, r2, #8
 8001884:	b292      	uxth	r2, r2
 8001886:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f006 f80c 	bl	80078a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001898:	b29a      	uxth	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80018a2:	b292      	uxth	r2, r2
 80018a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80018a8:	e0af      	b.n	8001a0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 8083 	beq.w	80019bc <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	77fb      	strb	r3, [r7, #31]
 80018ba:	e010      	b.n	80018de <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	7ffb      	ldrb	r3, [r7, #31]
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	441a      	add	r2, r3
 80018c8:	7ffb      	ldrb	r3, [r7, #31]
 80018ca:	8812      	ldrh	r2, [r2, #0]
 80018cc:	b292      	uxth	r2, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	3320      	adds	r3, #32
 80018d2:	443b      	add	r3, r7
 80018d4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80018d8:	7ffb      	ldrb	r3, [r7, #31]
 80018da:	3301      	adds	r3, #1
 80018dc:	77fb      	strb	r3, [r7, #31]
 80018de:	7ffb      	ldrb	r3, [r7, #31]
 80018e0:	2b07      	cmp	r3, #7
 80018e2:	d9eb      	bls.n	80018bc <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	b292      	uxth	r2, r2
 80018f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001904:	b29a      	uxth	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0201 	bic.w	r2, r2, #1
 800190e:	b292      	uxth	r2, r2
 8001910:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001914:	bf00      	nop
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800191e:	b29b      	uxth	r3, r3
 8001920:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f6      	beq.n	8001916 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001930:	b29a      	uxth	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800193a:	b292      	uxth	r2, r2
 800193c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001940:	2300      	movs	r3, #0
 8001942:	77fb      	strb	r3, [r7, #31]
 8001944:	e00f      	b.n	8001966 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001946:	7ffb      	ldrb	r3, [r7, #31]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	4611      	mov	r1, r2
 800194e:	7ffa      	ldrb	r2, [r7, #31]
 8001950:	0092      	lsls	r2, r2, #2
 8001952:	440a      	add	r2, r1
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	3320      	adds	r3, #32
 8001958:	443b      	add	r3, r7
 800195a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800195e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001960:	7ffb      	ldrb	r3, [r7, #31]
 8001962:	3301      	adds	r3, #1
 8001964:	77fb      	strb	r3, [r7, #31]
 8001966:	7ffb      	ldrb	r3, [r7, #31]
 8001968:	2b07      	cmp	r3, #7
 800196a:	d9ec      	bls.n	8001946 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001974:	b29a      	uxth	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0208 	orr.w	r2, r2, #8
 800197e:	b292      	uxth	r2, r2
 8001980:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800198c:	b29a      	uxth	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001996:	b292      	uxth	r2, r2
 8001998:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0204 	orr.w	r2, r2, #4
 80019ae:	b292      	uxth	r2, r2
 80019b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f005 ff5d 	bl	8007874 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80019ba:	e026      	b.n	8001a0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00f      	beq.n	80019e6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019d8:	b292      	uxth	r2, r2
 80019da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f005 ff1b 	bl	800781a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80019e4:	e011      	b.n	8001a0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00c      	beq.n	8001a0a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a02:	b292      	uxth	r2, r2
 8001a04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a08:	bf00      	nop
  }
}
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_PCD_SetAddress+0x1a>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e013      	b.n	8001a52 <HAL_PCD_SetAddress+0x42>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f004 fa40 	bl	8005ec8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	4608      	mov	r0, r1
 8001a64:	4611      	mov	r1, r2
 8001a66:	461a      	mov	r2, r3
 8001a68:	4603      	mov	r3, r0
 8001a6a:	70fb      	strb	r3, [r7, #3]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	803b      	strh	r3, [r7, #0]
 8001a70:	4613      	mov	r3, r2
 8001a72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	da0e      	bge.n	8001a9e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	705a      	strb	r2, [r3, #1]
 8001a9c:	e00e      	b.n	8001abc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a9e:	78fb      	ldrb	r3, [r7, #3]
 8001aa0:	f003 0207 	and.w	r2, r3, #7
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ac8:	883a      	ldrh	r2, [r7, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	78ba      	ldrb	r2, [r7, #2]
 8001ad2:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ad4:	78bb      	ldrb	r3, [r7, #2]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d102      	bne.n	8001ae0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_PCD_EP_Open+0x94>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e00e      	b.n	8001b0c <HAL_PCD_EP_Open+0xb2>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68f9      	ldr	r1, [r7, #12]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f001 ff89 	bl	8003a14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8001b0a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	da0e      	bge.n	8001b46 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2201      	movs	r2, #1
 8001b42:	705a      	strb	r2, [r3, #1]
 8001b44:	e00e      	b.n	8001b64 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	f003 0207 	and.w	r2, r3, #7
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_PCD_EP_Close+0x6a>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e00e      	b.n	8001b9c <HAL_PCD_EP_Close+0x88>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68f9      	ldr	r1, [r7, #12]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f002 fb01 	bl	8004194 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb4:	7afb      	ldrb	r3, [r7, #11]
 8001bb6:	f003 0207 	and.w	r2, r3, #7
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	4413      	add	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	2200      	movs	r2, #0
 8001be2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001be4:	7afb      	ldrb	r3, [r7, #11]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6979      	ldr	r1, [r7, #20]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 fcb8 	bl	800456c <USB_EPStartXfer>

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	460b      	mov	r3, r1
 8001c14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c16:	7afb      	ldrb	r3, [r7, #11]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4413      	add	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c52:	7afb      	ldrb	r3, [r7, #11]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6979      	ldr	r1, [r7, #20]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f002 fc81 	bl	800456c <USB_EPStartXfer>

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	f003 0207 	and.w	r2, r3, #7
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d901      	bls.n	8001c92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e04c      	b.n	8001d2c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	da0e      	bge.n	8001cb8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	705a      	strb	r2, [r3, #1]
 8001cb6:	e00c      	b.n	8001cd2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cb8:	78fa      	ldrb	r2, [r7, #3]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_PCD_EP_SetStall+0x7e>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e01c      	b.n	8001d2c <HAL_PCD_EP_SetStall+0xb8>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68f9      	ldr	r1, [r7, #12]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 ffe4 	bl	8005cce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d108      	bne.n	8001d22 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	f004 f909 	bl	8005f34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	f003 020f 	and.w	r2, r3, #15
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d901      	bls.n	8001d52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e040      	b.n	8001dd4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	da0e      	bge.n	8001d78 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	705a      	strb	r2, [r3, #1]
 8001d76:	e00e      	b.n	8001d96 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	f003 0207 	and.w	r2, r3, #7
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_PCD_EP_ClrStall+0x82>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e00e      	b.n	8001dd4 <HAL_PCD_EP_ClrStall+0xa0>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68f9      	ldr	r1, [r7, #12]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 ffd2 	bl	8005d6e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b096      	sub	sp, #88	@ 0x58
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001de4:	e3be      	b.n	8002564 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001dee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001df2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001e00:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f040 8178 	bne.w	80020fa <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d151      	bne.n	8001eba <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e26:	81fb      	strh	r3, [r7, #14]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	89fb      	ldrh	r3, [r7, #14]
 8001e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3328      	adds	r3, #40	@ 0x28
 8001e3e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	3302      	adds	r3, #2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6e:	695a      	ldr	r2, [r3, #20]
 8001e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	441a      	add	r2, r3
 8001e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e78:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f005 fcb2 	bl	80077e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 836a 	beq.w	8002564 <PCD_EP_ISR_Handler+0x788>
 8001e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f040 8365 	bne.w	8002564 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001eb8:	e354      	b.n	8002564 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001ec0:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ecc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ed0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d034      	beq.n	8001f42 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	3306      	adds	r3, #6
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f02:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8001f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f10:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f14:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	f004 f85c 	bl	8005fd4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001f28:	4013      	ands	r3, r2
 8001f2a:	823b      	strh	r3, [r7, #16]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	8a3a      	ldrh	r2, [r7, #16]
 8001f32:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f36:	b292      	uxth	r2, r2
 8001f38:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f005 fc26 	bl	800778c <HAL_PCD_SetupStageCallback>
 8001f40:	e310      	b.n	8002564 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f42:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f280 830c 	bge.w	8002564 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001f58:	4013      	ands	r3, r2
 8001f5a:	83fb      	strh	r3, [r7, #30]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	8bfa      	ldrh	r2, [r7, #30]
 8001f62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f66:	b292      	uxth	r2, r2
 8001f68:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3306      	adds	r3, #6
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f94:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d019      	beq.n	8001fd2 <PCD_EP_ISR_Handler+0x1f6>
 8001f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d015      	beq.n	8001fd2 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fac:	6959      	ldr	r1, [r3, #20]
 8001fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fb0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fb4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	f004 f80c 	bl	8005fd4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	441a      	add	r2, r3
 8001fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fc8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001fca:	2100      	movs	r1, #0
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f005 fbef 	bl	80077b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001fdc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001fe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f040 82bd 	bne.w	8002564 <PCD_EP_ISR_Handler+0x788>
 8001fea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001fee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001ff2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001ff6:	f000 82b5 	beq.w	8002564 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002008:	b29b      	uxth	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	4413      	add	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	b29b      	uxth	r3, r3
 8002020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002024:	b29a      	uxth	r2, r3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	801a      	strh	r2, [r3, #0]
 800202a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002030:	d91d      	bls.n	800206e <PCD_EP_ISR_Handler+0x292>
 8002032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	647b      	str	r3, [r7, #68]	@ 0x44
 800203a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 031f 	and.w	r3, r3, #31
 8002042:	2b00      	cmp	r3, #0
 8002044:	d102      	bne.n	800204c <PCD_EP_ISR_Handler+0x270>
 8002046:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002048:	3b01      	subs	r3, #1
 800204a:	647b      	str	r3, [r7, #68]	@ 0x44
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	b29a      	uxth	r2, r3
 8002052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002054:	b29b      	uxth	r3, r3
 8002056:	029b      	lsls	r3, r3, #10
 8002058:	b29b      	uxth	r3, r3
 800205a:	4313      	orrs	r3, r2
 800205c:	b29b      	uxth	r3, r3
 800205e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002066:	b29a      	uxth	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	801a      	strh	r2, [r3, #0]
 800206c:	e026      	b.n	80020bc <PCD_EP_ISR_Handler+0x2e0>
 800206e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10a      	bne.n	800208c <PCD_EP_ISR_Handler+0x2b0>
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002084:	b29a      	uxth	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	801a      	strh	r2, [r3, #0]
 800208a:	e017      	b.n	80020bc <PCD_EP_ISR_Handler+0x2e0>
 800208c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	085b      	lsrs	r3, r3, #1
 8002092:	647b      	str	r3, [r7, #68]	@ 0x44
 8002094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <PCD_EP_ISR_Handler+0x2ca>
 80020a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020a2:	3301      	adds	r3, #1
 80020a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	029b      	lsls	r3, r3, #10
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	4313      	orrs	r3, r2
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020cc:	827b      	strh	r3, [r7, #18]
 80020ce:	8a7b      	ldrh	r3, [r7, #18]
 80020d0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80020d4:	827b      	strh	r3, [r7, #18]
 80020d6:	8a7b      	ldrh	r3, [r7, #18]
 80020d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80020dc:	827b      	strh	r3, [r7, #18]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	8a7b      	ldrh	r3, [r7, #18]
 80020e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	8013      	strh	r3, [r2, #0]
 80020f8:	e234      	b.n	8002564 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800210e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002112:	2b00      	cmp	r3, #0
 8002114:	f280 80fc 	bge.w	8002310 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	b29a      	uxth	r2, r3
 800212a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800212e:	4013      	ands	r3, r2
 8002130:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002146:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800214a:	b292      	uxth	r2, r2
 800214c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800214e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002166:	7b1b      	ldrb	r3, [r3, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d125      	bne.n	80021b8 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002174:	b29b      	uxth	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	3306      	adds	r3, #6
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	4413      	add	r3, r2
 800218a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002194:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002198:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 8092 	beq.w	80022c6 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a8:	6959      	ldr	r1, [r3, #20]
 80021aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ac:	88da      	ldrh	r2, [r3, #6]
 80021ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80021b2:	f003 ff0f 	bl	8005fd4 <USB_ReadPMA>
 80021b6:	e086      	b.n	80022c6 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80021b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ba:	78db      	ldrb	r3, [r3, #3]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d10a      	bne.n	80021d6 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80021c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80021c4:	461a      	mov	r2, r3
 80021c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f9d9 	bl	8002580 <HAL_PCD_EP_DB_Receive>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80021d4:	e077      	b.n	80022c6 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021f0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	441a      	add	r2, r3
 8002202:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002206:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800220a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800220e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002212:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002216:	b29b      	uxth	r3, r3
 8002218:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d024      	beq.n	800227e <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800223c:	b29b      	uxth	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4413      	add	r3, r2
 8002248:	3302      	adds	r3, #2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	4413      	add	r3, r2
 8002252:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800225c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002260:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002264:	2b00      	cmp	r3, #0
 8002266:	d02e      	beq.n	80022c6 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800226e:	6959      	ldr	r1, [r3, #20]
 8002270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002272:	891a      	ldrh	r2, [r3, #8]
 8002274:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002278:	f003 feac 	bl	8005fd4 <USB_ReadPMA>
 800227c:	e023      	b.n	80022c6 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002286:	b29b      	uxth	r3, r3
 8002288:	461a      	mov	r2, r3
 800228a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4413      	add	r3, r2
 8002292:	3306      	adds	r3, #6
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	4413      	add	r3, r2
 800229c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022a6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80022aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022b8:	6959      	ldr	r1, [r3, #20]
 80022ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022bc:	895a      	ldrh	r2, [r3, #10]
 80022be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80022c2:	f003 fe87 	bl	8005fd4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80022c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022c8:	69da      	ldr	r2, [r3, #28]
 80022ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80022ce:	441a      	add	r2, r3
 80022d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80022d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80022dc:	441a      	add	r2, r3
 80022de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80022e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <PCD_EP_ISR_Handler+0x51a>
 80022ea:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80022ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d206      	bcs.n	8002304 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80022f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	4619      	mov	r1, r3
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f005 fa57 	bl	80077b0 <HAL_PCD_DataOutStageCallback>
 8002302:	e005      	b.n	8002310 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800230a:	4618      	mov	r0, r3
 800230c:	f002 f92e 	bl	800456c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002310:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 8123 	beq.w	8002564 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 800231e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800234c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	441a      	add	r2, r3
 800235e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800236a:	b29b      	uxth	r3, r3
 800236c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800236e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002370:	78db      	ldrb	r3, [r3, #3]
 8002372:	2b01      	cmp	r3, #1
 8002374:	f040 80a2 	bne.w	80024bc <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8002378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800237a:	2200      	movs	r2, #0
 800237c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800237e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002380:	7b1b      	ldrb	r3, [r3, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 8093 	beq.w	80024ae <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002388:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800238c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002390:	2b00      	cmp	r3, #0
 8002392:	d046      	beq.n	8002422 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002396:	785b      	ldrb	r3, [r3, #1]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d126      	bne.n	80023ea <PCD_EP_ISR_Handler+0x60e>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b0:	4413      	add	r3, r2
 80023b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	011a      	lsls	r2, r3, #4
 80023ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023bc:	4413      	add	r3, r2
 80023be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80023c2:	623b      	str	r3, [r7, #32]
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	801a      	strh	r2, [r3, #0]
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	801a      	strh	r2, [r3, #0]
 80023e8:	e061      	b.n	80024ae <PCD_EP_ISR_Handler+0x6d2>
 80023ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ec:	785b      	ldrb	r3, [r3, #1]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d15d      	bne.n	80024ae <PCD_EP_ISR_Handler+0x6d2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002400:	b29b      	uxth	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002406:	4413      	add	r3, r2
 8002408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800240a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	011a      	lsls	r2, r3, #4
 8002410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002412:	4413      	add	r3, r2
 8002414:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002418:	62bb      	str	r3, [r7, #40]	@ 0x28
 800241a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241c:	2200      	movs	r2, #0
 800241e:	801a      	strh	r2, [r3, #0]
 8002420:	e045      	b.n	80024ae <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800242a:	785b      	ldrb	r3, [r3, #1]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d126      	bne.n	800247e <PCD_EP_ISR_Handler+0x6a2>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	637b      	str	r3, [r7, #52]	@ 0x34
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800243e:	b29b      	uxth	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002444:	4413      	add	r3, r2
 8002446:	637b      	str	r3, [r7, #52]	@ 0x34
 8002448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	011a      	lsls	r2, r3, #4
 800244e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002450:	4413      	add	r3, r2
 8002452:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002456:	633b      	str	r3, [r7, #48]	@ 0x30
 8002458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b29b      	uxth	r3, r3
 800245e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002462:	b29a      	uxth	r2, r3
 8002464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002466:	801a      	strh	r2, [r3, #0]
 8002468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002476:	b29a      	uxth	r2, r3
 8002478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247a:	801a      	strh	r2, [r3, #0]
 800247c:	e017      	b.n	80024ae <PCD_EP_ISR_Handler+0x6d2>
 800247e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002480:	785b      	ldrb	r3, [r3, #1]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d113      	bne.n	80024ae <PCD_EP_ISR_Handler+0x6d2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800248e:	b29b      	uxth	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002494:	4413      	add	r3, r2
 8002496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	011a      	lsls	r2, r3, #4
 800249e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024a0:	4413      	add	r3, r2
 80024a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80024a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024aa:	2200      	movs	r2, #0
 80024ac:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	4619      	mov	r1, r3
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f005 f996 	bl	80077e6 <HAL_PCD_DataInStageCallback>
 80024ba:	e053      	b.n	8002564 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80024bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d146      	bne.n	8002556 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	3302      	adds	r3, #2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024f0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80024f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024f6:	699a      	ldr	r2, [r3, #24]
 80024f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d907      	bls.n	8002510 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8002500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002502:	699a      	ldr	r2, [r3, #24]
 8002504:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002508:	1ad2      	subs	r2, r2, r3
 800250a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800250c:	619a      	str	r2, [r3, #24]
 800250e:	e002      	b.n	8002516 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002512:	2200      	movs	r2, #0
 8002514:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800251e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	4619      	mov	r1, r3
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f005 f95e 	bl	80077e6 <HAL_PCD_DataInStageCallback>
 800252a:	e01b      	b.n	8002564 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800252c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800252e:	695a      	ldr	r2, [r3, #20]
 8002530:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002534:	441a      	add	r2, r3
 8002536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002538:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800253a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800253c:	69da      	ldr	r2, [r3, #28]
 800253e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002542:	441a      	add	r2, r3
 8002544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002546:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800254e:	4618      	mov	r0, r3
 8002550:	f002 f80c 	bl	800456c <USB_EPStartXfer>
 8002554:	e006      	b.n	8002564 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002556:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800255a:	461a      	mov	r2, r3
 800255c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f91b 	bl	800279a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800256c:	b29b      	uxth	r3, r3
 800256e:	b21b      	sxth	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	f6ff ac38 	blt.w	8001de6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3758      	adds	r7, #88	@ 0x58
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	4613      	mov	r3, r2
 800258c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d07e      	beq.n	8002696 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	3302      	adds	r3, #2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	699a      	ldr	r2, [r3, #24]
 80025c6:	8b7b      	ldrh	r3, [r7, #26]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d306      	bcc.n	80025da <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	699a      	ldr	r2, [r3, #24]
 80025d0:	8b7b      	ldrh	r3, [r7, #26]
 80025d2:	1ad2      	subs	r2, r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	619a      	str	r2, [r3, #24]
 80025d8:	e002      	b.n	80025e0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d123      	bne.n	8002630 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002602:	833b      	strh	r3, [r7, #24]
 8002604:	8b3b      	ldrh	r3, [r7, #24]
 8002606:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800260a:	833b      	strh	r3, [r7, #24]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	441a      	add	r2, r3
 800261a:	8b3b      	ldrh	r3, [r7, #24]
 800261c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002620:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002624:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800262c:	b29b      	uxth	r3, r3
 800262e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002636:	2b00      	cmp	r3, #0
 8002638:	d01f      	beq.n	800267a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002654:	82fb      	strh	r3, [r7, #22]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	441a      	add	r2, r3
 8002664:	8afb      	ldrh	r3, [r7, #22]
 8002666:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800266a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800266e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002672:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002676:	b29b      	uxth	r3, r3
 8002678:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800267a:	8b7b      	ldrh	r3, [r7, #26]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8087 	beq.w	8002790 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	6959      	ldr	r1, [r3, #20]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	891a      	ldrh	r2, [r3, #8]
 800268e:	8b7b      	ldrh	r3, [r7, #26]
 8002690:	f003 fca0 	bl	8005fd4 <USB_ReadPMA>
 8002694:	e07c      	b.n	8002790 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800269e:	b29b      	uxth	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	3306      	adds	r3, #6
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026be:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	699a      	ldr	r2, [r3, #24]
 80026c4:	8b7b      	ldrh	r3, [r7, #26]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d306      	bcc.n	80026d8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	8b7b      	ldrh	r3, [r7, #26]
 80026d0:	1ad2      	subs	r2, r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	619a      	str	r2, [r3, #24]
 80026d6:	e002      	b.n	80026de <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d123      	bne.n	800272e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002700:	83fb      	strh	r3, [r7, #30]
 8002702:	8bfb      	ldrh	r3, [r7, #30]
 8002704:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002708:	83fb      	strh	r3, [r7, #30]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	441a      	add	r2, r3
 8002718:	8bfb      	ldrh	r3, [r7, #30]
 800271a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800271e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800272a:	b29b      	uxth	r3, r3
 800272c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002734:	2b00      	cmp	r3, #0
 8002736:	d11f      	bne.n	8002778 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800274e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002752:	83bb      	strh	r3, [r7, #28]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	441a      	add	r2, r3
 8002762:	8bbb      	ldrh	r3, [r7, #28]
 8002764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800276c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002770:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002774:	b29b      	uxth	r3, r3
 8002776:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002778:	8b7b      	ldrh	r3, [r7, #26]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	6959      	ldr	r1, [r3, #20]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	895a      	ldrh	r2, [r3, #10]
 800278a:	8b7b      	ldrh	r3, [r7, #26]
 800278c:	f003 fc22 	bl	8005fd4 <USB_ReadPMA>
    }
  }

  return count;
 8002790:	8b7b      	ldrh	r3, [r7, #26]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b0a4      	sub	sp, #144	@ 0x90
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	4613      	mov	r3, r2
 80027a6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027a8:	88fb      	ldrh	r3, [r7, #6]
 80027aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 81dd 	beq.w	8002b6e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027bc:	b29b      	uxth	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	3302      	adds	r3, #2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027dc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	699a      	ldr	r2, [r3, #24]
 80027e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d907      	bls.n	80027fc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	699a      	ldr	r2, [r3, #24]
 80027f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80027f4:	1ad2      	subs	r2, r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	619a      	str	r2, [r3, #24]
 80027fa:	e002      	b.n	8002802 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2200      	movs	r2, #0
 8002800:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f040 80b9 	bne.w	800297e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	785b      	ldrb	r3, [r3, #1]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d126      	bne.n	8002862 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002822:	b29b      	uxth	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002828:	4413      	add	r3, r2
 800282a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	011a      	lsls	r2, r3, #4
 8002832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002834:	4413      	add	r3, r2
 8002836:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800283a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800283c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	b29b      	uxth	r3, r3
 8002842:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002846:	b29a      	uxth	r2, r3
 8002848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284a:	801a      	strh	r2, [r3, #0]
 800284c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	b29b      	uxth	r3, r3
 8002852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800285a:	b29a      	uxth	r2, r3
 800285c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285e:	801a      	strh	r2, [r3, #0]
 8002860:	e01a      	b.n	8002898 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	785b      	ldrb	r3, [r3, #1]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d116      	bne.n	8002898 <HAL_PCD_EP_DB_Transmit+0xfe>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002878:	b29b      	uxth	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800287e:	4413      	add	r3, r2
 8002880:	637b      	str	r3, [r7, #52]	@ 0x34
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	011a      	lsls	r2, r3, #4
 8002888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800288a:	4413      	add	r3, r2
 800288c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002890:	633b      	str	r3, [r7, #48]	@ 0x30
 8002892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002894:	2200      	movs	r2, #0
 8002896:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	627b      	str	r3, [r7, #36]	@ 0x24
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	785b      	ldrb	r3, [r3, #1]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d126      	bne.n	80028f4 <HAL_PCD_EP_DB_Transmit+0x15a>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	61fb      	str	r3, [r7, #28]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	4413      	add	r3, r2
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	011a      	lsls	r2, r3, #4
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
 80028c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028d8:	b29a      	uxth	r2, r3
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	801a      	strh	r2, [r3, #0]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	801a      	strh	r2, [r3, #0]
 80028f2:	e017      	b.n	8002924 <HAL_PCD_EP_DB_Transmit+0x18a>
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	785b      	ldrb	r3, [r3, #1]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d113      	bne.n	8002924 <HAL_PCD_EP_DB_Transmit+0x18a>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002904:	b29b      	uxth	r3, r3
 8002906:	461a      	mov	r2, r3
 8002908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290a:	4413      	add	r3, r2
 800290c:	627b      	str	r3, [r7, #36]	@ 0x24
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	011a      	lsls	r2, r3, #4
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002916:	4413      	add	r3, r2
 8002918:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800291c:	623b      	str	r3, [r7, #32]
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	2200      	movs	r2, #0
 8002922:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4619      	mov	r1, r3
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f004 ff5b 	bl	80077e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002930:	88fb      	ldrh	r3, [r7, #6]
 8002932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 82fc 	beq.w	8002f34 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002956:	82fb      	strh	r3, [r7, #22]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	441a      	add	r2, r3
 8002966:	8afb      	ldrh	r3, [r7, #22]
 8002968:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800296c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002970:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002978:	b29b      	uxth	r3, r3
 800297a:	8013      	strh	r3, [r2, #0]
 800297c:	e2da      	b.n	8002f34 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d021      	beq.n	80029cc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800299e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	441a      	add	r2, r3
 80029b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80029b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	f040 82ae 	bne.w	8002f34 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	695a      	ldr	r2, [r3, #20]
 80029dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029e0:	441a      	add	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	69da      	ldr	r2, [r3, #28]
 80029ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029ee:	441a      	add	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	6a1a      	ldr	r2, [r3, #32]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d30b      	bcc.n	8002a18 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	6a1a      	ldr	r2, [r3, #32]
 8002a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a10:	1ad2      	subs	r2, r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	621a      	str	r2, [r3, #32]
 8002a16:	e017      	b.n	8002a48 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d108      	bne.n	8002a32 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002a20:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002a30:	e00a      	b.n	8002a48 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2200      	movs	r2, #0
 8002a46:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	785b      	ldrb	r3, [r3, #1]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d165      	bne.n	8002b1c <HAL_PCD_EP_DB_Transmit+0x382>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a64:	4413      	add	r3, r2
 8002a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	011a      	lsls	r2, r3, #4
 8002a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a70:	4413      	add	r3, r2
 8002a72:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a86:	801a      	strh	r2, [r3, #0]
 8002a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a8e:	d91d      	bls.n	8002acc <HAL_PCD_EP_DB_Transmit+0x332>
 8002a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a94:	095b      	lsrs	r3, r3, #5
 8002a96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d102      	bne.n	8002aaa <HAL_PCD_EP_DB_Transmit+0x310>
 8002aa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	029b      	lsls	r3, r3, #10
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ac8:	801a      	strh	r2, [r3, #0]
 8002aca:	e044      	b.n	8002b56 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <HAL_PCD_EP_DB_Transmit+0x350>
 8002ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae6:	801a      	strh	r2, [r3, #0]
 8002ae8:	e035      	b.n	8002b56 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aee:	085b      	lsrs	r3, r3, #1
 8002af0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b00:	3301      	adds	r3, #1
 8002b02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	029b      	lsls	r3, r3, #10
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	4313      	orrs	r3, r2
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b18:	801a      	strh	r2, [r3, #0]
 8002b1a:	e01c      	b.n	8002b56 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	785b      	ldrb	r3, [r3, #1]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d118      	bne.n	8002b56 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b38:	4413      	add	r3, r2
 8002b3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	011a      	lsls	r2, r3, #4
 8002b42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b44:	4413      	add	r3, r2
 8002b46:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b54:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	6959      	ldr	r1, [r3, #20]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	891a      	ldrh	r2, [r3, #8]
 8002b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f003 f9ef 	bl	8005f4a <USB_WritePMA>
 8002b6c:	e1e2      	b.n	8002f34 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	3306      	adds	r3, #6
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b96:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d307      	bcc.n	8002bb6 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bae:	1ad2      	subs	r2, r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	619a      	str	r2, [r3, #24]
 8002bb4:	e002      	b.n	8002bbc <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f040 80c0 	bne.w	8002d46 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	785b      	ldrb	r3, [r3, #1]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d126      	bne.n	8002c1c <HAL_PCD_EP_DB_Transmit+0x482>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002be2:	4413      	add	r3, r2
 8002be4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	011a      	lsls	r2, r3, #4
 8002bec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002bee:	4413      	add	r3, r2
 8002bf0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002bf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002bf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c04:	801a      	strh	r2, [r3, #0]
 8002c06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c18:	801a      	strh	r2, [r3, #0]
 8002c1a:	e01a      	b.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	785b      	ldrb	r3, [r3, #1]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d116      	bne.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c38:	4413      	add	r3, r2
 8002c3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	011a      	lsls	r2, r3, #4
 8002c42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c44:	4413      	add	r3, r2
 8002c46:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c4e:	2200      	movs	r2, #0
 8002c50:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	677b      	str	r3, [r7, #116]	@ 0x74
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	785b      	ldrb	r3, [r3, #1]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d12b      	bne.n	8002cb8 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c74:	4413      	add	r3, r2
 8002c76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	011a      	lsls	r2, r3, #4
 8002c7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c80:	4413      	add	r3, r2
 8002c82:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c9c:	801a      	strh	r2, [r3, #0]
 8002c9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cb4:	801a      	strh	r2, [r3, #0]
 8002cb6:	e017      	b.n	8002ce8 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	785b      	ldrb	r3, [r3, #1]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d113      	bne.n	8002ce8 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	461a      	mov	r2, r3
 8002ccc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cce:	4413      	add	r3, r2
 8002cd0:	677b      	str	r3, [r7, #116]	@ 0x74
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	011a      	lsls	r2, r3, #4
 8002cd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cda:	4413      	add	r3, r2
 8002cdc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ce0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ce2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	4619      	mov	r1, r3
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f004 fd79 	bl	80077e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 811a 	bne.w	8002f34 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d1a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	441a      	add	r2, r3
 8002d2c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002d30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	8013      	strh	r3, [r2, #0]
 8002d44:	e0f6      	b.n	8002f34 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d121      	bne.n	8002d94 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d6a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	441a      	add	r2, r3
 8002d7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002d80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	f040 80ca 	bne.w	8002f34 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002da8:	441a      	add	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	69da      	ldr	r2, [r3, #28]
 8002db2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002db6:	441a      	add	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	6a1a      	ldr	r2, [r3, #32]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d30b      	bcc.n	8002de0 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	6a1a      	ldr	r2, [r3, #32]
 8002dd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dd8:	1ad2      	subs	r2, r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	621a      	str	r2, [r3, #32]
 8002dde:	e017      	b.n	8002e10 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d108      	bne.n	8002dfa <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002de8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002dec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002df8:	e00a      	b.n	8002e10 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2200      	movs	r2, #0
 8002e06:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	785b      	ldrb	r3, [r3, #1]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d165      	bne.n	8002eea <HAL_PCD_EP_DB_Transmit+0x750>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e32:	4413      	add	r3, r2
 8002e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	011a      	lsls	r2, r3, #4
 8002e3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e3e:	4413      	add	r3, r2
 8002e40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e54:	801a      	strh	r2, [r3, #0]
 8002e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002e5c:	d91d      	bls.n	8002e9a <HAL_PCD_EP_DB_Transmit+0x700>
 8002e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d102      	bne.n	8002e78 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002e72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e74:	3b01      	subs	r3, #1
 8002e76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	029b      	lsls	r3, r3, #10
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	4313      	orrs	r3, r2
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e96:	801a      	strh	r2, [r3, #0]
 8002e98:	e041      	b.n	8002f1e <HAL_PCD_EP_DB_Transmit+0x784>
 8002e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10a      	bne.n	8002eb8 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002ea2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eb4:	801a      	strh	r2, [r3, #0]
 8002eb6:	e032      	b.n	8002f1e <HAL_PCD_EP_DB_Transmit+0x784>
 8002eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ebc:	085b      	lsrs	r3, r3, #1
 8002ebe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HAL_PCD_EP_DB_Transmit+0x738>
 8002ecc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ece:	3301      	adds	r3, #1
 8002ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ed2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	029b      	lsls	r3, r3, #10
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ee6:	801a      	strh	r2, [r3, #0]
 8002ee8:	e019      	b.n	8002f1e <HAL_PCD_EP_DB_Transmit+0x784>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	785b      	ldrb	r3, [r3, #1]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d115      	bne.n	8002f1e <HAL_PCD_EP_DB_Transmit+0x784>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f00:	4413      	add	r3, r2
 8002f02:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	011a      	lsls	r2, r3, #4
 8002f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f12:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f1c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	6959      	ldr	r1, [r3, #20]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	895a      	ldrh	r2, [r3, #10]
 8002f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	f003 f80b 	bl	8005f4a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f4e:	82bb      	strh	r3, [r7, #20]
 8002f50:	8abb      	ldrh	r3, [r7, #20]
 8002f52:	f083 0310 	eor.w	r3, r3, #16
 8002f56:	82bb      	strh	r3, [r7, #20]
 8002f58:	8abb      	ldrh	r3, [r7, #20]
 8002f5a:	f083 0320 	eor.w	r3, r3, #32
 8002f5e:	82bb      	strh	r3, [r7, #20]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	441a      	add	r2, r3
 8002f6e:	8abb      	ldrh	r3, [r7, #20]
 8002f70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3790      	adds	r7, #144	@ 0x90
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b087      	sub	sp, #28
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	607b      	str	r3, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	817b      	strh	r3, [r7, #10]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002fa0:	897b      	ldrh	r3, [r7, #10]
 8002fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00b      	beq.n	8002fc4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fac:	897b      	ldrh	r3, [r7, #10]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	e009      	b.n	8002fd8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fc4:	897a      	ldrh	r2, [r7, #10]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002fd8:	893b      	ldrh	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d107      	bne.n	8002fee <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	80da      	strh	r2, [r3, #6]
 8002fec:	e00b      	b.n	8003006 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	0c1b      	lsrs	r3, r3, #16
 8003000:	b29a      	uxth	r2, r3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	371c      	adds	r7, #28
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr
	...

08003014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e272      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 8087 	beq.w	8003142 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003034:	4b92      	ldr	r3, [pc, #584]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	2b04      	cmp	r3, #4
 800303e:	d00c      	beq.n	800305a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003040:	4b8f      	ldr	r3, [pc, #572]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b08      	cmp	r3, #8
 800304a:	d112      	bne.n	8003072 <HAL_RCC_OscConfig+0x5e>
 800304c:	4b8c      	ldr	r3, [pc, #560]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003058:	d10b      	bne.n	8003072 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305a:	4b89      	ldr	r3, [pc, #548]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d06c      	beq.n	8003140 <HAL_RCC_OscConfig+0x12c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d168      	bne.n	8003140 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e24c      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800307a:	d106      	bne.n	800308a <HAL_RCC_OscConfig+0x76>
 800307c:	4b80      	ldr	r3, [pc, #512]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a7f      	ldr	r2, [pc, #508]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	e02e      	b.n	80030e8 <HAL_RCC_OscConfig+0xd4>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10c      	bne.n	80030ac <HAL_RCC_OscConfig+0x98>
 8003092:	4b7b      	ldr	r3, [pc, #492]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a7a      	ldr	r2, [pc, #488]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	4b78      	ldr	r3, [pc, #480]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a77      	ldr	r2, [pc, #476]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	e01d      	b.n	80030e8 <HAL_RCC_OscConfig+0xd4>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCC_OscConfig+0xbc>
 80030b6:	4b72      	ldr	r3, [pc, #456]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a71      	ldr	r2, [pc, #452]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b6f      	ldr	r3, [pc, #444]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e00b      	b.n	80030e8 <HAL_RCC_OscConfig+0xd4>
 80030d0:	4b6b      	ldr	r3, [pc, #428]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a6a      	ldr	r2, [pc, #424]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	4b68      	ldr	r3, [pc, #416]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a67      	ldr	r2, [pc, #412]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d013      	beq.n	8003118 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fd ff4a 	bl	8000f88 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f8:	f7fd ff46 	bl	8000f88 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	@ 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e200      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	4b5d      	ldr	r3, [pc, #372]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0xe4>
 8003116:	e014      	b.n	8003142 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fd ff36 	bl	8000f88 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003120:	f7fd ff32 	bl	8000f88 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	@ 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e1ec      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003132:	4b53      	ldr	r3, [pc, #332]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x10c>
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d063      	beq.n	8003216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800314e:	4b4c      	ldr	r3, [pc, #304]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800315a:	4b49      	ldr	r3, [pc, #292]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b08      	cmp	r3, #8
 8003164:	d11c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x18c>
 8003166:	4b46      	ldr	r3, [pc, #280]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d116      	bne.n	80031a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	4b43      	ldr	r3, [pc, #268]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_RCC_OscConfig+0x176>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d001      	beq.n	800318a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e1c0      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318a:	4b3d      	ldr	r3, [pc, #244]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4939      	ldr	r1, [pc, #228]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319e:	e03a      	b.n	8003216 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d020      	beq.n	80031ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a8:	4b36      	ldr	r3, [pc, #216]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ae:	f7fd feeb 	bl	8000f88 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b6:	f7fd fee7 	bl	8000f88 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e1a1      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4927      	ldr	r1, [pc, #156]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]
 80031e8:	e015      	b.n	8003216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ea:	4b26      	ldr	r3, [pc, #152]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7fd feca 	bl	8000f88 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f8:	f7fd fec6 	bl	8000f88 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e180      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320a:	4b1d      	ldr	r3, [pc, #116]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d03a      	beq.n	8003298 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d019      	beq.n	800325e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800322a:	4b17      	ldr	r3, [pc, #92]	@ (8003288 <HAL_RCC_OscConfig+0x274>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003230:	f7fd feaa 	bl	8000f88 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003238:	f7fd fea6 	bl	8000f88 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e160      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324a:	4b0d      	ldr	r3, [pc, #52]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003256:	2001      	movs	r0, #1
 8003258:	f000 fa9c 	bl	8003794 <RCC_Delay>
 800325c:	e01c      	b.n	8003298 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800325e:	4b0a      	ldr	r3, [pc, #40]	@ (8003288 <HAL_RCC_OscConfig+0x274>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003264:	f7fd fe90 	bl	8000f88 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326a:	e00f      	b.n	800328c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326c:	f7fd fe8c 	bl	8000f88 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d908      	bls.n	800328c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e146      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	42420000 	.word	0x42420000
 8003288:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328c:	4b92      	ldr	r3, [pc, #584]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e9      	bne.n	800326c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80a6 	beq.w	80033f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032aa:	4b8b      	ldr	r3, [pc, #556]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10d      	bne.n	80032d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	4b88      	ldr	r3, [pc, #544]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	4a87      	ldr	r2, [pc, #540]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c0:	61d3      	str	r3, [r2, #28]
 80032c2:	4b85      	ldr	r3, [pc, #532]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ce:	2301      	movs	r3, #1
 80032d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d2:	4b82      	ldr	r3, [pc, #520]	@ (80034dc <HAL_RCC_OscConfig+0x4c8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d118      	bne.n	8003310 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032de:	4b7f      	ldr	r3, [pc, #508]	@ (80034dc <HAL_RCC_OscConfig+0x4c8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a7e      	ldr	r2, [pc, #504]	@ (80034dc <HAL_RCC_OscConfig+0x4c8>)
 80032e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ea:	f7fd fe4d 	bl	8000f88 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f2:	f7fd fe49 	bl	8000f88 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b64      	cmp	r3, #100	@ 0x64
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e103      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003304:	4b75      	ldr	r3, [pc, #468]	@ (80034dc <HAL_RCC_OscConfig+0x4c8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d106      	bne.n	8003326 <HAL_RCC_OscConfig+0x312>
 8003318:	4b6f      	ldr	r3, [pc, #444]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	4a6e      	ldr	r2, [pc, #440]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	6213      	str	r3, [r2, #32]
 8003324:	e02d      	b.n	8003382 <HAL_RCC_OscConfig+0x36e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10c      	bne.n	8003348 <HAL_RCC_OscConfig+0x334>
 800332e:	4b6a      	ldr	r3, [pc, #424]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	4a69      	ldr	r2, [pc, #420]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	6213      	str	r3, [r2, #32]
 800333a:	4b67      	ldr	r3, [pc, #412]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	4a66      	ldr	r2, [pc, #408]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003340:	f023 0304 	bic.w	r3, r3, #4
 8003344:	6213      	str	r3, [r2, #32]
 8003346:	e01c      	b.n	8003382 <HAL_RCC_OscConfig+0x36e>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b05      	cmp	r3, #5
 800334e:	d10c      	bne.n	800336a <HAL_RCC_OscConfig+0x356>
 8003350:	4b61      	ldr	r3, [pc, #388]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	4a60      	ldr	r2, [pc, #384]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003356:	f043 0304 	orr.w	r3, r3, #4
 800335a:	6213      	str	r3, [r2, #32]
 800335c:	4b5e      	ldr	r3, [pc, #376]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	4a5d      	ldr	r2, [pc, #372]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6213      	str	r3, [r2, #32]
 8003368:	e00b      	b.n	8003382 <HAL_RCC_OscConfig+0x36e>
 800336a:	4b5b      	ldr	r3, [pc, #364]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	4a5a      	ldr	r2, [pc, #360]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	6213      	str	r3, [r2, #32]
 8003376:	4b58      	ldr	r3, [pc, #352]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	4a57      	ldr	r2, [pc, #348]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800337c:	f023 0304 	bic.w	r3, r3, #4
 8003380:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d015      	beq.n	80033b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338a:	f7fd fdfd 	bl	8000f88 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003390:	e00a      	b.n	80033a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003392:	f7fd fdf9 	bl	8000f88 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e0b1      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a8:	4b4b      	ldr	r3, [pc, #300]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0ee      	beq.n	8003392 <HAL_RCC_OscConfig+0x37e>
 80033b4:	e014      	b.n	80033e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b6:	f7fd fde7 	bl	8000f88 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f7fd fde3 	bl	8000f88 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e09b      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d4:	4b40      	ldr	r3, [pc, #256]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1ee      	bne.n	80033be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033e0:	7dfb      	ldrb	r3, [r7, #23]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d105      	bne.n	80033f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e6:	4b3c      	ldr	r3, [pc, #240]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	4a3b      	ldr	r2, [pc, #236]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 8087 	beq.w	800350a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033fc:	4b36      	ldr	r3, [pc, #216]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b08      	cmp	r3, #8
 8003406:	d061      	beq.n	80034cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d146      	bne.n	800349e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003410:	4b33      	ldr	r3, [pc, #204]	@ (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7fd fdb7 	bl	8000f88 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341e:	f7fd fdb3 	bl	8000f88 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e06d      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003430:	4b29      	ldr	r3, [pc, #164]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f0      	bne.n	800341e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003444:	d108      	bne.n	8003458 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003446:	4b24      	ldr	r3, [pc, #144]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	4921      	ldr	r1, [pc, #132]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003458:	4b1f      	ldr	r3, [pc, #124]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a19      	ldr	r1, [r3, #32]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	430b      	orrs	r3, r1
 800346a:	491b      	ldr	r1, [pc, #108]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003470:	4b1b      	ldr	r3, [pc, #108]	@ (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fd fd87 	bl	8000f88 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347e:	f7fd fd83 	bl	8000f88 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e03d      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003490:	4b11      	ldr	r3, [pc, #68]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x46a>
 800349c:	e035      	b.n	800350a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349e:	4b10      	ldr	r3, [pc, #64]	@ (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fd fd70 	bl	8000f88 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ac:	f7fd fd6c 	bl	8000f88 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e026      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034be:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x498>
 80034ca:	e01e      	b.n	800350a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d107      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e019      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40007000 	.word	0x40007000
 80034e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <HAL_RCC_OscConfig+0x500>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d106      	bne.n	8003506 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003502:	429a      	cmp	r2, r3
 8003504:	d001      	beq.n	800350a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40021000 	.word	0x40021000

08003518 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0d0      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800352c:	4b6a      	ldr	r3, [pc, #424]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d910      	bls.n	800355c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b67      	ldr	r3, [pc, #412]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 0207 	bic.w	r2, r3, #7
 8003542:	4965      	ldr	r1, [pc, #404]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b63      	ldr	r3, [pc, #396]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0b8      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d020      	beq.n	80035aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003574:	4b59      	ldr	r3, [pc, #356]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4a58      	ldr	r2, [pc, #352]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800357e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800358c:	4b53      	ldr	r3, [pc, #332]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4a52      	ldr	r2, [pc, #328]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003596:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003598:	4b50      	ldr	r3, [pc, #320]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	494d      	ldr	r1, [pc, #308]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d040      	beq.n	8003638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035be:	4b47      	ldr	r3, [pc, #284]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d115      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e07f      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d6:	4b41      	ldr	r3, [pc, #260]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e073      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e6:	4b3d      	ldr	r3, [pc, #244]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e06b      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f6:	4b39      	ldr	r3, [pc, #228]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f023 0203 	bic.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4936      	ldr	r1, [pc, #216]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003608:	f7fd fcbe 	bl	8000f88 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	e00a      	b.n	8003626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003610:	f7fd fcba 	bl	8000f88 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e053      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	4b2d      	ldr	r3, [pc, #180]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 020c 	and.w	r2, r3, #12
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	429a      	cmp	r2, r3
 8003636:	d1eb      	bne.n	8003610 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003638:	4b27      	ldr	r3, [pc, #156]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d210      	bcs.n	8003668 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b24      	ldr	r3, [pc, #144]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 0207 	bic.w	r2, r3, #7
 800364e:	4922      	ldr	r1, [pc, #136]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003656:	4b20      	ldr	r3, [pc, #128]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e032      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003674:	4b19      	ldr	r3, [pc, #100]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	4916      	ldr	r1, [pc, #88]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	4313      	orrs	r3, r2
 8003684:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003692:	4b12      	ldr	r3, [pc, #72]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	490e      	ldr	r1, [pc, #56]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036a6:	f000 f821 	bl	80036ec <HAL_RCC_GetSysClockFreq>
 80036aa:	4602      	mov	r2, r0
 80036ac:	4b0b      	ldr	r3, [pc, #44]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	490a      	ldr	r1, [pc, #40]	@ (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036b8:	5ccb      	ldrb	r3, [r1, r3]
 80036ba:	fa22 f303 	lsr.w	r3, r2, r3
 80036be:	4a09      	ldr	r2, [pc, #36]	@ (80036e4 <HAL_RCC_ClockConfig+0x1cc>)
 80036c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036c2:	4b09      	ldr	r3, [pc, #36]	@ (80036e8 <HAL_RCC_ClockConfig+0x1d0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fd fc1c 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40022000 	.word	0x40022000
 80036dc:	40021000 	.word	0x40021000
 80036e0:	08007cf4 	.word	0x08007cf4
 80036e4:	20000000 	.word	0x20000000
 80036e8:	20000004 	.word	0x20000004

080036ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	2300      	movs	r3, #0
 8003700:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003706:	4b1e      	ldr	r3, [pc, #120]	@ (8003780 <HAL_RCC_GetSysClockFreq+0x94>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b04      	cmp	r3, #4
 8003714:	d002      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x30>
 8003716:	2b08      	cmp	r3, #8
 8003718:	d003      	beq.n	8003722 <HAL_RCC_GetSysClockFreq+0x36>
 800371a:	e027      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800371c:	4b19      	ldr	r3, [pc, #100]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x98>)
 800371e:	613b      	str	r3, [r7, #16]
      break;
 8003720:	e027      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	0c9b      	lsrs	r3, r3, #18
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	4a17      	ldr	r2, [pc, #92]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x9c>)
 800372c:	5cd3      	ldrb	r3, [r2, r3]
 800372e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d010      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800373a:	4b11      	ldr	r3, [pc, #68]	@ (8003780 <HAL_RCC_GetSysClockFreq+0x94>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	0c5b      	lsrs	r3, r3, #17
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	4a11      	ldr	r2, [pc, #68]	@ (800378c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003746:	5cd3      	ldrb	r3, [r2, r3]
 8003748:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a0d      	ldr	r2, [pc, #52]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x98>)
 800374e:	fb03 f202 	mul.w	r2, r3, r2
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	fbb2 f3f3 	udiv	r3, r2, r3
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	e004      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a0c      	ldr	r2, [pc, #48]	@ (8003790 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003760:	fb02 f303 	mul.w	r3, r2, r3
 8003764:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	613b      	str	r3, [r7, #16]
      break;
 800376a:	e002      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800376c:	4b05      	ldr	r3, [pc, #20]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x98>)
 800376e:	613b      	str	r3, [r7, #16]
      break;
 8003770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003772:	693b      	ldr	r3, [r7, #16]
}
 8003774:	4618      	mov	r0, r3
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
 8003784:	007a1200 	.word	0x007a1200
 8003788:	08007d04 	.word	0x08007d04
 800378c:	08007d14 	.word	0x08007d14
 8003790:	003d0900 	.word	0x003d0900

08003794 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800379c:	4b0a      	ldr	r3, [pc, #40]	@ (80037c8 <RCC_Delay+0x34>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a0a      	ldr	r2, [pc, #40]	@ (80037cc <RCC_Delay+0x38>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	0a5b      	lsrs	r3, r3, #9
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037b0:	bf00      	nop
  }
  while (Delay --);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1e5a      	subs	r2, r3, #1
 80037b6:	60fa      	str	r2, [r7, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1f9      	bne.n	80037b0 <RCC_Delay+0x1c>
}
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr
 80037c8:	20000000 	.word	0x20000000
 80037cc:	10624dd3 	.word	0x10624dd3

080037d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d07d      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037ec:	2300      	movs	r3, #0
 80037ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f0:	4b4f      	ldr	r3, [pc, #316]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10d      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037fc:	4b4c      	ldr	r3, [pc, #304]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	4a4b      	ldr	r2, [pc, #300]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003806:	61d3      	str	r3, [r2, #28]
 8003808:	4b49      	ldr	r3, [pc, #292]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003814:	2301      	movs	r3, #1
 8003816:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003818:	4b46      	ldr	r3, [pc, #280]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d118      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003824:	4b43      	ldr	r3, [pc, #268]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a42      	ldr	r2, [pc, #264]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800382a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800382e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003830:	f7fd fbaa 	bl	8000f88 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003836:	e008      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003838:	f7fd fba6 	bl	8000f88 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b64      	cmp	r3, #100	@ 0x64
 8003844:	d901      	bls.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e06d      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384a:	4b3a      	ldr	r3, [pc, #232]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003856:	4b36      	ldr	r3, [pc, #216]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800385e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d02e      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	429a      	cmp	r2, r3
 8003872:	d027      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003874:	4b2e      	ldr	r3, [pc, #184]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800387c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800387e:	4b2e      	ldr	r3, [pc, #184]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003880:	2201      	movs	r2, #1
 8003882:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003884:	4b2c      	ldr	r3, [pc, #176]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800388a:	4a29      	ldr	r2, [pc, #164]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d014      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389a:	f7fd fb75 	bl	8000f88 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a0:	e00a      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a2:	f7fd fb71 	bl	8000f88 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e036      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0ee      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4917      	ldr	r1, [pc, #92]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d105      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038dc:	4b14      	ldr	r3, [pc, #80]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	4a13      	ldr	r2, [pc, #76]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	490b      	ldr	r1, [pc, #44]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003902:	4313      	orrs	r3, r2
 8003904:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003912:	4b07      	ldr	r3, [pc, #28]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	4904      	ldr	r1, [pc, #16]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000
 8003934:	40007000 	.word	0x40007000
 8003938:	42420440 	.word	0x42420440

0800393c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800393c:	b084      	sub	sp, #16
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	f107 0014 	add.w	r0, r7, #20
 800394a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	b004      	add	sp, #16
 800395a:	4770      	bx	lr

0800395c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800396c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003970:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	b29a      	uxth	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003990:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003994:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	43db      	mvns	r3, r3
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	4013      	ands	r3, r2
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr

080039d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80039d4:	b084      	sub	sp, #16
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	f107 0014 	add.w	r0, r7, #20
 80039e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	b004      	add	sp, #16
 8003a12:	4770      	bx	lr

08003a14 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b09d      	sub	sp, #116	@ 0x74
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a3a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	78db      	ldrb	r3, [r3, #3]
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d81f      	bhi.n	8003a86 <USB_ActivateEndpoint+0x72>
 8003a46:	a201      	add	r2, pc, #4	@ (adr r2, 8003a4c <USB_ActivateEndpoint+0x38>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003a5d 	.word	0x08003a5d
 8003a50:	08003a79 	.word	0x08003a79
 8003a54:	08003a8f 	.word	0x08003a8f
 8003a58:	08003a6b 	.word	0x08003a6b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003a5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003a60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a64:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003a68:	e012      	b.n	8003a90 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003a6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003a6e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003a72:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003a76:	e00b      	b.n	8003a90 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003a78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003a7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a80:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003a84:	e004      	b.n	8003a90 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8003a8c:	e000      	b.n	8003a90 <USB_ActivateEndpoint+0x7c>
      break;
 8003a8e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	441a      	add	r2, r3
 8003a9a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003a9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003aa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ac4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	7812      	ldrb	r2, [r2, #0]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	441a      	add	r2, r3
 8003ade:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003ae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	7b1b      	ldrb	r3, [r3, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f040 8178 	bne.w	8003df0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	785b      	ldrb	r3, [r3, #1]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 8084 	beq.w	8003c12 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	011a      	lsls	r2, r3, #4
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	88db      	ldrh	r3, [r3, #6]
 8003b32:	085b      	lsrs	r3, r3, #1
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	827b      	strh	r3, [r7, #18]
 8003b4c:	8a7b      	ldrh	r3, [r7, #18]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d01b      	beq.n	8003b8e <USB_ActivateEndpoint+0x17a>
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b6c:	823b      	strh	r3, [r7, #16]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	441a      	add	r2, r3
 8003b78:	8a3b      	ldrh	r3, [r7, #16]
 8003b7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	78db      	ldrb	r3, [r3, #3]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d020      	beq.n	8003bd8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ba8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bac:	81bb      	strh	r3, [r7, #12]
 8003bae:	89bb      	ldrh	r3, [r7, #12]
 8003bb0:	f083 0320 	eor.w	r3, r3, #32
 8003bb4:	81bb      	strh	r3, [r7, #12]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	441a      	add	r2, r3
 8003bc0:	89bb      	ldrh	r3, [r7, #12]
 8003bc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	8013      	strh	r3, [r2, #0]
 8003bd6:	e2d5      	b.n	8004184 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bee:	81fb      	strh	r3, [r7, #14]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	441a      	add	r2, r3
 8003bfa:	89fb      	ldrh	r3, [r7, #14]
 8003bfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	8013      	strh	r3, [r2, #0]
 8003c10:	e2b8      	b.n	8004184 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c22:	4413      	add	r3, r2
 8003c24:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	011a      	lsls	r2, r3, #4
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	88db      	ldrh	r3, [r3, #6]
 8003c3a:	085b      	lsrs	r3, r3, #1
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c44:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c56:	4413      	add	r3, r2
 8003c58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	011a      	lsls	r2, r3, #4
 8003c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c62:	4413      	add	r3, r2
 8003c64:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	801a      	strh	r2, [r3, #0]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c80:	d91d      	bls.n	8003cbe <USB_ActivateEndpoint+0x2aa>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 031f 	and.w	r3, r3, #31
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d102      	bne.n	8003c9c <USB_ActivateEndpoint+0x288>
 8003c96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	029b      	lsls	r3, r3, #10
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	4313      	orrs	r3, r2
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	801a      	strh	r2, [r3, #0]
 8003cbc:	e026      	b.n	8003d0c <USB_ActivateEndpoint+0x2f8>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10a      	bne.n	8003cdc <USB_ActivateEndpoint+0x2c8>
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	801a      	strh	r2, [r3, #0]
 8003cda:	e017      	b.n	8003d0c <USB_ActivateEndpoint+0x2f8>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	085b      	lsrs	r3, r3, #1
 8003ce2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <USB_ActivateEndpoint+0x2e2>
 8003cf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	029b      	lsls	r3, r3, #10
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	4313      	orrs	r3, r2
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003d1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003d1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d01b      	beq.n	8003d5c <USB_ActivateEndpoint+0x348>
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d3a:	843b      	strh	r3, [r7, #32]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	441a      	add	r2, r3
 8003d46:	8c3b      	ldrh	r3, [r7, #32]
 8003d48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d124      	bne.n	8003dae <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d7a:	83bb      	strh	r3, [r7, #28]
 8003d7c:	8bbb      	ldrh	r3, [r7, #28]
 8003d7e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003d82:	83bb      	strh	r3, [r7, #28]
 8003d84:	8bbb      	ldrh	r3, [r7, #28]
 8003d86:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003d8a:	83bb      	strh	r3, [r7, #28]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	441a      	add	r2, r3
 8003d96:	8bbb      	ldrh	r3, [r7, #28]
 8003d98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003da0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	8013      	strh	r3, [r2, #0]
 8003dac:	e1ea      	b.n	8004184 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dc4:	83fb      	strh	r3, [r7, #30]
 8003dc6:	8bfb      	ldrh	r3, [r7, #30]
 8003dc8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003dcc:	83fb      	strh	r3, [r7, #30]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	441a      	add	r2, r3
 8003dd8:	8bfb      	ldrh	r3, [r7, #30]
 8003dda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003de2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	8013      	strh	r3, [r2, #0]
 8003dee:	e1c9      	b.n	8004184 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	78db      	ldrb	r3, [r3, #3]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d11e      	bne.n	8003e36 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e0e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	441a      	add	r2, r3
 8003e1c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003e20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e28:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003e2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	8013      	strh	r3, [r2, #0]
 8003e34:	e01d      	b.n	8003e72 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8003e48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e4c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	441a      	add	r2, r3
 8003e5a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003e5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e82:	4413      	add	r3, r2
 8003e84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	011a      	lsls	r2, r3, #4
 8003e8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	891b      	ldrh	r3, [r3, #8]
 8003e9a:	085b      	lsrs	r3, r3, #1
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ea4:	801a      	strh	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb6:	4413      	add	r3, r2
 8003eb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	011a      	lsls	r2, r3, #4
 8003ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003ec8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	895b      	ldrh	r3, [r3, #10]
 8003ece:	085b      	lsrs	r3, r3, #1
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ed8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	785b      	ldrb	r3, [r3, #1]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f040 8093 	bne.w	800400a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8003ef4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ef8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01b      	beq.n	8003f38 <USB_ActivateEndpoint+0x524>
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f16:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	441a      	add	r2, r3
 8003f22:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003f24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003f46:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01b      	beq.n	8003f88 <USB_ActivateEndpoint+0x574>
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f66:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	441a      	add	r2, r3
 8003f72:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003f74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f80:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f9e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003fa0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003fa2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003fa6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003fa8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003faa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003fae:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	441a      	add	r2, r3
 8003fba:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003fbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fe2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fe6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	441a      	add	r2, r3
 8003ff2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003ff4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ff8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ffc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004004:	b29b      	uxth	r3, r3
 8004006:	8013      	strh	r3, [r2, #0]
 8004008:	e0bc      	b.n	8004184 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800401a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800401e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d01d      	beq.n	8004062 <USB_ActivateEndpoint+0x64e>
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	b29b      	uxth	r3, r3
 8004034:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800403c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	441a      	add	r2, r3
 800404a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800404e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004052:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004056:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800405a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800405e:	b29b      	uxth	r3, r3
 8004060:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004072:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407a:	2b00      	cmp	r3, #0
 800407c:	d01d      	beq.n	80040ba <USB_ActivateEndpoint+0x6a6>
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	b29b      	uxth	r3, r3
 800408c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004090:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004094:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	441a      	add	r2, r3
 80040a2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80040a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	78db      	ldrb	r3, [r3, #3]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d024      	beq.n	800410c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040d8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80040dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80040e0:	f083 0320 	eor.w	r3, r3, #32
 80040e4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	441a      	add	r2, r3
 80040f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80040f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004106:	b29b      	uxth	r3, r3
 8004108:	8013      	strh	r3, [r2, #0]
 800410a:	e01d      	b.n	8004148 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	b29b      	uxth	r3, r3
 800411a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800411e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004122:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	441a      	add	r2, r3
 8004130:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004134:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004138:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800413c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004144:	b29b      	uxth	r3, r3
 8004146:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	b29b      	uxth	r3, r3
 8004156:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800415a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800415e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	441a      	add	r2, r3
 800416c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004170:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004174:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004178:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800417c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004180:	b29b      	uxth	r3, r3
 8004182:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004184:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004188:	4618      	mov	r0, r3
 800418a:	3774      	adds	r7, #116	@ 0x74
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop

08004194 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004194:	b480      	push	{r7}
 8004196:	b08d      	sub	sp, #52	@ 0x34
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	7b1b      	ldrb	r3, [r3, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f040 808e 	bne.w	80042c4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	785b      	ldrb	r3, [r3, #1]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d044      	beq.n	800423a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	81bb      	strh	r3, [r7, #12]
 80041be:	89bb      	ldrh	r3, [r7, #12]
 80041c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d01b      	beq.n	8004200 <USB_DeactivateEndpoint+0x6c>
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041de:	817b      	strh	r3, [r7, #10]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	441a      	add	r2, r3
 80041ea:	897b      	ldrh	r3, [r7, #10]
 80041ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	b29b      	uxth	r3, r3
 800420e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004212:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004216:	813b      	strh	r3, [r7, #8]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	441a      	add	r2, r3
 8004222:	893b      	ldrh	r3, [r7, #8]
 8004224:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004228:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800422c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004234:	b29b      	uxth	r3, r3
 8004236:	8013      	strh	r3, [r2, #0]
 8004238:	e192      	b.n	8004560 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	827b      	strh	r3, [r7, #18]
 8004248:	8a7b      	ldrh	r3, [r7, #18]
 800424a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d01b      	beq.n	800428a <USB_DeactivateEndpoint+0xf6>
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004268:	823b      	strh	r3, [r7, #16]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	441a      	add	r2, r3
 8004274:	8a3b      	ldrh	r3, [r7, #16]
 8004276:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800427a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800427e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004286:	b29b      	uxth	r3, r3
 8004288:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b29b      	uxth	r3, r3
 8004298:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800429c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042a0:	81fb      	strh	r3, [r7, #14]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	441a      	add	r2, r3
 80042ac:	89fb      	ldrh	r3, [r7, #14]
 80042ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042be:	b29b      	uxth	r3, r3
 80042c0:	8013      	strh	r3, [r2, #0]
 80042c2:	e14d      	b.n	8004560 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	785b      	ldrb	r3, [r3, #1]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f040 80a5 	bne.w	8004418 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	843b      	strh	r3, [r7, #32]
 80042dc:	8c3b      	ldrh	r3, [r7, #32]
 80042de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d01b      	beq.n	800431e <USB_DeactivateEndpoint+0x18a>
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042fc:	83fb      	strh	r3, [r7, #30]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	441a      	add	r2, r3
 8004308:	8bfb      	ldrh	r3, [r7, #30]
 800430a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800430e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004312:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800431a:	b29b      	uxth	r3, r3
 800431c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	83bb      	strh	r3, [r7, #28]
 800432c:	8bbb      	ldrh	r3, [r7, #28]
 800432e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d01b      	beq.n	800436e <USB_DeactivateEndpoint+0x1da>
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	b29b      	uxth	r3, r3
 8004344:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800434c:	837b      	strh	r3, [r7, #26]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	441a      	add	r2, r3
 8004358:	8b7b      	ldrh	r3, [r7, #26]
 800435a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800435e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004362:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004366:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800436a:	b29b      	uxth	r3, r3
 800436c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004380:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004384:	833b      	strh	r3, [r7, #24]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	441a      	add	r2, r3
 8004390:	8b3b      	ldrh	r3, [r7, #24]
 8004392:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004396:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800439a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800439e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043bc:	82fb      	strh	r3, [r7, #22]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	441a      	add	r2, r3
 80043c8:	8afb      	ldrh	r3, [r7, #22]
 80043ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043da:	b29b      	uxth	r3, r3
 80043dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043f4:	82bb      	strh	r3, [r7, #20]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	441a      	add	r2, r3
 8004400:	8abb      	ldrh	r3, [r7, #20]
 8004402:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004406:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800440a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800440e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004412:	b29b      	uxth	r3, r3
 8004414:	8013      	strh	r3, [r2, #0]
 8004416:	e0a3      	b.n	8004560 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004426:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004428:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01b      	beq.n	8004468 <USB_DeactivateEndpoint+0x2d4>
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	b29b      	uxth	r3, r3
 800443e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004446:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	441a      	add	r2, r3
 8004452:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800445c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004464:	b29b      	uxth	r3, r3
 8004466:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004476:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01b      	beq.n	80044b8 <USB_DeactivateEndpoint+0x324>
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	b29b      	uxth	r3, r3
 800448e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004496:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	441a      	add	r2, r3
 80044a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80044a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	441a      	add	r2, r3
 80044da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80044dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004502:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004506:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	441a      	add	r2, r3
 8004512:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004514:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004518:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800451c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004524:	b29b      	uxth	r3, r3
 8004526:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	b29b      	uxth	r3, r3
 8004536:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800453a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800453e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	441a      	add	r2, r3
 800454a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800454c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004550:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800455c:	b29b      	uxth	r3, r3
 800455e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3734      	adds	r7, #52	@ 0x34
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr

0800456c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b0c2      	sub	sp, #264	@ 0x108
 8004570:	af00      	add	r7, sp, #0
 8004572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004576:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800457a:	6018      	str	r0, [r3, #0]
 800457c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004584:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800458a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	785b      	ldrb	r3, [r3, #1]
 8004592:	2b01      	cmp	r3, #1
 8004594:	f040 86b7 	bne.w	8005306 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800459c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699a      	ldr	r2, [r3, #24]
 80045a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d908      	bls.n	80045c6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80045b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80045c4:	e007      	b.n	80045d6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80045c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80045d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	7b1b      	ldrb	r3, [r3, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d13a      	bne.n	800465c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80045e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6959      	ldr	r1, [r3, #20]
 80045f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	88da      	ldrh	r2, [r3, #6]
 80045fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004602:	b29b      	uxth	r3, r3
 8004604:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004608:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800460c:	6800      	ldr	r0, [r0, #0]
 800460e:	f001 fc9c 	bl	8005f4a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004616:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004622:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800462c:	b29b      	uxth	r3, r3
 800462e:	461a      	mov	r2, r3
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4413      	add	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800463a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	011a      	lsls	r2, r3, #4
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4413      	add	r3, r2
 8004648:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	801a      	strh	r2, [r3, #0]
 8004658:	f000 be1f 	b.w	800529a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800465c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	78db      	ldrb	r3, [r3, #3]
 8004668:	2b02      	cmp	r3, #2
 800466a:	f040 8462 	bne.w	8004f32 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800466e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6a1a      	ldr	r2, [r3, #32]
 800467a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800467e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	429a      	cmp	r2, r3
 8004688:	f240 83df 	bls.w	8004e4a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800468c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004690:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800469a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046b2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80046b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	441a      	add	r2, r3
 80046d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80046d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046dc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80046e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80046e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6a1a      	ldr	r2, [r3, #32]
 80046f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046f8:	1ad2      	subs	r2, r2, r3
 80046fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800470a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 81c7 	beq.w	8004abc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800472e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004732:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	633b      	str	r3, [r7, #48]	@ 0x30
 800473a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800473e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	785b      	ldrb	r3, [r3, #1]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d177      	bne.n	800483a <USB_EPStartXfer+0x2ce>
 800474a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800474e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800475a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004764:	b29b      	uxth	r3, r3
 8004766:	461a      	mov	r2, r3
 8004768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476a:	4413      	add	r3, r2
 800476c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800476e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	011a      	lsls	r2, r3, #4
 800477c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477e:	4413      	add	r3, r2
 8004780:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004784:	627b      	str	r3, [r7, #36]	@ 0x24
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	b29b      	uxth	r3, r3
 800478c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004790:	b29a      	uxth	r2, r3
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	801a      	strh	r2, [r3, #0]
 8004796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800479a:	2b3e      	cmp	r3, #62	@ 0x3e
 800479c:	d921      	bls.n	80047e2 <USB_EPStartXfer+0x276>
 800479e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80047a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d104      	bne.n	80047be <USB_EPStartXfer+0x252>
 80047b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80047b8:	3b01      	subs	r3, #1
 80047ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	029b      	lsls	r3, r3, #10
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	4313      	orrs	r3, r2
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047da:	b29a      	uxth	r2, r3
 80047dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047de:	801a      	strh	r2, [r3, #0]
 80047e0:	e050      	b.n	8004884 <USB_EPStartXfer+0x318>
 80047e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <USB_EPStartXfer+0x294>
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	801a      	strh	r2, [r3, #0]
 80047fe:	e041      	b.n	8004884 <USB_EPStartXfer+0x318>
 8004800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004804:	085b      	lsrs	r3, r3, #1
 8004806:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800480a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d004      	beq.n	8004820 <USB_EPStartXfer+0x2b4>
 8004816:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800481a:	3301      	adds	r3, #1
 800481c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29a      	uxth	r2, r3
 8004826:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800482a:	b29b      	uxth	r3, r3
 800482c:	029b      	lsls	r3, r3, #10
 800482e:	b29b      	uxth	r3, r3
 8004830:	4313      	orrs	r3, r2
 8004832:	b29a      	uxth	r2, r3
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004836:	801a      	strh	r2, [r3, #0]
 8004838:	e024      	b.n	8004884 <USB_EPStartXfer+0x318>
 800483a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800483e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	785b      	ldrb	r3, [r3, #1]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d11c      	bne.n	8004884 <USB_EPStartXfer+0x318>
 800484a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800484e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004858:	b29b      	uxth	r3, r3
 800485a:	461a      	mov	r2, r3
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	4413      	add	r3, r2
 8004860:	633b      	str	r3, [r7, #48]	@ 0x30
 8004862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	011a      	lsls	r2, r3, #4
 8004870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004872:	4413      	add	r3, r2
 8004874:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800487a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800487e:	b29a      	uxth	r2, r3
 8004880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004882:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	895b      	ldrh	r3, [r3, #10]
 8004890:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6959      	ldr	r1, [r3, #20]
 80048a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80048aa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80048ae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80048b2:	6800      	ldr	r0, [r0, #0]
 80048b4:	f001 fb49 	bl	8005f4a <USB_WritePMA>
            ep->xfer_buff += len;
 80048b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695a      	ldr	r2, [r3, #20]
 80048c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c8:	441a      	add	r2, r3
 80048ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80048d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6a1a      	ldr	r2, [r3, #32]
 80048e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d90f      	bls.n	8004912 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80048f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6a1a      	ldr	r2, [r3, #32]
 80048fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004902:	1ad2      	subs	r2, r2, r3
 8004904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	621a      	str	r2, [r3, #32]
 8004910:	e00e      	b.n	8004930 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004916:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2200      	movs	r2, #0
 800492e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	785b      	ldrb	r3, [r3, #1]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d177      	bne.n	8004a30 <USB_EPStartXfer+0x4c4>
 8004940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004944:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	61bb      	str	r3, [r7, #24]
 800494c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004950:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800495a:	b29b      	uxth	r3, r3
 800495c:	461a      	mov	r2, r3
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	4413      	add	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	011a      	lsls	r2, r3, #4
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	4413      	add	r3, r2
 8004976:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	b29b      	uxth	r3, r3
 8004982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004986:	b29a      	uxth	r2, r3
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	801a      	strh	r2, [r3, #0]
 800498c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004990:	2b3e      	cmp	r3, #62	@ 0x3e
 8004992:	d921      	bls.n	80049d8 <USB_EPStartXfer+0x46c>
 8004994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004998:	095b      	lsrs	r3, r3, #5
 800499a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800499e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049a2:	f003 031f 	and.w	r3, r3, #31
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d104      	bne.n	80049b4 <USB_EPStartXfer+0x448>
 80049aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ae:	3b01      	subs	r3, #1
 80049b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049be:	b29b      	uxth	r3, r3
 80049c0:	029b      	lsls	r3, r3, #10
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	4313      	orrs	r3, r2
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	801a      	strh	r2, [r3, #0]
 80049d6:	e056      	b.n	8004a86 <USB_EPStartXfer+0x51a>
 80049d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <USB_EPStartXfer+0x48a>
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	801a      	strh	r2, [r3, #0]
 80049f4:	e047      	b.n	8004a86 <USB_EPStartXfer+0x51a>
 80049f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <USB_EPStartXfer+0x4aa>
 8004a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a10:	3301      	adds	r3, #1
 8004a12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	029b      	lsls	r3, r3, #10
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	4313      	orrs	r3, r2
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	801a      	strh	r2, [r3, #0]
 8004a2e:	e02a      	b.n	8004a86 <USB_EPStartXfer+0x51a>
 8004a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	785b      	ldrb	r3, [r3, #1]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d122      	bne.n	8004a86 <USB_EPStartXfer+0x51a>
 8004a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	623b      	str	r3, [r7, #32]
 8004a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	4413      	add	r3, r2
 8004a62:	623b      	str	r3, [r7, #32]
 8004a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	011a      	lsls	r2, r3, #4
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	4413      	add	r3, r2
 8004a76:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a7a:	61fb      	str	r3, [r7, #28]
 8004a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	891b      	ldrh	r3, [r3, #8]
 8004a92:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6959      	ldr	r1, [r3, #20]
 8004aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004aac:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004ab0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004ab4:	6800      	ldr	r0, [r0, #0]
 8004ab6:	f001 fa48 	bl	8005f4a <USB_WritePMA>
 8004aba:	e3ee      	b.n	800529a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	785b      	ldrb	r3, [r3, #1]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d177      	bne.n	8004bbc <USB_EPStartXfer+0x650>
 8004acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ad0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004adc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	461a      	mov	r2, r3
 8004aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004aec:	4413      	add	r3, r2
 8004aee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	011a      	lsls	r2, r3, #4
 8004afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b00:	4413      	add	r3, r2
 8004b02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b06:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b16:	801a      	strh	r2, [r3, #0]
 8004b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b1e:	d921      	bls.n	8004b64 <USB_EPStartXfer+0x5f8>
 8004b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b2e:	f003 031f 	and.w	r3, r3, #31
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d104      	bne.n	8004b40 <USB_EPStartXfer+0x5d4>
 8004b36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	029b      	lsls	r3, r3, #10
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	4313      	orrs	r3, r2
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b60:	801a      	strh	r2, [r3, #0]
 8004b62:	e056      	b.n	8004c12 <USB_EPStartXfer+0x6a6>
 8004b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <USB_EPStartXfer+0x616>
 8004b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b7e:	801a      	strh	r2, [r3, #0]
 8004b80:	e047      	b.n	8004c12 <USB_EPStartXfer+0x6a6>
 8004b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b86:	085b      	lsrs	r3, r3, #1
 8004b88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d004      	beq.n	8004ba2 <USB_EPStartXfer+0x636>
 8004b98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	029b      	lsls	r3, r3, #10
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bb8:	801a      	strh	r2, [r3, #0]
 8004bba:	e02a      	b.n	8004c12 <USB_EPStartXfer+0x6a6>
 8004bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	785b      	ldrb	r3, [r3, #1]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d122      	bne.n	8004c12 <USB_EPStartXfer+0x6a6>
 8004bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	461a      	mov	r2, r3
 8004bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bec:	4413      	add	r3, r2
 8004bee:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	011a      	lsls	r2, r3, #4
 8004bfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c00:	4413      	add	r3, r2
 8004c02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	891b      	ldrh	r3, [r3, #8]
 8004c1e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6959      	ldr	r1, [r3, #20]
 8004c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004c38:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004c3c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004c40:	6800      	ldr	r0, [r0, #0]
 8004c42:	f001 f982 	bl	8005f4a <USB_WritePMA>
            ep->xfer_buff += len;
 8004c46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695a      	ldr	r2, [r3, #20]
 8004c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c56:	441a      	add	r2, r3
 8004c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6a1a      	ldr	r2, [r3, #32]
 8004c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d90f      	bls.n	8004ca0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6a1a      	ldr	r2, [r3, #32]
 8004c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c90:	1ad2      	subs	r2, r2, r3
 8004c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	621a      	str	r2, [r3, #32]
 8004c9e:	e00e      	b.n	8004cbe <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	785b      	ldrb	r3, [r3, #1]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d177      	bne.n	8004dca <USB_EPStartXfer+0x85e>
 8004cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfa:	4413      	add	r3, r2
 8004cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	011a      	lsls	r2, r3, #4
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0e:	4413      	add	r3, r2
 8004d10:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d24:	801a      	strh	r2, [r3, #0]
 8004d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d2a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d2c:	d921      	bls.n	8004d72 <USB_EPStartXfer+0x806>
 8004d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d3c:	f003 031f 	and.w	r3, r3, #31
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <USB_EPStartXfer+0x7e2>
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	029b      	lsls	r3, r3, #10
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d6e:	801a      	strh	r2, [r3, #0]
 8004d70:	e050      	b.n	8004e14 <USB_EPStartXfer+0x8a8>
 8004d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10a      	bne.n	8004d90 <USB_EPStartXfer+0x824>
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8c:	801a      	strh	r2, [r3, #0]
 8004d8e:	e041      	b.n	8004e14 <USB_EPStartXfer+0x8a8>
 8004d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d94:	085b      	lsrs	r3, r3, #1
 8004d96:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d004      	beq.n	8004db0 <USB_EPStartXfer+0x844>
 8004da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004daa:	3301      	adds	r3, #1
 8004dac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	029b      	lsls	r3, r3, #10
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc6:	801a      	strh	r2, [r3, #0]
 8004dc8:	e024      	b.n	8004e14 <USB_EPStartXfer+0x8a8>
 8004dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	785b      	ldrb	r3, [r3, #1]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d11c      	bne.n	8004e14 <USB_EPStartXfer+0x8a8>
 8004dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	461a      	mov	r2, r3
 8004dec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dee:	4413      	add	r3, r2
 8004df0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	011a      	lsls	r2, r3, #4
 8004e00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e02:	4413      	add	r3, r2
 8004e04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e12:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	895b      	ldrh	r3, [r3, #10]
 8004e20:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6959      	ldr	r1, [r3, #20]
 8004e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004e3a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004e3e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004e42:	6800      	ldr	r0, [r0, #0]
 8004e44:	f001 f881 	bl	8005f4a <USB_WritePMA>
 8004e48:	e227      	b.n	800529a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e80:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	441a      	add	r2, r3
 8004e9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004ea2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ea6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004eaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ec6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ed6:	4413      	add	r3, r2
 8004ed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	011a      	lsls	r2, r3, #4
 8004ee8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004eea:	4413      	add	r3, r2
 8004eec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ef0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004efa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	891b      	ldrh	r3, [r3, #8]
 8004f08:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6959      	ldr	r1, [r3, #20]
 8004f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004f22:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004f26:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004f2a:	6800      	ldr	r0, [r0, #0]
 8004f2c:	f001 f80d 	bl	8005f4a <USB_WritePMA>
 8004f30:	e1b3      	b.n	800529a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6a1a      	ldr	r2, [r3, #32]
 8004f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f42:	1ad2      	subs	r2, r2, r3
 8004f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 80c6 	beq.w	8005104 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	785b      	ldrb	r3, [r3, #1]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d177      	bne.n	8005084 <USB_EPStartXfer+0xb18>
 8004f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fb4:	4413      	add	r3, r2
 8004fb6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	011a      	lsls	r2, r3, #4
 8004fc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fc8:	4413      	add	r3, r2
 8004fca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004fce:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fde:	801a      	strh	r2, [r3, #0]
 8004fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fe6:	d921      	bls.n	800502c <USB_EPStartXfer+0xac0>
 8004fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d104      	bne.n	8005008 <USB_EPStartXfer+0xa9c>
 8004ffe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005002:	3b01      	subs	r3, #1
 8005004:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005008:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	b29a      	uxth	r2, r3
 800500e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005012:	b29b      	uxth	r3, r3
 8005014:	029b      	lsls	r3, r3, #10
 8005016:	b29b      	uxth	r3, r3
 8005018:	4313      	orrs	r3, r2
 800501a:	b29b      	uxth	r3, r3
 800501c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005024:	b29a      	uxth	r2, r3
 8005026:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005028:	801a      	strh	r2, [r3, #0]
 800502a:	e050      	b.n	80050ce <USB_EPStartXfer+0xb62>
 800502c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <USB_EPStartXfer+0xade>
 8005034:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800503e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005042:	b29a      	uxth	r2, r3
 8005044:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005046:	801a      	strh	r2, [r3, #0]
 8005048:	e041      	b.n	80050ce <USB_EPStartXfer+0xb62>
 800504a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d004      	beq.n	800506a <USB_EPStartXfer+0xafe>
 8005060:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005064:	3301      	adds	r3, #1
 8005066:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800506a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	b29a      	uxth	r2, r3
 8005070:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005074:	b29b      	uxth	r3, r3
 8005076:	029b      	lsls	r3, r3, #10
 8005078:	b29b      	uxth	r3, r3
 800507a:	4313      	orrs	r3, r2
 800507c:	b29a      	uxth	r2, r3
 800507e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005080:	801a      	strh	r2, [r3, #0]
 8005082:	e024      	b.n	80050ce <USB_EPStartXfer+0xb62>
 8005084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	785b      	ldrb	r3, [r3, #1]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d11c      	bne.n	80050ce <USB_EPStartXfer+0xb62>
 8005094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005098:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	461a      	mov	r2, r3
 80050a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050a8:	4413      	add	r3, r2
 80050aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80050ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	011a      	lsls	r2, r3, #4
 80050ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050bc:	4413      	add	r3, r2
 80050be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80050ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	895b      	ldrh	r3, [r3, #10]
 80050da:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6959      	ldr	r1, [r3, #20]
 80050ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80050f4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80050f8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80050fc:	6800      	ldr	r0, [r0, #0]
 80050fe:	f000 ff24 	bl	8005f4a <USB_WritePMA>
 8005102:	e0ca      	b.n	800529a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	785b      	ldrb	r3, [r3, #1]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d177      	bne.n	8005204 <USB_EPStartXfer+0xc98>
 8005114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005118:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005124:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800512e:	b29b      	uxth	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005134:	4413      	add	r3, r2
 8005136:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800513c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	011a      	lsls	r2, r3, #4
 8005146:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005148:	4413      	add	r3, r2
 800514a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800514e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005150:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	b29b      	uxth	r3, r3
 8005156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800515a:	b29a      	uxth	r2, r3
 800515c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800515e:	801a      	strh	r2, [r3, #0]
 8005160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005164:	2b3e      	cmp	r3, #62	@ 0x3e
 8005166:	d921      	bls.n	80051ac <USB_EPStartXfer+0xc40>
 8005168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005176:	f003 031f 	and.w	r3, r3, #31
 800517a:	2b00      	cmp	r3, #0
 800517c:	d104      	bne.n	8005188 <USB_EPStartXfer+0xc1c>
 800517e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005182:	3b01      	subs	r3, #1
 8005184:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005188:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	b29a      	uxth	r2, r3
 800518e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005192:	b29b      	uxth	r3, r3
 8005194:	029b      	lsls	r3, r3, #10
 8005196:	b29b      	uxth	r3, r3
 8005198:	4313      	orrs	r3, r2
 800519a:	b29b      	uxth	r3, r3
 800519c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051a8:	801a      	strh	r2, [r3, #0]
 80051aa:	e05c      	b.n	8005266 <USB_EPStartXfer+0xcfa>
 80051ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10a      	bne.n	80051ca <USB_EPStartXfer+0xc5e>
 80051b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051c6:	801a      	strh	r2, [r3, #0]
 80051c8:	e04d      	b.n	8005266 <USB_EPStartXfer+0xcfa>
 80051ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ce:	085b      	lsrs	r3, r3, #1
 80051d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80051d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d004      	beq.n	80051ea <USB_EPStartXfer+0xc7e>
 80051e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80051e4:	3301      	adds	r3, #1
 80051e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80051ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	029b      	lsls	r3, r3, #10
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	4313      	orrs	r3, r2
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005200:	801a      	strh	r2, [r3, #0]
 8005202:	e030      	b.n	8005266 <USB_EPStartXfer+0xcfa>
 8005204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	785b      	ldrb	r3, [r3, #1]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d128      	bne.n	8005266 <USB_EPStartXfer+0xcfa>
 8005214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005218:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005226:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005230:	b29b      	uxth	r3, r3
 8005232:	461a      	mov	r2, r3
 8005234:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005238:	4413      	add	r3, r2
 800523a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800523e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	011a      	lsls	r2, r3, #4
 800524c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005250:	4413      	add	r3, r2
 8005252:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005256:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800525a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800525e:	b29a      	uxth	r2, r3
 8005260:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005264:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800526a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	891b      	ldrh	r3, [r3, #8]
 8005272:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800527a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6959      	ldr	r1, [r3, #20]
 8005282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005286:	b29b      	uxth	r3, r3
 8005288:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800528c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005290:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005294:	6800      	ldr	r0, [r0, #0]
 8005296:	f000 fe58 	bl	8005f4a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800529a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800529e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052c0:	817b      	strh	r3, [r7, #10]
 80052c2:	897b      	ldrh	r3, [r7, #10]
 80052c4:	f083 0310 	eor.w	r3, r3, #16
 80052c8:	817b      	strh	r3, [r7, #10]
 80052ca:	897b      	ldrh	r3, [r7, #10]
 80052cc:	f083 0320 	eor.w	r3, r3, #32
 80052d0:	817b      	strh	r3, [r7, #10]
 80052d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	441a      	add	r2, r3
 80052ec:	897b      	ldrh	r3, [r7, #10]
 80052ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052fe:	b29b      	uxth	r3, r3
 8005300:	8013      	strh	r3, [r2, #0]
 8005302:	f000 bcde 	b.w	8005cc2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800530a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	7b1b      	ldrb	r3, [r3, #12]
 8005312:	2b00      	cmp	r3, #0
 8005314:	f040 80bb 	bne.w	800548e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800531c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699a      	ldr	r2, [r3, #24]
 8005324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	429a      	cmp	r2, r3
 8005332:	d917      	bls.n	8005364 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	699a      	ldr	r2, [r3, #24]
 8005350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005354:	1ad2      	subs	r2, r2, r3
 8005356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800535a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	619a      	str	r2, [r3, #24]
 8005362:	e00e      	b.n	8005382 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2200      	movs	r2, #0
 8005380:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005386:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005394:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800539e:	b29b      	uxth	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053a6:	4413      	add	r3, r2
 80053a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	011a      	lsls	r2, r3, #4
 80053ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053be:	4413      	add	r3, r2
 80053c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80053c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80053c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053da:	801a      	strh	r2, [r3, #0]
 80053dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80053e2:	d924      	bls.n	800542e <USB_EPStartXfer+0xec2>
 80053e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f2:	f003 031f 	and.w	r3, r3, #31
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d104      	bne.n	8005404 <USB_EPStartXfer+0xe98>
 80053fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80053fe:	3b01      	subs	r3, #1
 8005400:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005404:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	b29a      	uxth	r2, r3
 800540c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005410:	b29b      	uxth	r3, r3
 8005412:	029b      	lsls	r3, r3, #10
 8005414:	b29b      	uxth	r3, r3
 8005416:	4313      	orrs	r3, r2
 8005418:	b29b      	uxth	r3, r3
 800541a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800541e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005422:	b29a      	uxth	r2, r3
 8005424:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005428:	801a      	strh	r2, [r3, #0]
 800542a:	f000 bc10 	b.w	8005c4e <USB_EPStartXfer+0x16e2>
 800542e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10c      	bne.n	8005450 <USB_EPStartXfer+0xee4>
 8005436:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b29b      	uxth	r3, r3
 800543e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005446:	b29a      	uxth	r2, r3
 8005448:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800544c:	801a      	strh	r2, [r3, #0]
 800544e:	e3fe      	b.n	8005c4e <USB_EPStartXfer+0x16e2>
 8005450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800545a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d004      	beq.n	8005470 <USB_EPStartXfer+0xf04>
 8005466:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800546a:	3301      	adds	r3, #1
 800546c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005470:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	b29a      	uxth	r2, r3
 8005478:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800547c:	b29b      	uxth	r3, r3
 800547e:	029b      	lsls	r3, r3, #10
 8005480:	b29b      	uxth	r3, r3
 8005482:	4313      	orrs	r3, r2
 8005484:	b29a      	uxth	r2, r3
 8005486:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800548a:	801a      	strh	r2, [r3, #0]
 800548c:	e3df      	b.n	8005c4e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800548e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	78db      	ldrb	r3, [r3, #3]
 800549a:	2b02      	cmp	r3, #2
 800549c:	f040 8218 	bne.w	80058d0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80054a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	785b      	ldrb	r3, [r3, #1]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f040 809d 	bne.w	80055ec <USB_EPStartXfer+0x1080>
 80054b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054d6:	4413      	add	r3, r2
 80054d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	011a      	lsls	r2, r3, #4
 80054ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054ee:	4413      	add	r3, r2
 80054f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005504:	b29a      	uxth	r2, r3
 8005506:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800550a:	801a      	strh	r2, [r3, #0]
 800550c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	2b3e      	cmp	r3, #62	@ 0x3e
 800551a:	d92b      	bls.n	8005574 <USB_EPStartXfer+0x1008>
 800551c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	095b      	lsrs	r3, r3, #5
 800552a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800552e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f003 031f 	and.w	r3, r3, #31
 800553e:	2b00      	cmp	r3, #0
 8005540:	d104      	bne.n	800554c <USB_EPStartXfer+0xfe0>
 8005542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005546:	3b01      	subs	r3, #1
 8005548:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800554c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29a      	uxth	r2, r3
 8005554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005558:	b29b      	uxth	r3, r3
 800555a:	029b      	lsls	r3, r3, #10
 800555c:	b29b      	uxth	r3, r3
 800555e:	4313      	orrs	r3, r2
 8005560:	b29b      	uxth	r3, r3
 8005562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800556a:	b29a      	uxth	r2, r3
 800556c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005570:	801a      	strh	r2, [r3, #0]
 8005572:	e070      	b.n	8005656 <USB_EPStartXfer+0x10ea>
 8005574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10c      	bne.n	800559e <USB_EPStartXfer+0x1032>
 8005584:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005594:	b29a      	uxth	r2, r3
 8005596:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800559a:	801a      	strh	r2, [r3, #0]
 800559c:	e05b      	b.n	8005656 <USB_EPStartXfer+0x10ea>
 800559e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	085b      	lsrs	r3, r3, #1
 80055ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d004      	beq.n	80055ce <USB_EPStartXfer+0x1062>
 80055c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c8:	3301      	adds	r3, #1
 80055ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055da:	b29b      	uxth	r3, r3
 80055dc:	029b      	lsls	r3, r3, #10
 80055de:	b29b      	uxth	r3, r3
 80055e0:	4313      	orrs	r3, r2
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80055e8:	801a      	strh	r2, [r3, #0]
 80055ea:	e034      	b.n	8005656 <USB_EPStartXfer+0x10ea>
 80055ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d12c      	bne.n	8005656 <USB_EPStartXfer+0x10ea>
 80055fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005600:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800560a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800560e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005618:	b29b      	uxth	r3, r3
 800561a:	461a      	mov	r2, r3
 800561c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005620:	4413      	add	r3, r2
 8005622:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800562a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	011a      	lsls	r2, r3, #4
 8005634:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005638:	4413      	add	r3, r2
 800563a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800563e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	b29a      	uxth	r2, r3
 8005650:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005654:	801a      	strh	r2, [r3, #0]
 8005656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800565a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	785b      	ldrb	r3, [r3, #1]
 8005670:	2b00      	cmp	r3, #0
 8005672:	f040 809d 	bne.w	80057b0 <USB_EPStartXfer+0x1244>
 8005676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800567a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005688:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005692:	b29b      	uxth	r3, r3
 8005694:	461a      	mov	r2, r3
 8005696:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800569a:	4413      	add	r3, r2
 800569c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	011a      	lsls	r2, r3, #4
 80056ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056b2:	4413      	add	r3, r2
 80056b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80056b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056ce:	801a      	strh	r2, [r3, #0]
 80056d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80056de:	d92b      	bls.n	8005738 <USB_EPStartXfer+0x11cc>
 80056e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	095b      	lsrs	r3, r3, #5
 80056ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80056f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 031f 	and.w	r3, r3, #31
 8005702:	2b00      	cmp	r3, #0
 8005704:	d104      	bne.n	8005710 <USB_EPStartXfer+0x11a4>
 8005706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800570a:	3b01      	subs	r3, #1
 800570c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005710:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	b29a      	uxth	r2, r3
 8005718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800571c:	b29b      	uxth	r3, r3
 800571e:	029b      	lsls	r3, r3, #10
 8005720:	b29b      	uxth	r3, r3
 8005722:	4313      	orrs	r3, r2
 8005724:	b29b      	uxth	r3, r3
 8005726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800572a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800572e:	b29a      	uxth	r2, r3
 8005730:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005734:	801a      	strh	r2, [r3, #0]
 8005736:	e069      	b.n	800580c <USB_EPStartXfer+0x12a0>
 8005738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800573c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10c      	bne.n	8005762 <USB_EPStartXfer+0x11f6>
 8005748:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	b29b      	uxth	r3, r3
 8005750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005758:	b29a      	uxth	r2, r3
 800575a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800575e:	801a      	strh	r2, [r3, #0]
 8005760:	e054      	b.n	800580c <USB_EPStartXfer+0x12a0>
 8005762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005766:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	085b      	lsrs	r3, r3, #1
 8005770:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d004      	beq.n	8005792 <USB_EPStartXfer+0x1226>
 8005788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800578c:	3301      	adds	r3, #1
 800578e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005792:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	b29a      	uxth	r2, r3
 800579a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800579e:	b29b      	uxth	r3, r3
 80057a0:	029b      	lsls	r3, r3, #10
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	4313      	orrs	r3, r2
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	e02d      	b.n	800580c <USB_EPStartXfer+0x12a0>
 80057b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	785b      	ldrb	r3, [r3, #1]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d125      	bne.n	800580c <USB_EPStartXfer+0x12a0>
 80057c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	461a      	mov	r2, r3
 80057d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80057d6:	4413      	add	r3, r2
 80057d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80057dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	011a      	lsls	r2, r3, #4
 80057ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80057ee:	4413      	add	r3, r2
 80057f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80057f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	b29a      	uxth	r2, r3
 8005806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800580a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800580c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 8218 	beq.w	8005c4e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800581e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005822:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800582c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800583e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d005      	beq.n	8005856 <USB_EPStartXfer+0x12ea>
 800584a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800584e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10d      	bne.n	8005872 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005856:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800585a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800585e:	2b00      	cmp	r3, #0
 8005860:	f040 81f5 	bne.w	8005c4e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005864:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800586c:	2b00      	cmp	r3, #0
 800586e:	f040 81ee 	bne.w	8005c4e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005876:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29b      	uxth	r3, r3
 8005890:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005894:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005898:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800589c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	441a      	add	r2, r3
 80058b6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80058ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	8013      	strh	r3, [r2, #0]
 80058ce:	e1be      	b.n	8005c4e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80058d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	78db      	ldrb	r3, [r3, #3]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	f040 81b4 	bne.w	8005c4a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80058e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d917      	bls.n	800592e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80058fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800590e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591e:	1ad2      	subs	r2, r2, r3
 8005920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	619a      	str	r2, [r3, #24]
 800592c:	e00e      	b.n	800594c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800592e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800593e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2200      	movs	r2, #0
 800594a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800594c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	785b      	ldrb	r3, [r3, #1]
 8005958:	2b00      	cmp	r3, #0
 800595a:	f040 8085 	bne.w	8005a68 <USB_EPStartXfer+0x14fc>
 800595e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005962:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800596c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005970:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800597a:	b29b      	uxth	r3, r3
 800597c:	461a      	mov	r2, r3
 800597e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005982:	4413      	add	r3, r2
 8005984:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	011a      	lsls	r2, r3, #4
 8005996:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800599a:	4413      	add	r3, r2
 800599c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80059b6:	801a      	strh	r2, [r3, #0]
 80059b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80059be:	d923      	bls.n	8005a08 <USB_EPStartXfer+0x149c>
 80059c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059c4:	095b      	lsrs	r3, r3, #5
 80059c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80059ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ce:	f003 031f 	and.w	r3, r3, #31
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d104      	bne.n	80059e0 <USB_EPStartXfer+0x1474>
 80059d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059da:	3b01      	subs	r3, #1
 80059dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80059e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	029b      	lsls	r3, r3, #10
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	4313      	orrs	r3, r2
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a04:	801a      	strh	r2, [r3, #0]
 8005a06:	e060      	b.n	8005aca <USB_EPStartXfer+0x155e>
 8005a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10c      	bne.n	8005a2a <USB_EPStartXfer+0x14be>
 8005a10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a26:	801a      	strh	r2, [r3, #0]
 8005a28:	e04f      	b.n	8005aca <USB_EPStartXfer+0x155e>
 8005a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2e:	085b      	lsrs	r3, r3, #1
 8005a30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d004      	beq.n	8005a4a <USB_EPStartXfer+0x14de>
 8005a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a44:	3301      	adds	r3, #1
 8005a46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005a4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	029b      	lsls	r3, r3, #10
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a64:	801a      	strh	r2, [r3, #0]
 8005a66:	e030      	b.n	8005aca <USB_EPStartXfer+0x155e>
 8005a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	785b      	ldrb	r3, [r3, #1]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d128      	bne.n	8005aca <USB_EPStartXfer+0x155e>
 8005a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	461a      	mov	r2, r3
 8005a98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	011a      	lsls	r2, r3, #4
 8005ab0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005aba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005ac8:	801a      	strh	r2, [r3, #0]
 8005aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ace:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	785b      	ldrb	r3, [r3, #1]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f040 8085 	bne.w	8005bf4 <USB_EPStartXfer+0x1688>
 8005aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005afc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005b0e:	4413      	add	r3, r2
 8005b10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	011a      	lsls	r2, r3, #4
 8005b22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005b26:	4413      	add	r3, r2
 8005b28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b42:	801a      	strh	r2, [r3, #0]
 8005b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b48:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b4a:	d923      	bls.n	8005b94 <USB_EPStartXfer+0x1628>
 8005b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b50:	095b      	lsrs	r3, r3, #5
 8005b52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b5a:	f003 031f 	and.w	r3, r3, #31
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d104      	bne.n	8005b6c <USB_EPStartXfer+0x1600>
 8005b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b66:	3b01      	subs	r3, #1
 8005b68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	029b      	lsls	r3, r3, #10
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b90:	801a      	strh	r2, [r3, #0]
 8005b92:	e05c      	b.n	8005c4e <USB_EPStartXfer+0x16e2>
 8005b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10c      	bne.n	8005bb6 <USB_EPStartXfer+0x164a>
 8005b9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005bb2:	801a      	strh	r2, [r3, #0]
 8005bb4:	e04b      	b.n	8005c4e <USB_EPStartXfer+0x16e2>
 8005bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bba:	085b      	lsrs	r3, r3, #1
 8005bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d004      	beq.n	8005bd6 <USB_EPStartXfer+0x166a>
 8005bcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005bd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	029b      	lsls	r3, r3, #10
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	4313      	orrs	r3, r2
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005bf0:	801a      	strh	r2, [r3, #0]
 8005bf2:	e02c      	b.n	8005c4e <USB_EPStartXfer+0x16e2>
 8005bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	785b      	ldrb	r3, [r3, #1]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d124      	bne.n	8005c4e <USB_EPStartXfer+0x16e2>
 8005c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	461a      	mov	r2, r3
 8005c16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	011a      	lsls	r2, r3, #4
 8005c2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c32:	4413      	add	r3, r2
 8005c34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005c46:	801a      	strh	r2, [r3, #0]
 8005c48:	e001      	b.n	8005c4e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e03a      	b.n	8005cc4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c74:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005c78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005c7c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005c80:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005c84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005c88:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c8c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	441a      	add	r2, r3
 8005caa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005cae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b085      	sub	sp, #20
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	785b      	ldrb	r3, [r3, #1]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d020      	beq.n	8005d22 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cf6:	81bb      	strh	r3, [r7, #12]
 8005cf8:	89bb      	ldrh	r3, [r7, #12]
 8005cfa:	f083 0310 	eor.w	r3, r3, #16
 8005cfe:	81bb      	strh	r3, [r7, #12]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	441a      	add	r2, r3
 8005d0a:	89bb      	ldrh	r3, [r7, #12]
 8005d0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	8013      	strh	r3, [r2, #0]
 8005d20:	e01f      	b.n	8005d62 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d38:	81fb      	strh	r3, [r7, #14]
 8005d3a:	89fb      	ldrh	r3, [r7, #14]
 8005d3c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005d40:	81fb      	strh	r3, [r7, #14]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	441a      	add	r2, r3
 8005d4c:	89fb      	ldrh	r3, [r7, #14]
 8005d4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bc80      	pop	{r7}
 8005d6c:	4770      	bx	lr

08005d6e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b087      	sub	sp, #28
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	7b1b      	ldrb	r3, [r3, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f040 809d 	bne.w	8005ebc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	785b      	ldrb	r3, [r3, #1]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d04c      	beq.n	8005e24 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	823b      	strh	r3, [r7, #16]
 8005d98:	8a3b      	ldrh	r3, [r7, #16]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d01b      	beq.n	8005dda <USB_EPClearStall+0x6c>
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005db4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db8:	81fb      	strh	r3, [r7, #14]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	441a      	add	r2, r3
 8005dc4:	89fb      	ldrh	r3, [r7, #14]
 8005dc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dd2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	78db      	ldrb	r3, [r3, #3]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d06c      	beq.n	8005ebc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005df4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005df8:	81bb      	strh	r3, [r7, #12]
 8005dfa:	89bb      	ldrh	r3, [r7, #12]
 8005dfc:	f083 0320 	eor.w	r3, r3, #32
 8005e00:	81bb      	strh	r3, [r7, #12]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	441a      	add	r2, r3
 8005e0c:	89bb      	ldrh	r3, [r7, #12]
 8005e0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	8013      	strh	r3, [r2, #0]
 8005e22:	e04b      	b.n	8005ebc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	82fb      	strh	r3, [r7, #22]
 8005e32:	8afb      	ldrh	r3, [r7, #22]
 8005e34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d01b      	beq.n	8005e74 <USB_EPClearStall+0x106>
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e52:	82bb      	strh	r3, [r7, #20]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	441a      	add	r2, r3
 8005e5e:	8abb      	ldrh	r3, [r7, #20]
 8005e60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e8a:	827b      	strh	r3, [r7, #18]
 8005e8c:	8a7b      	ldrh	r3, [r7, #18]
 8005e8e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005e92:	827b      	strh	r3, [r7, #18]
 8005e94:	8a7b      	ldrh	r3, [r7, #18]
 8005e96:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e9a:	827b      	strh	r3, [r7, #18]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	441a      	add	r2, r3
 8005ea6:	8a7b      	ldrh	r3, [r7, #18]
 8005ea8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bc80      	pop	{r7}
 8005ec6:	4770      	bx	lr

08005ec8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d103      	bne.n	8005ee2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2280      	movs	r2, #128	@ 0x80
 8005ede:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bc80      	pop	{r7}
 8005eec:	4770      	bx	lr

08005eee <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bc80      	pop	{r7}
 8005f00:	4770      	bx	lr

08005f02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bc80      	pop	{r7}
 8005f14:	4770      	bx	lr

08005f16 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b085      	sub	sp, #20
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005f28:	68fb      	ldr	r3, [r7, #12]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bc80      	pop	{r7}
 8005f32:	4770      	bx	lr

08005f34 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bc80      	pop	{r7}
 8005f48:	4770      	bx	lr

08005f4a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b08b      	sub	sp, #44	@ 0x2c
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	4611      	mov	r1, r2
 8005f56:	461a      	mov	r2, r3
 8005f58:	460b      	mov	r3, r1
 8005f5a:	80fb      	strh	r3, [r7, #6]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005f60:	88bb      	ldrh	r3, [r7, #4]
 8005f62:	3301      	adds	r3, #1
 8005f64:	085b      	lsrs	r3, r3, #1
 8005f66:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005f70:	88fb      	ldrh	r3, [r7, #6]
 8005f72:	005a      	lsls	r2, r3, #1
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f7c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f82:	e01e      	b.n	8005fc2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	021b      	lsls	r3, r3, #8
 8005f92:	b21a      	sxth	r2, r3
 8005f94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	b21b      	sxth	r3, r3
 8005f9c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	8a7a      	ldrh	r2, [r7, #18]
 8005fa2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	3302      	adds	r3, #2
 8005fa8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	3302      	adds	r3, #2
 8005fae:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1dd      	bne.n	8005f84 <USB_WritePMA+0x3a>
  }
}
 8005fc8:	bf00      	nop
 8005fca:	bf00      	nop
 8005fcc:	372c      	adds	r7, #44	@ 0x2c
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bc80      	pop	{r7}
 8005fd2:	4770      	bx	lr

08005fd4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b08b      	sub	sp, #44	@ 0x2c
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	4611      	mov	r1, r2
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	80fb      	strh	r3, [r7, #6]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005fea:	88bb      	ldrh	r3, [r7, #4]
 8005fec:	085b      	lsrs	r3, r3, #1
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ffa:	88fb      	ldrh	r3, [r7, #6]
 8005ffc:	005a      	lsls	r2, r3, #1
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006006:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	627b      	str	r3, [r7, #36]	@ 0x24
 800600c:	e01b      	b.n	8006046 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	3302      	adds	r3, #2
 800601a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	b2da      	uxtb	r2, r3
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	3301      	adds	r3, #1
 8006028:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	0a1b      	lsrs	r3, r3, #8
 800602e:	b2da      	uxtb	r2, r3
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	3301      	adds	r3, #1
 8006038:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	3302      	adds	r3, #2
 800603e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006042:	3b01      	subs	r3, #1
 8006044:	627b      	str	r3, [r7, #36]	@ 0x24
 8006046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e0      	bne.n	800600e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800604c:	88bb      	ldrh	r3, [r7, #4]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	b29b      	uxth	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b29b      	uxth	r3, r3
 800605e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	b2da      	uxtb	r2, r3
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	701a      	strb	r2, [r3, #0]
  }
}
 8006068:	bf00      	nop
 800606a:	372c      	adds	r7, #44	@ 0x2c
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr

08006072 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	460b      	mov	r3, r1
 800607c:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800607e:	2304      	movs	r3, #4
 8006080:	2203      	movs	r2, #3
 8006082:	2181      	movs	r1, #129	@ 0x81
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 fc80 	bl	800798a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006090:	2010      	movs	r0, #16
 8006092:	f001 fd8f 	bl	8007bb4 <USBD_static_malloc>
 8006096:	4602      	mov	r2, r0
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80060a8:	2302      	movs	r3, #2
 80060aa:	e005      	b.n	80060b8 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060b2:	2200      	movs	r2, #0
 80060b4:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80060cc:	2181      	movs	r1, #129	@ 0x81
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f001 fc81 	bl	80079d6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d009      	beq.n	80060f8 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 fd6e 	bl	8007bcc <USBD_static_free>
    pdev->pClassData = NULL;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006114:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800611a:	2300      	movs	r3, #0
 800611c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800612e:	2b00      	cmp	r3, #0
 8006130:	d045      	beq.n	80061be <USBD_HID_Setup+0xba>
 8006132:	2b20      	cmp	r3, #32
 8006134:	f040 80d3 	bne.w	80062de <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	785b      	ldrb	r3, [r3, #1]
 800613c:	3b02      	subs	r3, #2
 800613e:	2b09      	cmp	r3, #9
 8006140:	d835      	bhi.n	80061ae <USBD_HID_Setup+0xaa>
 8006142:	a201      	add	r2, pc, #4	@ (adr r2, 8006148 <USBD_HID_Setup+0x44>)
 8006144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006148:	0800619f 	.word	0x0800619f
 800614c:	0800617f 	.word	0x0800617f
 8006150:	080061af 	.word	0x080061af
 8006154:	080061af 	.word	0x080061af
 8006158:	080061af 	.word	0x080061af
 800615c:	080061af 	.word	0x080061af
 8006160:	080061af 	.word	0x080061af
 8006164:	080061af 	.word	0x080061af
 8006168:	0800618d 	.word	0x0800618d
 800616c:	08006171 	.word	0x08006171
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	885b      	ldrh	r3, [r3, #2]
 8006174:	b2db      	uxtb	r3, r3
 8006176:	461a      	mov	r2, r3
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	601a      	str	r2, [r3, #0]
          break;
 800617c:	e01e      	b.n	80061bc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	2201      	movs	r2, #1
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f001 f941 	bl	800740c <USBD_CtlSendData>
          break;
 800618a:	e017      	b.n	80061bc <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	885b      	ldrh	r3, [r3, #2]
 8006190:	0a1b      	lsrs	r3, r3, #8
 8006192:	b29b      	uxth	r3, r3
 8006194:	b2db      	uxtb	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	605a      	str	r2, [r3, #4]
          break;
 800619c:	e00e      	b.n	80061bc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	3304      	adds	r3, #4
 80061a2:	2201      	movs	r2, #1
 80061a4:	4619      	mov	r1, r3
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f001 f930 	bl	800740c <USBD_CtlSendData>
          break;
 80061ac:	e006      	b.n	80061bc <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 f8c1 	bl	8007338 <USBD_CtlError>
          ret = USBD_FAIL;
 80061b6:	2302      	movs	r3, #2
 80061b8:	75fb      	strb	r3, [r7, #23]
          break;
 80061ba:	bf00      	nop
      }
      break;
 80061bc:	e096      	b.n	80062ec <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	785b      	ldrb	r3, [r3, #1]
 80061c2:	2b0b      	cmp	r3, #11
 80061c4:	f200 8083 	bhi.w	80062ce <USBD_HID_Setup+0x1ca>
 80061c8:	a201      	add	r2, pc, #4	@ (adr r2, 80061d0 <USBD_HID_Setup+0xcc>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	08006201 	.word	0x08006201
 80061d4:	080062cf 	.word	0x080062cf
 80061d8:	080062cf 	.word	0x080062cf
 80061dc:	080062cf 	.word	0x080062cf
 80061e0:	080062cf 	.word	0x080062cf
 80061e4:	080062cf 	.word	0x080062cf
 80061e8:	08006229 	.word	0x08006229
 80061ec:	080062cf 	.word	0x080062cf
 80061f0:	080062cf 	.word	0x080062cf
 80061f4:	080062cf 	.word	0x080062cf
 80061f8:	08006281 	.word	0x08006281
 80061fc:	080062a9 	.word	0x080062a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006206:	2b03      	cmp	r3, #3
 8006208:	d107      	bne.n	800621a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800620a:	f107 030e 	add.w	r3, r7, #14
 800620e:	2202      	movs	r2, #2
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f001 f8fa 	bl	800740c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006218:	e060      	b.n	80062dc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800621a:	6839      	ldr	r1, [r7, #0]
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f001 f88b 	bl	8007338 <USBD_CtlError>
            ret = USBD_FAIL;
 8006222:	2302      	movs	r3, #2
 8006224:	75fb      	strb	r3, [r7, #23]
          break;
 8006226:	e059      	b.n	80062dc <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	885b      	ldrh	r3, [r3, #2]
 800622c:	0a1b      	lsrs	r3, r3, #8
 800622e:	b29b      	uxth	r3, r3
 8006230:	2b22      	cmp	r3, #34	@ 0x22
 8006232:	d108      	bne.n	8006246 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	88db      	ldrh	r3, [r3, #6]
 8006238:	2b3f      	cmp	r3, #63	@ 0x3f
 800623a:	bf28      	it	cs
 800623c:	233f      	movcs	r3, #63	@ 0x3f
 800623e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006240:	4b2d      	ldr	r3, [pc, #180]	@ (80062f8 <USBD_HID_Setup+0x1f4>)
 8006242:	61bb      	str	r3, [r7, #24]
 8006244:	e015      	b.n	8006272 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	885b      	ldrh	r3, [r3, #2]
 800624a:	0a1b      	lsrs	r3, r3, #8
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b21      	cmp	r3, #33	@ 0x21
 8006250:	d108      	bne.n	8006264 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006252:	4b2a      	ldr	r3, [pc, #168]	@ (80062fc <USBD_HID_Setup+0x1f8>)
 8006254:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	88db      	ldrh	r3, [r3, #6]
 800625a:	2b09      	cmp	r3, #9
 800625c:	bf28      	it	cs
 800625e:	2309      	movcs	r3, #9
 8006260:	83fb      	strh	r3, [r7, #30]
 8006262:	e006      	b.n	8006272 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006264:	6839      	ldr	r1, [r7, #0]
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f001 f866 	bl	8007338 <USBD_CtlError>
            ret = USBD_FAIL;
 800626c:	2302      	movs	r3, #2
 800626e:	75fb      	strb	r3, [r7, #23]
            break;
 8006270:	e034      	b.n	80062dc <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006272:	8bfb      	ldrh	r3, [r7, #30]
 8006274:	461a      	mov	r2, r3
 8006276:	69b9      	ldr	r1, [r7, #24]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 f8c7 	bl	800740c <USBD_CtlSendData>
          break;
 800627e:	e02d      	b.n	80062dc <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006286:	2b03      	cmp	r3, #3
 8006288:	d107      	bne.n	800629a <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	3308      	adds	r3, #8
 800628e:	2201      	movs	r2, #1
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f001 f8ba 	bl	800740c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006298:	e020      	b.n	80062dc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f001 f84b 	bl	8007338 <USBD_CtlError>
            ret = USBD_FAIL;
 80062a2:	2302      	movs	r3, #2
 80062a4:	75fb      	strb	r3, [r7, #23]
          break;
 80062a6:	e019      	b.n	80062dc <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d106      	bne.n	80062c0 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	885b      	ldrh	r3, [r3, #2]
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	461a      	mov	r2, r3
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062be:	e00d      	b.n	80062dc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80062c0:	6839      	ldr	r1, [r7, #0]
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f001 f838 	bl	8007338 <USBD_CtlError>
            ret = USBD_FAIL;
 80062c8:	2302      	movs	r3, #2
 80062ca:	75fb      	strb	r3, [r7, #23]
          break;
 80062cc:	e006      	b.n	80062dc <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f001 f831 	bl	8007338 <USBD_CtlError>
          ret = USBD_FAIL;
 80062d6:	2302      	movs	r3, #2
 80062d8:	75fb      	strb	r3, [r7, #23]
          break;
 80062da:	bf00      	nop
      }
      break;
 80062dc:	e006      	b.n	80062ec <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80062de:	6839      	ldr	r1, [r7, #0]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f001 f829 	bl	8007338 <USBD_CtlError>
      ret = USBD_FAIL;
 80062e6:	2302      	movs	r3, #2
 80062e8:	75fb      	strb	r3, [r7, #23]
      break;
 80062ea:	bf00      	nop
  }

  return ret;
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3720      	adds	r7, #32
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	200000c8 	.word	0x200000c8
 80062fc:	200000b0 	.word	0x200000b0

08006300 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	4613      	mov	r3, r2
 800630c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006314:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800631c:	2b03      	cmp	r3, #3
 800631e:	d10c      	bne.n	800633a <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	7b1b      	ldrb	r3, [r3, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d108      	bne.n	800633a <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	2201      	movs	r2, #1
 800632c:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	2181      	movs	r1, #129	@ 0x81
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f001 fbf6 	bl	8007b26 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2222      	movs	r2, #34	@ 0x22
 8006350:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006352:	4b03      	ldr	r3, [pc, #12]	@ (8006360 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	20000044 	.word	0x20000044

08006364 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2222      	movs	r2, #34	@ 0x22
 8006370:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006372:	4b03      	ldr	r3, [pc, #12]	@ (8006380 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006374:	4618      	mov	r0, r3
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	bc80      	pop	{r7}
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	20000068 	.word	0x20000068

08006384 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2222      	movs	r2, #34	@ 0x22
 8006390:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006392:	4b03      	ldr	r3, [pc, #12]	@ (80063a0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006394:	4618      	mov	r0, r3
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	bc80      	pop	{r7}
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	2000008c 	.word	0x2000008c

080063a4 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063b6:	2200      	movs	r2, #0
 80063b8:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bc80      	pop	{r7}
 80063c4:	4770      	bx	lr
	...

080063c8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	220a      	movs	r2, #10
 80063d4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80063d6:	4b03      	ldr	r3, [pc, #12]	@ (80063e4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80063d8:	4618      	mov	r0, r3
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	bc80      	pop	{r7}
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	200000bc 	.word	0x200000bc

080063e8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	4613      	mov	r3, r2
 80063f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80063fc:	2302      	movs	r3, #2
 80063fe:	e01a      	b.n	8006436 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	79fa      	ldrb	r2, [r7, #7]
 800642c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f001 fa48 	bl	80078c4 <USBD_LL_Init>

  return USBD_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800643e:	b480      	push	{r7}
 8006440:	b085      	sub	sp, #20
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006448:	2300      	movs	r3, #0
 800644a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d006      	beq.n	8006460 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	73fb      	strb	r3, [r7, #15]
 800645e:	e001      	b.n	8006464 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006460:	2302      	movs	r3, #2
 8006462:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006464:	7bfb      	ldrb	r3, [r7, #15]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	bc80      	pop	{r7}
 800646e:	4770      	bx	lr

08006470 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f001 fa6b 	bl	8007954 <USBD_LL_Start>

  return USBD_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	bc80      	pop	{r7}
 800649a:	4770      	bx	lr

0800649c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80064a8:	2302      	movs	r3, #2
 80064aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00c      	beq.n	80064d0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	78fa      	ldrb	r2, [r7, #3]
 80064c0:	4611      	mov	r1, r2
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	4798      	blx	r3
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b082      	sub	sp, #8
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	460b      	mov	r3, r1
 80064e4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	78fa      	ldrb	r2, [r7, #3]
 80064f0:	4611      	mov	r1, r2
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	4798      	blx	r3

  return USBD_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	4618      	mov	r0, r3
 8006514:	f000 fed7 	bl	80072c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006526:	461a      	mov	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006534:	f003 031f 	and.w	r3, r3, #31
 8006538:	2b02      	cmp	r3, #2
 800653a:	d016      	beq.n	800656a <USBD_LL_SetupStage+0x6a>
 800653c:	2b02      	cmp	r3, #2
 800653e:	d81c      	bhi.n	800657a <USBD_LL_SetupStage+0x7a>
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <USBD_LL_SetupStage+0x4a>
 8006544:	2b01      	cmp	r3, #1
 8006546:	d008      	beq.n	800655a <USBD_LL_SetupStage+0x5a>
 8006548:	e017      	b.n	800657a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006550:	4619      	mov	r1, r3
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f9ca 	bl	80068ec <USBD_StdDevReq>
      break;
 8006558:	e01a      	b.n	8006590 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006560:	4619      	mov	r1, r3
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fa2c 	bl	80069c0 <USBD_StdItfReq>
      break;
 8006568:	e012      	b.n	8006590 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fa6c 	bl	8006a50 <USBD_StdEPReq>
      break;
 8006578:	e00a      	b.n	8006590 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006580:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006584:	b2db      	uxtb	r3, r3
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f001 fa43 	bl	8007a14 <USBD_LL_StallEP>
      break;
 800658e:	bf00      	nop
  }

  return USBD_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b086      	sub	sp, #24
 800659e:	af00      	add	r7, sp, #0
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	460b      	mov	r3, r1
 80065a4:	607a      	str	r2, [r7, #4]
 80065a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80065a8:	7afb      	ldrb	r3, [r7, #11]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d14b      	bne.n	8006646 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80065b4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80065bc:	2b03      	cmp	r3, #3
 80065be:	d134      	bne.n	800662a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	68da      	ldr	r2, [r3, #12]
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d919      	bls.n	8006600 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	1ad2      	subs	r2, r2, r3
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d203      	bcs.n	80065ee <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	e002      	b.n	80065f4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	461a      	mov	r2, r3
 80065f6:	6879      	ldr	r1, [r7, #4]
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 ff35 	bl	8007468 <USBD_CtlContinueRx>
 80065fe:	e038      	b.n	8006672 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00a      	beq.n	8006622 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006612:	2b03      	cmp	r3, #3
 8006614:	d105      	bne.n	8006622 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 ff32 	bl	800748c <USBD_CtlSendStatus>
 8006628:	e023      	b.n	8006672 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006630:	2b05      	cmp	r3, #5
 8006632:	d11e      	bne.n	8006672 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800663c:	2100      	movs	r1, #0
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f001 f9e8 	bl	8007a14 <USBD_LL_StallEP>
 8006644:	e015      	b.n	8006672 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00d      	beq.n	800666e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006658:	2b03      	cmp	r3, #3
 800665a:	d108      	bne.n	800666e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	7afa      	ldrb	r2, [r7, #11]
 8006666:	4611      	mov	r1, r2
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	4798      	blx	r3
 800666c:	e001      	b.n	8006672 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800666e:	2302      	movs	r3, #2
 8006670:	e000      	b.n	8006674 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	460b      	mov	r3, r1
 8006686:	607a      	str	r2, [r7, #4]
 8006688:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800668a:	7afb      	ldrb	r3, [r7, #11]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d17f      	bne.n	8006790 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3314      	adds	r3, #20
 8006694:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800669c:	2b02      	cmp	r3, #2
 800669e:	d15c      	bne.n	800675a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d915      	bls.n	80066d8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	68da      	ldr	r2, [r3, #12]
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	1ad2      	subs	r2, r2, r3
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	b29b      	uxth	r3, r3
 80066c0:	461a      	mov	r2, r3
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 febd 	bl	8007444 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066ca:	2300      	movs	r3, #0
 80066cc:	2200      	movs	r2, #0
 80066ce:	2100      	movs	r1, #0
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f001 fa4b 	bl	8007b6c <USBD_LL_PrepareReceive>
 80066d6:	e04e      	b.n	8006776 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	6912      	ldr	r2, [r2, #16]
 80066e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80066e4:	fb01 f202 	mul.w	r2, r1, r2
 80066e8:	1a9b      	subs	r3, r3, r2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d11c      	bne.n	8006728 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d316      	bcc.n	8006728 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	689a      	ldr	r2, [r3, #8]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006704:	429a      	cmp	r2, r3
 8006706:	d20f      	bcs.n	8006728 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006708:	2200      	movs	r2, #0
 800670a:	2100      	movs	r1, #0
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 fe99 	bl	8007444 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800671a:	2300      	movs	r3, #0
 800671c:	2200      	movs	r2, #0
 800671e:	2100      	movs	r1, #0
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f001 fa23 	bl	8007b6c <USBD_LL_PrepareReceive>
 8006726:	e026      	b.n	8006776 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00a      	beq.n	800674a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800673a:	2b03      	cmp	r3, #3
 800673c:	d105      	bne.n	800674a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800674a:	2180      	movs	r1, #128	@ 0x80
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f001 f961 	bl	8007a14 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 fead 	bl	80074b2 <USBD_CtlReceiveStatus>
 8006758:	e00d      	b.n	8006776 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006760:	2b04      	cmp	r3, #4
 8006762:	d004      	beq.n	800676e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800676a:	2b00      	cmp	r3, #0
 800676c:	d103      	bne.n	8006776 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800676e:	2180      	movs	r1, #128	@ 0x80
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f001 f94f 	bl	8007a14 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800677c:	2b01      	cmp	r3, #1
 800677e:	d11d      	bne.n	80067bc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f7ff fe81 	bl	8006488 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800678e:	e015      	b.n	80067bc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00d      	beq.n	80067b8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d108      	bne.n	80067b8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	7afa      	ldrb	r2, [r7, #11]
 80067b0:	4611      	mov	r1, r2
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	4798      	blx	r3
 80067b6:	e001      	b.n	80067bc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80067b8:	2302      	movs	r3, #2
 80067ba:	e000      	b.n	80067be <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b082      	sub	sp, #8
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067ce:	2340      	movs	r3, #64	@ 0x40
 80067d0:	2200      	movs	r2, #0
 80067d2:	2100      	movs	r1, #0
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f001 f8d8 	bl	800798a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2240      	movs	r2, #64	@ 0x40
 80067e6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067ea:	2340      	movs	r3, #64	@ 0x40
 80067ec:	2200      	movs	r2, #0
 80067ee:	2180      	movs	r1, #128	@ 0x80
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f001 f8ca 	bl	800798a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2240      	movs	r2, #64	@ 0x40
 8006800:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006826:	2b00      	cmp	r3, #0
 8006828:	d009      	beq.n	800683e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6852      	ldr	r2, [r2, #4]
 8006836:	b2d2      	uxtb	r2, r2
 8006838:	4611      	mov	r1, r2
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	4798      	blx	r3
  }

  return USBD_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	78fa      	ldrb	r2, [r7, #3]
 8006858:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	bc80      	pop	{r7}
 8006864:	4770      	bx	lr

08006866 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2204      	movs	r2, #4
 800687e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	bc80      	pop	{r7}
 800688c:	4770      	bx	lr

0800688e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800689c:	2b04      	cmp	r3, #4
 800689e:	d105      	bne.n	80068ac <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bc80      	pop	{r7}
 80068b6:	4770      	bx	lr

080068b8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d10b      	bne.n	80068e2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d005      	beq.n	80068e2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006902:	2b40      	cmp	r3, #64	@ 0x40
 8006904:	d005      	beq.n	8006912 <USBD_StdDevReq+0x26>
 8006906:	2b40      	cmp	r3, #64	@ 0x40
 8006908:	d84f      	bhi.n	80069aa <USBD_StdDevReq+0xbe>
 800690a:	2b00      	cmp	r3, #0
 800690c:	d009      	beq.n	8006922 <USBD_StdDevReq+0x36>
 800690e:	2b20      	cmp	r3, #32
 8006910:	d14b      	bne.n	80069aa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	4798      	blx	r3
      break;
 8006920:	e048      	b.n	80069b4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	785b      	ldrb	r3, [r3, #1]
 8006926:	2b09      	cmp	r3, #9
 8006928:	d839      	bhi.n	800699e <USBD_StdDevReq+0xb2>
 800692a:	a201      	add	r2, pc, #4	@ (adr r2, 8006930 <USBD_StdDevReq+0x44>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	08006981 	.word	0x08006981
 8006934:	08006995 	.word	0x08006995
 8006938:	0800699f 	.word	0x0800699f
 800693c:	0800698b 	.word	0x0800698b
 8006940:	0800699f 	.word	0x0800699f
 8006944:	08006963 	.word	0x08006963
 8006948:	08006959 	.word	0x08006959
 800694c:	0800699f 	.word	0x0800699f
 8006950:	08006977 	.word	0x08006977
 8006954:	0800696d 	.word	0x0800696d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006958:	6839      	ldr	r1, [r7, #0]
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f9dc 	bl	8006d18 <USBD_GetDescriptor>
          break;
 8006960:	e022      	b.n	80069a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fb3f 	bl	8006fe8 <USBD_SetAddress>
          break;
 800696a:	e01d      	b.n	80069a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fb7e 	bl	8007070 <USBD_SetConfig>
          break;
 8006974:	e018      	b.n	80069a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fc07 	bl	800718c <USBD_GetConfig>
          break;
 800697e:	e013      	b.n	80069a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fc37 	bl	80071f6 <USBD_GetStatus>
          break;
 8006988:	e00e      	b.n	80069a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fc65 	bl	800725c <USBD_SetFeature>
          break;
 8006992:	e009      	b.n	80069a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006994:	6839      	ldr	r1, [r7, #0]
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fc74 	bl	8007284 <USBD_ClrFeature>
          break;
 800699c:	e004      	b.n	80069a8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fcc9 	bl	8007338 <USBD_CtlError>
          break;
 80069a6:	bf00      	nop
      }
      break;
 80069a8:	e004      	b.n	80069b4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fcc3 	bl	8007338 <USBD_CtlError>
      break;
 80069b2:	bf00      	nop
  }

  return ret;
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop

080069c0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069d6:	2b40      	cmp	r3, #64	@ 0x40
 80069d8:	d005      	beq.n	80069e6 <USBD_StdItfReq+0x26>
 80069da:	2b40      	cmp	r3, #64	@ 0x40
 80069dc:	d82e      	bhi.n	8006a3c <USBD_StdItfReq+0x7c>
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <USBD_StdItfReq+0x26>
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	d12a      	bne.n	8006a3c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069ec:	3b01      	subs	r3, #1
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d81d      	bhi.n	8006a2e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	889b      	ldrh	r3, [r3, #4]
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d813      	bhi.n	8006a24 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	4798      	blx	r3
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	88db      	ldrh	r3, [r3, #6]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d110      	bne.n	8006a38 <USBD_StdItfReq+0x78>
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10d      	bne.n	8006a38 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fd35 	bl	800748c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a22:	e009      	b.n	8006a38 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fc86 	bl	8007338 <USBD_CtlError>
          break;
 8006a2c:	e004      	b.n	8006a38 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fc81 	bl	8007338 <USBD_CtlError>
          break;
 8006a36:	e000      	b.n	8006a3a <USBD_StdItfReq+0x7a>
          break;
 8006a38:	bf00      	nop
      }
      break;
 8006a3a:	e004      	b.n	8006a46 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fc7a 	bl	8007338 <USBD_CtlError>
      break;
 8006a44:	bf00      	nop
  }

  return USBD_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	889b      	ldrh	r3, [r3, #4]
 8006a62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a6c:	2b40      	cmp	r3, #64	@ 0x40
 8006a6e:	d007      	beq.n	8006a80 <USBD_StdEPReq+0x30>
 8006a70:	2b40      	cmp	r3, #64	@ 0x40
 8006a72:	f200 8146 	bhi.w	8006d02 <USBD_StdEPReq+0x2b2>
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <USBD_StdEPReq+0x40>
 8006a7a:	2b20      	cmp	r3, #32
 8006a7c:	f040 8141 	bne.w	8006d02 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
      break;
 8006a8e:	e13d      	b.n	8006d0c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d10a      	bne.n	8006ab2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	4798      	blx	r3
 8006aaa:	4603      	mov	r3, r0
 8006aac:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	e12d      	b.n	8006d0e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	785b      	ldrb	r3, [r3, #1]
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d007      	beq.n	8006aca <USBD_StdEPReq+0x7a>
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	f300 811b 	bgt.w	8006cf6 <USBD_StdEPReq+0x2a6>
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d072      	beq.n	8006baa <USBD_StdEPReq+0x15a>
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d03a      	beq.n	8006b3e <USBD_StdEPReq+0xee>
 8006ac8:	e115      	b.n	8006cf6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d002      	beq.n	8006ada <USBD_StdEPReq+0x8a>
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d015      	beq.n	8006b04 <USBD_StdEPReq+0xb4>
 8006ad8:	e02b      	b.n	8006b32 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ada:	7bbb      	ldrb	r3, [r7, #14]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00c      	beq.n	8006afa <USBD_StdEPReq+0xaa>
 8006ae0:	7bbb      	ldrb	r3, [r7, #14]
 8006ae2:	2b80      	cmp	r3, #128	@ 0x80
 8006ae4:	d009      	beq.n	8006afa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ae6:	7bbb      	ldrb	r3, [r7, #14]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 ff92 	bl	8007a14 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006af0:	2180      	movs	r1, #128	@ 0x80
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 ff8e 	bl	8007a14 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006af8:	e020      	b.n	8006b3c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fc1b 	bl	8007338 <USBD_CtlError>
              break;
 8006b02:	e01b      	b.n	8006b3c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	885b      	ldrh	r3, [r3, #2]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10e      	bne.n	8006b2a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006b0c:	7bbb      	ldrb	r3, [r7, #14]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00b      	beq.n	8006b2a <USBD_StdEPReq+0xda>
 8006b12:	7bbb      	ldrb	r3, [r7, #14]
 8006b14:	2b80      	cmp	r3, #128	@ 0x80
 8006b16:	d008      	beq.n	8006b2a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	88db      	ldrh	r3, [r3, #6]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d104      	bne.n	8006b2a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006b20:	7bbb      	ldrb	r3, [r7, #14]
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 ff75 	bl	8007a14 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fcae 	bl	800748c <USBD_CtlSendStatus>

              break;
 8006b30:	e004      	b.n	8006b3c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fbff 	bl	8007338 <USBD_CtlError>
              break;
 8006b3a:	bf00      	nop
          }
          break;
 8006b3c:	e0e0      	b.n	8006d00 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d002      	beq.n	8006b4e <USBD_StdEPReq+0xfe>
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	d015      	beq.n	8006b78 <USBD_StdEPReq+0x128>
 8006b4c:	e026      	b.n	8006b9c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b4e:	7bbb      	ldrb	r3, [r7, #14]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00c      	beq.n	8006b6e <USBD_StdEPReq+0x11e>
 8006b54:	7bbb      	ldrb	r3, [r7, #14]
 8006b56:	2b80      	cmp	r3, #128	@ 0x80
 8006b58:	d009      	beq.n	8006b6e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006b5a:	7bbb      	ldrb	r3, [r7, #14]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 ff58 	bl	8007a14 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b64:	2180      	movs	r1, #128	@ 0x80
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 ff54 	bl	8007a14 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b6c:	e01c      	b.n	8006ba8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fbe1 	bl	8007338 <USBD_CtlError>
              break;
 8006b76:	e017      	b.n	8006ba8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	885b      	ldrh	r3, [r3, #2]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d112      	bne.n	8006ba6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b80:	7bbb      	ldrb	r3, [r7, #14]
 8006b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d004      	beq.n	8006b94 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b8a:	7bbb      	ldrb	r3, [r7, #14]
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 ff5f 	bl	8007a52 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fc79 	bl	800748c <USBD_CtlSendStatus>
              }
              break;
 8006b9a:	e004      	b.n	8006ba6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fbca 	bl	8007338 <USBD_CtlError>
              break;
 8006ba4:	e000      	b.n	8006ba8 <USBD_StdEPReq+0x158>
              break;
 8006ba6:	bf00      	nop
          }
          break;
 8006ba8:	e0aa      	b.n	8006d00 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d002      	beq.n	8006bba <USBD_StdEPReq+0x16a>
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d032      	beq.n	8006c1e <USBD_StdEPReq+0x1ce>
 8006bb8:	e097      	b.n	8006cea <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bba:	7bbb      	ldrb	r3, [r7, #14]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d007      	beq.n	8006bd0 <USBD_StdEPReq+0x180>
 8006bc0:	7bbb      	ldrb	r3, [r7, #14]
 8006bc2:	2b80      	cmp	r3, #128	@ 0x80
 8006bc4:	d004      	beq.n	8006bd0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006bc6:	6839      	ldr	r1, [r7, #0]
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fbb5 	bl	8007338 <USBD_CtlError>
                break;
 8006bce:	e091      	b.n	8006cf4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	da0b      	bge.n	8006bf0 <USBD_StdEPReq+0x1a0>
 8006bd8:	7bbb      	ldrb	r3, [r7, #14]
 8006bda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006bde:	4613      	mov	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	3310      	adds	r3, #16
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	4413      	add	r3, r2
 8006bec:	3304      	adds	r3, #4
 8006bee:	e00b      	b.n	8006c08 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	4413      	add	r3, r2
 8006c06:	3304      	adds	r3, #4
 8006c08:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2202      	movs	r2, #2
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fbf8 	bl	800740c <USBD_CtlSendData>
              break;
 8006c1c:	e06a      	b.n	8006cf4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	da11      	bge.n	8006c4a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	f003 020f 	and.w	r2, r3, #15
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	440b      	add	r3, r1
 8006c38:	3318      	adds	r3, #24
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d117      	bne.n	8006c70 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fb78 	bl	8007338 <USBD_CtlError>
                  break;
 8006c48:	e054      	b.n	8006cf4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	f003 020f 	and.w	r2, r3, #15
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	4613      	mov	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d104      	bne.n	8006c70 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fb65 	bl	8007338 <USBD_CtlError>
                  break;
 8006c6e:	e041      	b.n	8006cf4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	da0b      	bge.n	8006c90 <USBD_StdEPReq+0x240>
 8006c78:	7bbb      	ldrb	r3, [r7, #14]
 8006c7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c7e:	4613      	mov	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	3310      	adds	r3, #16
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	e00b      	b.n	8006ca8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c90:	7bbb      	ldrb	r3, [r7, #14]
 8006c92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006caa:	7bbb      	ldrb	r3, [r7, #14]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <USBD_StdEPReq+0x266>
 8006cb0:	7bbb      	ldrb	r3, [r7, #14]
 8006cb2:	2b80      	cmp	r3, #128	@ 0x80
 8006cb4:	d103      	bne.n	8006cbe <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	e00e      	b.n	8006cdc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006cbe:	7bbb      	ldrb	r3, [r7, #14]
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fee4 	bl	8007a90 <USBD_LL_IsStallEP>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	e002      	b.n	8006cdc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fb92 	bl	800740c <USBD_CtlSendData>
              break;
 8006ce8:	e004      	b.n	8006cf4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fb23 	bl	8007338 <USBD_CtlError>
              break;
 8006cf2:	bf00      	nop
          }
          break;
 8006cf4:	e004      	b.n	8006d00 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fb1d 	bl	8007338 <USBD_CtlError>
          break;
 8006cfe:	bf00      	nop
      }
      break;
 8006d00:	e004      	b.n	8006d0c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fb17 	bl	8007338 <USBD_CtlError>
      break;
 8006d0a:	bf00      	nop
  }

  return ret;
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
	...

08006d18 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	885b      	ldrh	r3, [r3, #2]
 8006d32:	0a1b      	lsrs	r3, r3, #8
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	3b01      	subs	r3, #1
 8006d38:	2b06      	cmp	r3, #6
 8006d3a:	f200 8128 	bhi.w	8006f8e <USBD_GetDescriptor+0x276>
 8006d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d44 <USBD_GetDescriptor+0x2c>)
 8006d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d44:	08006d61 	.word	0x08006d61
 8006d48:	08006d79 	.word	0x08006d79
 8006d4c:	08006db9 	.word	0x08006db9
 8006d50:	08006f8f 	.word	0x08006f8f
 8006d54:	08006f8f 	.word	0x08006f8f
 8006d58:	08006f2f 	.word	0x08006f2f
 8006d5c:	08006f5b 	.word	0x08006f5b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	7c12      	ldrb	r2, [r2, #16]
 8006d6c:	f107 0108 	add.w	r1, r7, #8
 8006d70:	4610      	mov	r0, r2
 8006d72:	4798      	blx	r3
 8006d74:	60f8      	str	r0, [r7, #12]
      break;
 8006d76:	e112      	b.n	8006f9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	7c1b      	ldrb	r3, [r3, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10d      	bne.n	8006d9c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d88:	f107 0208 	add.w	r2, r7, #8
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	4798      	blx	r3
 8006d90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3301      	adds	r3, #1
 8006d96:	2202      	movs	r2, #2
 8006d98:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d9a:	e100      	b.n	8006f9e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da4:	f107 0208 	add.w	r2, r7, #8
 8006da8:	4610      	mov	r0, r2
 8006daa:	4798      	blx	r3
 8006dac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	3301      	adds	r3, #1
 8006db2:	2202      	movs	r2, #2
 8006db4:	701a      	strb	r2, [r3, #0]
      break;
 8006db6:	e0f2      	b.n	8006f9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	885b      	ldrh	r3, [r3, #2]
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	f200 80ac 	bhi.w	8006f1c <USBD_GetDescriptor+0x204>
 8006dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8006dcc <USBD_GetDescriptor+0xb4>)
 8006dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dca:	bf00      	nop
 8006dcc:	08006de5 	.word	0x08006de5
 8006dd0:	08006e19 	.word	0x08006e19
 8006dd4:	08006e4d 	.word	0x08006e4d
 8006dd8:	08006e81 	.word	0x08006e81
 8006ddc:	08006eb5 	.word	0x08006eb5
 8006de0:	08006ee9 	.word	0x08006ee9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00b      	beq.n	8006e08 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	7c12      	ldrb	r2, [r2, #16]
 8006dfc:	f107 0108 	add.w	r1, r7, #8
 8006e00:	4610      	mov	r0, r2
 8006e02:	4798      	blx	r3
 8006e04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e06:	e091      	b.n	8006f2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fa94 	bl	8007338 <USBD_CtlError>
            err++;
 8006e10:	7afb      	ldrb	r3, [r7, #11]
 8006e12:	3301      	adds	r3, #1
 8006e14:	72fb      	strb	r3, [r7, #11]
          break;
 8006e16:	e089      	b.n	8006f2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00b      	beq.n	8006e3c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	7c12      	ldrb	r2, [r2, #16]
 8006e30:	f107 0108 	add.w	r1, r7, #8
 8006e34:	4610      	mov	r0, r2
 8006e36:	4798      	blx	r3
 8006e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e3a:	e077      	b.n	8006f2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fa7a 	bl	8007338 <USBD_CtlError>
            err++;
 8006e44:	7afb      	ldrb	r3, [r7, #11]
 8006e46:	3301      	adds	r3, #1
 8006e48:	72fb      	strb	r3, [r7, #11]
          break;
 8006e4a:	e06f      	b.n	8006f2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00b      	beq.n	8006e70 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	7c12      	ldrb	r2, [r2, #16]
 8006e64:	f107 0108 	add.w	r1, r7, #8
 8006e68:	4610      	mov	r0, r2
 8006e6a:	4798      	blx	r3
 8006e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e6e:	e05d      	b.n	8006f2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fa60 	bl	8007338 <USBD_CtlError>
            err++;
 8006e78:	7afb      	ldrb	r3, [r7, #11]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e7e:	e055      	b.n	8006f2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00b      	beq.n	8006ea4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	7c12      	ldrb	r2, [r2, #16]
 8006e98:	f107 0108 	add.w	r1, r7, #8
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4798      	blx	r3
 8006ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ea2:	e043      	b.n	8006f2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fa46 	bl	8007338 <USBD_CtlError>
            err++;
 8006eac:	7afb      	ldrb	r3, [r7, #11]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8006eb2:	e03b      	b.n	8006f2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00b      	beq.n	8006ed8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	7c12      	ldrb	r2, [r2, #16]
 8006ecc:	f107 0108 	add.w	r1, r7, #8
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	4798      	blx	r3
 8006ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ed6:	e029      	b.n	8006f2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fa2c 	bl	8007338 <USBD_CtlError>
            err++;
 8006ee0:	7afb      	ldrb	r3, [r7, #11]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ee6:	e021      	b.n	8006f2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00b      	beq.n	8006f0c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	7c12      	ldrb	r2, [r2, #16]
 8006f00:	f107 0108 	add.w	r1, r7, #8
 8006f04:	4610      	mov	r0, r2
 8006f06:	4798      	blx	r3
 8006f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f0a:	e00f      	b.n	8006f2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fa12 	bl	8007338 <USBD_CtlError>
            err++;
 8006f14:	7afb      	ldrb	r3, [r7, #11]
 8006f16:	3301      	adds	r3, #1
 8006f18:	72fb      	strb	r3, [r7, #11]
          break;
 8006f1a:	e007      	b.n	8006f2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fa0a 	bl	8007338 <USBD_CtlError>
          err++;
 8006f24:	7afb      	ldrb	r3, [r7, #11]
 8006f26:	3301      	adds	r3, #1
 8006f28:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006f2a:	e038      	b.n	8006f9e <USBD_GetDescriptor+0x286>
 8006f2c:	e037      	b.n	8006f9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	7c1b      	ldrb	r3, [r3, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d109      	bne.n	8006f4a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f3e:	f107 0208 	add.w	r2, r7, #8
 8006f42:	4610      	mov	r0, r2
 8006f44:	4798      	blx	r3
 8006f46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f48:	e029      	b.n	8006f9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f9f3 	bl	8007338 <USBD_CtlError>
        err++;
 8006f52:	7afb      	ldrb	r3, [r7, #11]
 8006f54:	3301      	adds	r3, #1
 8006f56:	72fb      	strb	r3, [r7, #11]
      break;
 8006f58:	e021      	b.n	8006f9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	7c1b      	ldrb	r3, [r3, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10d      	bne.n	8006f7e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6a:	f107 0208 	add.w	r2, r7, #8
 8006f6e:	4610      	mov	r0, r2
 8006f70:	4798      	blx	r3
 8006f72:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3301      	adds	r3, #1
 8006f78:	2207      	movs	r2, #7
 8006f7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f7c:	e00f      	b.n	8006f9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f9d9 	bl	8007338 <USBD_CtlError>
        err++;
 8006f86:	7afb      	ldrb	r3, [r7, #11]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f8c:	e007      	b.n	8006f9e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f9d1 	bl	8007338 <USBD_CtlError>
      err++;
 8006f96:	7afb      	ldrb	r3, [r7, #11]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f9c:	bf00      	nop
  }

  if (err != 0U)
 8006f9e:	7afb      	ldrb	r3, [r7, #11]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d11c      	bne.n	8006fde <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006fa4:	893b      	ldrh	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d011      	beq.n	8006fce <USBD_GetDescriptor+0x2b6>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	88db      	ldrh	r3, [r3, #6]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00d      	beq.n	8006fce <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	88da      	ldrh	r2, [r3, #6]
 8006fb6:	893b      	ldrh	r3, [r7, #8]
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	bf28      	it	cs
 8006fbc:	4613      	movcs	r3, r2
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fc2:	893b      	ldrh	r3, [r7, #8]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	68f9      	ldr	r1, [r7, #12]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fa1f 	bl	800740c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	88db      	ldrh	r3, [r3, #6]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d104      	bne.n	8006fe0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fa58 	bl	800748c <USBD_CtlSendStatus>
 8006fdc:	e000      	b.n	8006fe0 <USBD_GetDescriptor+0x2c8>
    return;
 8006fde:	bf00      	nop
    }
  }
}
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop

08006fe8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	889b      	ldrh	r3, [r3, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d130      	bne.n	800705c <USBD_SetAddress+0x74>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	88db      	ldrh	r3, [r3, #6]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d12c      	bne.n	800705c <USBD_SetAddress+0x74>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	885b      	ldrh	r3, [r3, #2]
 8007006:	2b7f      	cmp	r3, #127	@ 0x7f
 8007008:	d828      	bhi.n	800705c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	885b      	ldrh	r3, [r3, #2]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007014:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800701c:	2b03      	cmp	r3, #3
 800701e:	d104      	bne.n	800702a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f988 	bl	8007338 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007028:	e01d      	b.n	8007066 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	7bfa      	ldrb	r2, [r7, #15]
 800702e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007032:	7bfb      	ldrb	r3, [r7, #15]
 8007034:	4619      	mov	r1, r3
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fd56 	bl	8007ae8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fa25 	bl	800748c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007042:	7bfb      	ldrb	r3, [r7, #15]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d004      	beq.n	8007052 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007050:	e009      	b.n	8007066 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800705a:	e004      	b.n	8007066 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f96a 	bl	8007338 <USBD_CtlError>
  }
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
	...

08007070 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	885b      	ldrh	r3, [r3, #2]
 800707e:	b2da      	uxtb	r2, r3
 8007080:	4b41      	ldr	r3, [pc, #260]	@ (8007188 <USBD_SetConfig+0x118>)
 8007082:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007084:	4b40      	ldr	r3, [pc, #256]	@ (8007188 <USBD_SetConfig+0x118>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d904      	bls.n	8007096 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f952 	bl	8007338 <USBD_CtlError>
 8007094:	e075      	b.n	8007182 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800709c:	2b02      	cmp	r3, #2
 800709e:	d002      	beq.n	80070a6 <USBD_SetConfig+0x36>
 80070a0:	2b03      	cmp	r3, #3
 80070a2:	d023      	beq.n	80070ec <USBD_SetConfig+0x7c>
 80070a4:	e062      	b.n	800716c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80070a6:	4b38      	ldr	r3, [pc, #224]	@ (8007188 <USBD_SetConfig+0x118>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d01a      	beq.n	80070e4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80070ae:	4b36      	ldr	r3, [pc, #216]	@ (8007188 <USBD_SetConfig+0x118>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2203      	movs	r2, #3
 80070bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80070c0:	4b31      	ldr	r3, [pc, #196]	@ (8007188 <USBD_SetConfig+0x118>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff f9e8 	bl	800649c <USBD_SetClassConfig>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d104      	bne.n	80070dc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f92f 	bl	8007338 <USBD_CtlError>
            return;
 80070da:	e052      	b.n	8007182 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f9d5 	bl	800748c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80070e2:	e04e      	b.n	8007182 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f9d1 	bl	800748c <USBD_CtlSendStatus>
        break;
 80070ea:	e04a      	b.n	8007182 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80070ec:	4b26      	ldr	r3, [pc, #152]	@ (8007188 <USBD_SetConfig+0x118>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d112      	bne.n	800711a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80070fc:	4b22      	ldr	r3, [pc, #136]	@ (8007188 <USBD_SetConfig+0x118>)
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	461a      	mov	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007106:	4b20      	ldr	r3, [pc, #128]	@ (8007188 <USBD_SetConfig+0x118>)
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f7ff f9e4 	bl	80064da <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f9ba 	bl	800748c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007118:	e033      	b.n	8007182 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800711a:	4b1b      	ldr	r3, [pc, #108]	@ (8007188 <USBD_SetConfig+0x118>)
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	429a      	cmp	r2, r3
 8007126:	d01d      	beq.n	8007164 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	b2db      	uxtb	r3, r3
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7ff f9d2 	bl	80064da <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007136:	4b14      	ldr	r3, [pc, #80]	@ (8007188 <USBD_SetConfig+0x118>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007140:	4b11      	ldr	r3, [pc, #68]	@ (8007188 <USBD_SetConfig+0x118>)
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	4619      	mov	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff f9a8 	bl	800649c <USBD_SetClassConfig>
 800714c:	4603      	mov	r3, r0
 800714e:	2b02      	cmp	r3, #2
 8007150:	d104      	bne.n	800715c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f8ef 	bl	8007338 <USBD_CtlError>
            return;
 800715a:	e012      	b.n	8007182 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f995 	bl	800748c <USBD_CtlSendStatus>
        break;
 8007162:	e00e      	b.n	8007182 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f991 	bl	800748c <USBD_CtlSendStatus>
        break;
 800716a:	e00a      	b.n	8007182 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f8e2 	bl	8007338 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007174:	4b04      	ldr	r3, [pc, #16]	@ (8007188 <USBD_SetConfig+0x118>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	4619      	mov	r1, r3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7ff f9ad 	bl	80064da <USBD_ClrClassConfig>
        break;
 8007180:	bf00      	nop
    }
  }
}
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	20000178 	.word	0x20000178

0800718c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	88db      	ldrh	r3, [r3, #6]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d004      	beq.n	80071a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f8c9 	bl	8007338 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80071a6:	e022      	b.n	80071ee <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	dc02      	bgt.n	80071b8 <USBD_GetConfig+0x2c>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	dc03      	bgt.n	80071be <USBD_GetConfig+0x32>
 80071b6:	e015      	b.n	80071e4 <USBD_GetConfig+0x58>
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d00b      	beq.n	80071d4 <USBD_GetConfig+0x48>
 80071bc:	e012      	b.n	80071e4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3308      	adds	r3, #8
 80071c8:	2201      	movs	r2, #1
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f91d 	bl	800740c <USBD_CtlSendData>
        break;
 80071d2:	e00c      	b.n	80071ee <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3304      	adds	r3, #4
 80071d8:	2201      	movs	r2, #1
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f915 	bl	800740c <USBD_CtlSendData>
        break;
 80071e2:	e004      	b.n	80071ee <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80071e4:	6839      	ldr	r1, [r7, #0]
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f8a6 	bl	8007338 <USBD_CtlError>
        break;
 80071ec:	bf00      	nop
}
 80071ee:	bf00      	nop
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b082      	sub	sp, #8
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007206:	3b01      	subs	r3, #1
 8007208:	2b02      	cmp	r3, #2
 800720a:	d81e      	bhi.n	800724a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	88db      	ldrh	r3, [r3, #6]
 8007210:	2b02      	cmp	r3, #2
 8007212:	d004      	beq.n	800721e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f88e 	bl	8007338 <USBD_CtlError>
        break;
 800721c:	e01a      	b.n	8007254 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800722a:	2b00      	cmp	r3, #0
 800722c:	d005      	beq.n	800723a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	f043 0202 	orr.w	r2, r3, #2
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	330c      	adds	r3, #12
 800723e:	2202      	movs	r2, #2
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f8e2 	bl	800740c <USBD_CtlSendData>
      break;
 8007248:	e004      	b.n	8007254 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f873 	bl	8007338 <USBD_CtlError>
      break;
 8007252:	bf00      	nop
  }
}
 8007254:	bf00      	nop
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	885b      	ldrh	r3, [r3, #2]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d106      	bne.n	800727c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f908 	bl	800748c <USBD_CtlSendStatus>
  }
}
 800727c:	bf00      	nop
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007294:	3b01      	subs	r3, #1
 8007296:	2b02      	cmp	r3, #2
 8007298:	d80b      	bhi.n	80072b2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	885b      	ldrh	r3, [r3, #2]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d10c      	bne.n	80072bc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f8ee 	bl	800748c <USBD_CtlSendStatus>
      }
      break;
 80072b0:	e004      	b.n	80072bc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f83f 	bl	8007338 <USBD_CtlError>
      break;
 80072ba:	e000      	b.n	80072be <USBD_ClrFeature+0x3a>
      break;
 80072bc:	bf00      	nop
  }
}
 80072be:	bf00      	nop
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b083      	sub	sp, #12
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	781a      	ldrb	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	785a      	ldrb	r2, [r3, #1]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	3302      	adds	r3, #2
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	3303      	adds	r3, #3
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	021b      	lsls	r3, r3, #8
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	4413      	add	r3, r2
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	3304      	adds	r3, #4
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	461a      	mov	r2, r3
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	3305      	adds	r3, #5
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	021b      	lsls	r3, r3, #8
 800730a:	b29b      	uxth	r3, r3
 800730c:	4413      	add	r3, r2
 800730e:	b29a      	uxth	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	3306      	adds	r3, #6
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	3307      	adds	r3, #7
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	021b      	lsls	r3, r3, #8
 8007324:	b29b      	uxth	r3, r3
 8007326:	4413      	add	r3, r2
 8007328:	b29a      	uxth	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	80da      	strh	r2, [r3, #6]

}
 800732e:	bf00      	nop
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	bc80      	pop	{r7}
 8007336:	4770      	bx	lr

08007338 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007342:	2180      	movs	r1, #128	@ 0x80
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fb65 	bl	8007a14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800734a:	2100      	movs	r1, #0
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fb61 	bl	8007a14 <USBD_LL_StallEP>
}
 8007352:	bf00      	nop
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b086      	sub	sp, #24
 800735e:	af00      	add	r7, sp, #0
 8007360:	60f8      	str	r0, [r7, #12]
 8007362:	60b9      	str	r1, [r7, #8]
 8007364:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d032      	beq.n	80073d6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 f834 	bl	80073de <USBD_GetLen>
 8007376:	4603      	mov	r3, r0
 8007378:	3301      	adds	r3, #1
 800737a:	b29b      	uxth	r3, r3
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007384:	7dfb      	ldrb	r3, [r7, #23]
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	75fa      	strb	r2, [r7, #23]
 800738a:	461a      	mov	r2, r3
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	4413      	add	r3, r2
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	7812      	ldrb	r2, [r2, #0]
 8007394:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	75fa      	strb	r2, [r7, #23]
 800739c:	461a      	mov	r2, r3
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	4413      	add	r3, r2
 80073a2:	2203      	movs	r2, #3
 80073a4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80073a6:	e012      	b.n	80073ce <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	1c5a      	adds	r2, r3, #1
 80073ac:	60fa      	str	r2, [r7, #12]
 80073ae:	7dfa      	ldrb	r2, [r7, #23]
 80073b0:	1c51      	adds	r1, r2, #1
 80073b2:	75f9      	strb	r1, [r7, #23]
 80073b4:	4611      	mov	r1, r2
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	440a      	add	r2, r1
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80073be:	7dfb      	ldrb	r3, [r7, #23]
 80073c0:	1c5a      	adds	r2, r3, #1
 80073c2:	75fa      	strb	r2, [r7, #23]
 80073c4:	461a      	mov	r2, r3
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	4413      	add	r3, r2
 80073ca:	2200      	movs	r2, #0
 80073cc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e8      	bne.n	80073a8 <USBD_GetString+0x4e>
    }
  }
}
 80073d6:	bf00      	nop
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073de:	b480      	push	{r7}
 80073e0:	b085      	sub	sp, #20
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80073ea:	e005      	b.n	80073f8 <USBD_GetLen+0x1a>
  {
    len++;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	3301      	adds	r3, #1
 80073f0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3301      	adds	r3, #1
 80073f6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1f5      	bne.n	80073ec <USBD_GetLen+0xe>
  }

  return len;
 8007400:	7bfb      	ldrb	r3, [r7, #15]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	bc80      	pop	{r7}
 800740a:	4770      	bx	lr

0800740c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	4613      	mov	r3, r2
 8007418:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2202      	movs	r2, #2
 800741e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007422:	88fa      	ldrh	r2, [r7, #6]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007428:	88fa      	ldrh	r2, [r7, #6]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800742e:	88fb      	ldrh	r3, [r7, #6]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	2100      	movs	r1, #0
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 fb76 	bl	8007b26 <USBD_LL_Transmit>

  return USBD_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	4613      	mov	r3, r2
 8007450:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007452:	88fb      	ldrh	r3, [r7, #6]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	2100      	movs	r1, #0
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 fb64 	bl	8007b26 <USBD_LL_Transmit>

  return USBD_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	4613      	mov	r3, r2
 8007474:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007476:	88fb      	ldrh	r3, [r7, #6]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	2100      	movs	r1, #0
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 fb75 	bl	8007b6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2204      	movs	r2, #4
 8007498:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800749c:	2300      	movs	r3, #0
 800749e:	2200      	movs	r2, #0
 80074a0:	2100      	movs	r1, #0
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fb3f 	bl	8007b26 <USBD_LL_Transmit>

  return USBD_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b082      	sub	sp, #8
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2205      	movs	r2, #5
 80074be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074c2:	2300      	movs	r3, #0
 80074c4:	2200      	movs	r2, #0
 80074c6:	2100      	movs	r1, #0
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fb4f 	bl	8007b6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074dc:	2200      	movs	r2, #0
 80074de:	490e      	ldr	r1, [pc, #56]	@ (8007518 <MX_USB_DEVICE_Init+0x40>)
 80074e0:	480e      	ldr	r0, [pc, #56]	@ (800751c <MX_USB_DEVICE_Init+0x44>)
 80074e2:	f7fe ff81 	bl	80063e8 <USBD_Init>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074ec:	f7f9 fc5a 	bl	8000da4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80074f0:	490b      	ldr	r1, [pc, #44]	@ (8007520 <MX_USB_DEVICE_Init+0x48>)
 80074f2:	480a      	ldr	r0, [pc, #40]	@ (800751c <MX_USB_DEVICE_Init+0x44>)
 80074f4:	f7fe ffa3 	bl	800643e <USBD_RegisterClass>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80074fe:	f7f9 fc51 	bl	8000da4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007502:	4806      	ldr	r0, [pc, #24]	@ (800751c <MX_USB_DEVICE_Init+0x44>)
 8007504:	f7fe ffb4 	bl	8006470 <USBD_Start>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800750e:	f7f9 fc49 	bl	8000da4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007512:	bf00      	nop
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	20000108 	.word	0x20000108
 800751c:	2000017c 	.word	0x2000017c
 8007520:	2000000c 	.word	0x2000000c

08007524 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	4603      	mov	r3, r0
 800752c:	6039      	str	r1, [r7, #0]
 800752e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2212      	movs	r2, #18
 8007534:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007536:	4b03      	ldr	r3, [pc, #12]	@ (8007544 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007538:	4618      	mov	r0, r3
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	bc80      	pop	{r7}
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	20000124 	.word	0x20000124

08007548 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	4603      	mov	r3, r0
 8007550:	6039      	str	r1, [r7, #0]
 8007552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2204      	movs	r2, #4
 8007558:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800755a:	4b03      	ldr	r3, [pc, #12]	@ (8007568 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800755c:	4618      	mov	r0, r3
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	bc80      	pop	{r7}
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	20000138 	.word	0x20000138

0800756c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	4603      	mov	r3, r0
 8007574:	6039      	str	r1, [r7, #0]
 8007576:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007578:	79fb      	ldrb	r3, [r7, #7]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d105      	bne.n	800758a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	4907      	ldr	r1, [pc, #28]	@ (80075a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007582:	4808      	ldr	r0, [pc, #32]	@ (80075a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007584:	f7ff fee9 	bl	800735a <USBD_GetString>
 8007588:	e004      	b.n	8007594 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	4904      	ldr	r1, [pc, #16]	@ (80075a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800758e:	4805      	ldr	r0, [pc, #20]	@ (80075a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007590:	f7ff fee3 	bl	800735a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007594:	4b02      	ldr	r3, [pc, #8]	@ (80075a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007596:	4618      	mov	r0, r3
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20000440 	.word	0x20000440
 80075a4:	08007cbc 	.word	0x08007cbc

080075a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	4603      	mov	r3, r0
 80075b0:	6039      	str	r1, [r7, #0]
 80075b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	4904      	ldr	r1, [pc, #16]	@ (80075c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075b8:	4804      	ldr	r0, [pc, #16]	@ (80075cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075ba:	f7ff fece 	bl	800735a <USBD_GetString>
  return USBD_StrDesc;
 80075be:	4b02      	ldr	r3, [pc, #8]	@ (80075c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	20000440 	.word	0x20000440
 80075cc:	08007cc4 	.word	0x08007cc4

080075d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	4603      	mov	r3, r0
 80075d8:	6039      	str	r1, [r7, #0]
 80075da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	221a      	movs	r2, #26
 80075e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075e2:	f000 f843 	bl	800766c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075e6:	4b02      	ldr	r3, [pc, #8]	@ (80075f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	2000013c 	.word	0x2000013c

080075f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	4603      	mov	r3, r0
 80075fc:	6039      	str	r1, [r7, #0]
 80075fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007600:	79fb      	ldrb	r3, [r7, #7]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d105      	bne.n	8007612 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	4907      	ldr	r1, [pc, #28]	@ (8007628 <USBD_FS_ConfigStrDescriptor+0x34>)
 800760a:	4808      	ldr	r0, [pc, #32]	@ (800762c <USBD_FS_ConfigStrDescriptor+0x38>)
 800760c:	f7ff fea5 	bl	800735a <USBD_GetString>
 8007610:	e004      	b.n	800761c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	4904      	ldr	r1, [pc, #16]	@ (8007628 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007616:	4805      	ldr	r0, [pc, #20]	@ (800762c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007618:	f7ff fe9f 	bl	800735a <USBD_GetString>
  }
  return USBD_StrDesc;
 800761c:	4b02      	ldr	r3, [pc, #8]	@ (8007628 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	20000440 	.word	0x20000440
 800762c:	08007cd8 	.word	0x08007cd8

08007630 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	4603      	mov	r3, r0
 8007638:	6039      	str	r1, [r7, #0]
 800763a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800763c:	79fb      	ldrb	r3, [r7, #7]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d105      	bne.n	800764e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	4907      	ldr	r1, [pc, #28]	@ (8007664 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007646:	4808      	ldr	r0, [pc, #32]	@ (8007668 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007648:	f7ff fe87 	bl	800735a <USBD_GetString>
 800764c:	e004      	b.n	8007658 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	4904      	ldr	r1, [pc, #16]	@ (8007664 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007652:	4805      	ldr	r0, [pc, #20]	@ (8007668 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007654:	f7ff fe81 	bl	800735a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007658:	4b02      	ldr	r3, [pc, #8]	@ (8007664 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20000440 	.word	0x20000440
 8007668:	08007ce4 	.word	0x08007ce4

0800766c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007672:	4b0f      	ldr	r3, [pc, #60]	@ (80076b0 <Get_SerialNum+0x44>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007678:	4b0e      	ldr	r3, [pc, #56]	@ (80076b4 <Get_SerialNum+0x48>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800767e:	4b0e      	ldr	r3, [pc, #56]	@ (80076b8 <Get_SerialNum+0x4c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4413      	add	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d009      	beq.n	80076a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007692:	2208      	movs	r2, #8
 8007694:	4909      	ldr	r1, [pc, #36]	@ (80076bc <Get_SerialNum+0x50>)
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 f814 	bl	80076c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800769c:	2204      	movs	r2, #4
 800769e:	4908      	ldr	r1, [pc, #32]	@ (80076c0 <Get_SerialNum+0x54>)
 80076a0:	68b8      	ldr	r0, [r7, #8]
 80076a2:	f000 f80f 	bl	80076c4 <IntToUnicode>
  }
}
 80076a6:	bf00      	nop
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	1ffff7e8 	.word	0x1ffff7e8
 80076b4:	1ffff7ec 	.word	0x1ffff7ec
 80076b8:	1ffff7f0 	.word	0x1ffff7f0
 80076bc:	2000013e 	.word	0x2000013e
 80076c0:	2000014e 	.word	0x2000014e

080076c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	4613      	mov	r3, r2
 80076d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076d2:	2300      	movs	r3, #0
 80076d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076d6:	2300      	movs	r3, #0
 80076d8:	75fb      	strb	r3, [r7, #23]
 80076da:	e027      	b.n	800772c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	0f1b      	lsrs	r3, r3, #28
 80076e0:	2b09      	cmp	r3, #9
 80076e2:	d80b      	bhi.n	80076fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	0f1b      	lsrs	r3, r3, #28
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	4619      	mov	r1, r3
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	440b      	add	r3, r1
 80076f4:	3230      	adds	r2, #48	@ 0x30
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	701a      	strb	r2, [r3, #0]
 80076fa:	e00a      	b.n	8007712 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	0f1b      	lsrs	r3, r3, #28
 8007700:	b2da      	uxtb	r2, r3
 8007702:	7dfb      	ldrb	r3, [r7, #23]
 8007704:	005b      	lsls	r3, r3, #1
 8007706:	4619      	mov	r1, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	440b      	add	r3, r1
 800770c:	3237      	adds	r2, #55	@ 0x37
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007718:	7dfb      	ldrb	r3, [r7, #23]
 800771a:	005b      	lsls	r3, r3, #1
 800771c:	3301      	adds	r3, #1
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	4413      	add	r3, r2
 8007722:	2200      	movs	r2, #0
 8007724:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007726:	7dfb      	ldrb	r3, [r7, #23]
 8007728:	3301      	adds	r3, #1
 800772a:	75fb      	strb	r3, [r7, #23]
 800772c:	7dfa      	ldrb	r2, [r7, #23]
 800772e:	79fb      	ldrb	r3, [r7, #7]
 8007730:	429a      	cmp	r2, r3
 8007732:	d3d3      	bcc.n	80076dc <IntToUnicode+0x18>
  }
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop
 8007738:	371c      	adds	r7, #28
 800773a:	46bd      	mov	sp, r7
 800773c:	bc80      	pop	{r7}
 800773e:	4770      	bx	lr

08007740 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a0d      	ldr	r2, [pc, #52]	@ (8007784 <HAL_PCD_MspInit+0x44>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d113      	bne.n	800777a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007752:	4b0d      	ldr	r3, [pc, #52]	@ (8007788 <HAL_PCD_MspInit+0x48>)
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	4a0c      	ldr	r2, [pc, #48]	@ (8007788 <HAL_PCD_MspInit+0x48>)
 8007758:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800775c:	61d3      	str	r3, [r2, #28]
 800775e:	4b0a      	ldr	r3, [pc, #40]	@ (8007788 <HAL_PCD_MspInit+0x48>)
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800776a:	2200      	movs	r2, #0
 800776c:	2100      	movs	r1, #0
 800776e:	2014      	movs	r0, #20
 8007770:	f7f9 fd0f 	bl	8001192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007774:	2014      	movs	r0, #20
 8007776:	f7f9 fd28 	bl	80011ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800777a:	bf00      	nop
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	40005c00 	.word	0x40005c00
 8007788:	40021000 	.word	0x40021000

0800778c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80077a0:	4619      	mov	r1, r3
 80077a2:	4610      	mov	r0, r2
 80077a4:	f7fe feac 	bl	8006500 <USBD_LL_SetupStage>
}
 80077a8:	bf00      	nop
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 80077c2:	78fa      	ldrb	r2, [r7, #3]
 80077c4:	6879      	ldr	r1, [r7, #4]
 80077c6:	4613      	mov	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4413      	add	r3, r2
 80077cc:	00db      	lsls	r3, r3, #3
 80077ce:	440b      	add	r3, r1
 80077d0:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	78fb      	ldrb	r3, [r7, #3]
 80077d8:	4619      	mov	r1, r3
 80077da:	f7fe fede 	bl	800659a <USBD_LL_DataOutStage>
}
 80077de:	bf00      	nop
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	460b      	mov	r3, r1
 80077f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 80077f8:	78fa      	ldrb	r2, [r7, #3]
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	4613      	mov	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4413      	add	r3, r2
 8007802:	00db      	lsls	r3, r3, #3
 8007804:	440b      	add	r3, r1
 8007806:	333c      	adds	r3, #60	@ 0x3c
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	78fb      	ldrb	r3, [r7, #3]
 800780c:	4619      	mov	r1, r3
 800780e:	f7fe ff35 	bl	800667c <USBD_LL_DataInStage>
}
 8007812:	bf00      	nop
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b082      	sub	sp, #8
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8007828:	4618      	mov	r0, r3
 800782a:	f7ff f845 	bl	80068b8 <USBD_LL_SOF>
}
 800782e:	bf00      	nop
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800783e:	2301      	movs	r3, #1
 8007840:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	2b02      	cmp	r3, #2
 8007848:	d001      	beq.n	800784e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800784a:	f7f9 faab 	bl	8000da4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8007854:	7bfa      	ldrb	r2, [r7, #15]
 8007856:	4611      	mov	r1, r2
 8007858:	4618      	mov	r0, r3
 800785a:	f7fe fff5 	bl	8006848 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8007864:	4618      	mov	r0, r3
 8007866:	f7fe ffae 	bl	80067c6 <USBD_LL_Reset>
}
 800786a:	bf00      	nop
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
	...

08007874 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8007882:	4618      	mov	r0, r3
 8007884:	f7fe ffef 	bl	8006866 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d005      	beq.n	800789c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007890:	4b04      	ldr	r3, [pc, #16]	@ (80078a4 <HAL_PCD_SuspendCallback+0x30>)
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	4a03      	ldr	r2, [pc, #12]	@ (80078a4 <HAL_PCD_SuspendCallback+0x30>)
 8007896:	f043 0306 	orr.w	r3, r3, #6
 800789a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800789c:	bf00      	nop
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	e000ed00 	.word	0xe000ed00

080078a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fe ffe9 	bl	800688e <USBD_LL_Resume>
}
 80078bc:	bf00      	nop
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80078cc:	4a1f      	ldr	r2, [pc, #124]	@ (800794c <USBD_LL_Init+0x88>)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a1d      	ldr	r2, [pc, #116]	@ (800794c <USBD_LL_Init+0x88>)
 80078d8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80078dc:	4b1b      	ldr	r3, [pc, #108]	@ (800794c <USBD_LL_Init+0x88>)
 80078de:	4a1c      	ldr	r2, [pc, #112]	@ (8007950 <USBD_LL_Init+0x8c>)
 80078e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80078e2:	4b1a      	ldr	r3, [pc, #104]	@ (800794c <USBD_LL_Init+0x88>)
 80078e4:	2208      	movs	r2, #8
 80078e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80078e8:	4b18      	ldr	r3, [pc, #96]	@ (800794c <USBD_LL_Init+0x88>)
 80078ea:	2202      	movs	r2, #2
 80078ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80078ee:	4b17      	ldr	r3, [pc, #92]	@ (800794c <USBD_LL_Init+0x88>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80078f4:	4b15      	ldr	r3, [pc, #84]	@ (800794c <USBD_LL_Init+0x88>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80078fa:	4b14      	ldr	r3, [pc, #80]	@ (800794c <USBD_LL_Init+0x88>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007900:	4812      	ldr	r0, [pc, #72]	@ (800794c <USBD_LL_Init+0x88>)
 8007902:	f7f9 fe30 	bl	8001566 <HAL_PCD_Init>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800790c:	f7f9 fa4a 	bl	8000da4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007916:	2318      	movs	r3, #24
 8007918:	2200      	movs	r2, #0
 800791a:	2100      	movs	r1, #0
 800791c:	f7fb fb37 	bl	8002f8e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007926:	2358      	movs	r3, #88	@ 0x58
 8007928:	2200      	movs	r2, #0
 800792a:	2180      	movs	r1, #128	@ 0x80
 800792c:	f7fb fb2f 	bl	8002f8e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007936:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800793a:	2200      	movs	r2, #0
 800793c:	2181      	movs	r1, #129	@ 0x81
 800793e:	f7fb fb26 	bl	8002f8e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20000640 	.word	0x20000640
 8007950:	40005c00 	.word	0x40005c00

08007954 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007960:	2300      	movs	r3, #0
 8007962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800796a:	4618      	mov	r0, r3
 800796c:	f7f9 fefa 	bl	8001764 <HAL_PCD_Start>
 8007970:	4603      	mov	r3, r0
 8007972:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007974:	7bfb      	ldrb	r3, [r7, #15]
 8007976:	4618      	mov	r0, r3
 8007978:	f000 f93c 	bl	8007bf4 <USBD_Get_USB_Status>
 800797c:	4603      	mov	r3, r0
 800797e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007980:	7bbb      	ldrb	r3, [r7, #14]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	4608      	mov	r0, r1
 8007994:	4611      	mov	r1, r2
 8007996:	461a      	mov	r2, r3
 8007998:	4603      	mov	r3, r0
 800799a:	70fb      	strb	r3, [r7, #3]
 800799c:	460b      	mov	r3, r1
 800799e:	70bb      	strb	r3, [r7, #2]
 80079a0:	4613      	mov	r3, r2
 80079a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80079b2:	78bb      	ldrb	r3, [r7, #2]
 80079b4:	883a      	ldrh	r2, [r7, #0]
 80079b6:	78f9      	ldrb	r1, [r7, #3]
 80079b8:	f7fa f84f 	bl	8001a5a <HAL_PCD_EP_Open>
 80079bc:	4603      	mov	r3, r0
 80079be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 f916 	bl	8007bf4 <USBD_Get_USB_Status>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	460b      	mov	r3, r1
 80079e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80079f0:	78fa      	ldrb	r2, [r7, #3]
 80079f2:	4611      	mov	r1, r2
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fa f88d 	bl	8001b14 <HAL_PCD_EP_Close>
 80079fa:	4603      	mov	r3, r0
 80079fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 f8f7 	bl	8007bf4 <USBD_Get_USB_Status>
 8007a06:	4603      	mov	r3, r0
 8007a08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a20:	2300      	movs	r3, #0
 8007a22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007a2e:	78fa      	ldrb	r2, [r7, #3]
 8007a30:	4611      	mov	r1, r2
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fa f91e 	bl	8001c74 <HAL_PCD_EP_SetStall>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 f8d8 	bl	8007bf4 <USBD_Get_USB_Status>
 8007a44:	4603      	mov	r3, r0
 8007a46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007a6c:	78fa      	ldrb	r2, [r7, #3]
 8007a6e:	4611      	mov	r1, r2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fa f95f 	bl	8001d34 <HAL_PCD_EP_ClrStall>
 8007a76:	4603      	mov	r3, r0
 8007a78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 f8b9 	bl	8007bf4 <USBD_Get_USB_Status>
 8007a82:	4603      	mov	r3, r0
 8007a84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a86:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007aa2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007aa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	da0c      	bge.n	8007ac6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007aac:	78fb      	ldrb	r3, [r7, #3]
 8007aae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ab2:	68f9      	ldr	r1, [r7, #12]
 8007ab4:	1c5a      	adds	r2, r3, #1
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	00db      	lsls	r3, r3, #3
 8007abe:	440b      	add	r3, r1
 8007ac0:	3302      	adds	r3, #2
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	e00b      	b.n	8007ade <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ac6:	78fb      	ldrb	r3, [r7, #3]
 8007ac8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007acc:	68f9      	ldr	r1, [r7, #12]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	00db      	lsls	r3, r3, #3
 8007ad6:	440b      	add	r3, r1
 8007ad8:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8007adc:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bc80      	pop	{r7}
 8007ae6:	4770      	bx	lr

08007ae8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	460b      	mov	r3, r1
 8007af2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007b02:	78fa      	ldrb	r2, [r7, #3]
 8007b04:	4611      	mov	r1, r2
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7f9 ff82 	bl	8001a10 <HAL_PCD_SetAddress>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b10:	7bfb      	ldrb	r3, [r7, #15]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 f86e 	bl	8007bf4 <USBD_Get_USB_Status>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b086      	sub	sp, #24
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	60f8      	str	r0, [r7, #12]
 8007b2e:	607a      	str	r2, [r7, #4]
 8007b30:	461a      	mov	r2, r3
 8007b32:	460b      	mov	r3, r1
 8007b34:	72fb      	strb	r3, [r7, #11]
 8007b36:	4613      	mov	r3, r2
 8007b38:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007b48:	893b      	ldrh	r3, [r7, #8]
 8007b4a:	7af9      	ldrb	r1, [r7, #11]
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	f7fa f85a 	bl	8001c06 <HAL_PCD_EP_Transmit>
 8007b52:	4603      	mov	r3, r0
 8007b54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b56:	7dfb      	ldrb	r3, [r7, #23]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 f84b 	bl	8007bf4 <USBD_Get_USB_Status>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b62:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3718      	adds	r7, #24
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	607a      	str	r2, [r7, #4]
 8007b76:	461a      	mov	r2, r3
 8007b78:	460b      	mov	r3, r1
 8007b7a:	72fb      	strb	r3, [r7, #11]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007b8e:	893b      	ldrh	r3, [r7, #8]
 8007b90:	7af9      	ldrb	r1, [r7, #11]
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	f7fa f806 	bl	8001ba4 <HAL_PCD_EP_Receive>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 f828 	bl	8007bf4 <USBD_Get_USB_Status>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ba8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007bbc:	4b02      	ldr	r3, [pc, #8]	@ (8007bc8 <USBD_static_malloc+0x14>)
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bc80      	pop	{r7}
 8007bc6:	4770      	bx	lr
 8007bc8:	20000930 	.word	0x20000930

08007bcc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]

}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bc80      	pop	{r7}
 8007bdc:	4770      	bx	lr

08007bde <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bde:	b480      	push	{r7}
 8007be0:	b083      	sub	sp, #12
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	460b      	mov	r3, r1
 8007be8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bc80      	pop	{r7}
 8007bf2:	4770      	bx	lr

08007bf4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c02:	79fb      	ldrb	r3, [r7, #7]
 8007c04:	2b03      	cmp	r3, #3
 8007c06:	d817      	bhi.n	8007c38 <USBD_Get_USB_Status+0x44>
 8007c08:	a201      	add	r2, pc, #4	@ (adr r2, 8007c10 <USBD_Get_USB_Status+0x1c>)
 8007c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0e:	bf00      	nop
 8007c10:	08007c21 	.word	0x08007c21
 8007c14:	08007c27 	.word	0x08007c27
 8007c18:	08007c2d 	.word	0x08007c2d
 8007c1c:	08007c33 	.word	0x08007c33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	73fb      	strb	r3, [r7, #15]
    break;
 8007c24:	e00b      	b.n	8007c3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c26:	2302      	movs	r3, #2
 8007c28:	73fb      	strb	r3, [r7, #15]
    break;
 8007c2a:	e008      	b.n	8007c3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c30:	e005      	b.n	8007c3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c32:	2302      	movs	r3, #2
 8007c34:	73fb      	strb	r3, [r7, #15]
    break;
 8007c36:	e002      	b.n	8007c3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c38:	2302      	movs	r3, #2
 8007c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c3c:	bf00      	nop
  }
  return usb_status;
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc80      	pop	{r7}
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop

08007c4c <memset>:
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	4402      	add	r2, r0
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d100      	bne.n	8007c56 <memset+0xa>
 8007c54:	4770      	bx	lr
 8007c56:	f803 1b01 	strb.w	r1, [r3], #1
 8007c5a:	e7f9      	b.n	8007c50 <memset+0x4>

08007c5c <__libc_init_array>:
 8007c5c:	b570      	push	{r4, r5, r6, lr}
 8007c5e:	2600      	movs	r6, #0
 8007c60:	4d0c      	ldr	r5, [pc, #48]	@ (8007c94 <__libc_init_array+0x38>)
 8007c62:	4c0d      	ldr	r4, [pc, #52]	@ (8007c98 <__libc_init_array+0x3c>)
 8007c64:	1b64      	subs	r4, r4, r5
 8007c66:	10a4      	asrs	r4, r4, #2
 8007c68:	42a6      	cmp	r6, r4
 8007c6a:	d109      	bne.n	8007c80 <__libc_init_array+0x24>
 8007c6c:	f000 f81a 	bl	8007ca4 <_init>
 8007c70:	2600      	movs	r6, #0
 8007c72:	4d0a      	ldr	r5, [pc, #40]	@ (8007c9c <__libc_init_array+0x40>)
 8007c74:	4c0a      	ldr	r4, [pc, #40]	@ (8007ca0 <__libc_init_array+0x44>)
 8007c76:	1b64      	subs	r4, r4, r5
 8007c78:	10a4      	asrs	r4, r4, #2
 8007c7a:	42a6      	cmp	r6, r4
 8007c7c:	d105      	bne.n	8007c8a <__libc_init_array+0x2e>
 8007c7e:	bd70      	pop	{r4, r5, r6, pc}
 8007c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c84:	4798      	blx	r3
 8007c86:	3601      	adds	r6, #1
 8007c88:	e7ee      	b.n	8007c68 <__libc_init_array+0xc>
 8007c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c8e:	4798      	blx	r3
 8007c90:	3601      	adds	r6, #1
 8007c92:	e7f2      	b.n	8007c7a <__libc_init_array+0x1e>
 8007c94:	08007d18 	.word	0x08007d18
 8007c98:	08007d18 	.word	0x08007d18
 8007c9c:	08007d18 	.word	0x08007d18
 8007ca0:	08007d1c 	.word	0x08007d1c

08007ca4 <_init>:
 8007ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca6:	bf00      	nop
 8007ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007caa:	bc08      	pop	{r3}
 8007cac:	469e      	mov	lr, r3
 8007cae:	4770      	bx	lr

08007cb0 <_fini>:
 8007cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb2:	bf00      	nop
 8007cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cb6:	bc08      	pop	{r3}
 8007cb8:	469e      	mov	lr, r3
 8007cba:	4770      	bx	lr
